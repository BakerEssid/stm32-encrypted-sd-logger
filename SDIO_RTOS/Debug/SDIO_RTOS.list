
SDIO_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e794  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001144  0800e924  0800e924  0000f924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa68  0800fa68  00011088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fa68  0800fa68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa70  0800fa70  00011088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa70  0800fa70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa74  0800fa74  00010a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800fa78  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011088  2**0
                  CONTENTS
 10 .bss          000054ec  20000088  20000088  00011088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005574  20005574  00011088  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002118d  00000000  00000000  000110b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cff  00000000  00000000  00032243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001620  00000000  00000000  00038c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000749c  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028690  00000000  00000000  000416dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f06e7  00000000  00000000  00069d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c5  00000000  00000000  0015a453  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dcc  00000000  00000000  0015a518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001622e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e90c 	.word	0x0800e90c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800e90c 	.word	0x0800e90c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <EncodeHex>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Convertit un tableau de bytes en chaîne hexadécimale.
void EncodeHex(uint8_t *input, uint32_t length, char *output)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < length; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00e      	b.n	80005dc <EncodeHex+0x30>
        sprintf(&output[i * 2], "%02X", input[i]);
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	18d0      	adds	r0, r2, r3
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4909      	ldr	r1, [pc, #36]	@ (80005f8 <EncodeHex+0x4c>)
 80005d2:	f00d fd4b 	bl	800e06c <siprintf>
    for (uint32_t i = 0; i < length; i++) {
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3ec      	bcc.n	80005be <EncodeHex+0x12>
    }
    output[length * 2] = '\0'; // null-terminate
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800e9b4 	.word	0x0800e9b4

080005fc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d111      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x34>
	{
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800060c:	2006      	movs	r0, #6
 800060e:	f001 fd59 	bl	80020c4 <HAL_NVIC_DisableIRQ>
		counter++;
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <HAL_GPIO_EXTI_Callback+0x3c>)
 800061a:	6013      	str	r3, [r2, #0]
		if(osSemaphoreRelease(BinarySemSD_CARDHandle)!=osOK)
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <HAL_GPIO_EXTI_Callback+0x40>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f008 ffbb 	bl	800959c <osSemaphoreRelease>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <HAL_GPIO_EXTI_Callback+0x34>
		{
		   Error_Handler();
 800062c:	f000 fcec 	bl	8001008 <Error_Handler>
		}
	}
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000964 	.word	0x20000964
 800063c:	20000284 	.word	0x20000284

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 ffd2 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f898 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fa0a 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 f9e0 	bl	8000a14 <MX_DMA_Init>
  MX_ADC1_Init();
 8000654:	f000 f8fe 	bl	8000854 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000658:	f000 f9bc 	bl	80009d4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800065c:	f005 fcb0 	bl	8005fc0 <MX_FATFS_Init>
  MX_RTC_Init();
 8000660:	f000 f95e 	bl	8000920 <MX_RTC_Init>
  MX_RNG_Init();
 8000664:	f000 f948 	bl	80008f8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000668:	f008 fdc6 	bl	80091f8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemSD_CARD */
  BinarySemSD_CARDHandle = osSemaphoreNew(1, 1, &BinarySemSD_CARD_attributes);
 800066c:	4a29      	ldr	r2, [pc, #164]	@ (8000714 <main+0xd4>)
 800066e:	2101      	movs	r1, #1
 8000670:	2001      	movs	r0, #1
 8000672:	f008 feb8 	bl	80093e6 <osSemaphoreNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a27      	ldr	r2, [pc, #156]	@ (8000718 <main+0xd8>)
 800067a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RTC_Queue */
  RTC_QueueHandle = osMessageQueueNew (6, sizeof(Struct_RTC), &RTC_Queue_attributes);
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <main+0xdc>)
 800067e:	2106      	movs	r1, #6
 8000680:	2006      	movs	r0, #6
 8000682:	f008 ffcf 	bl	8009624 <osMessageQueueNew>
 8000686:	4603      	mov	r3, r0
 8000688:	4a25      	ldr	r2, [pc, #148]	@ (8000720 <main+0xe0>)
 800068a:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Queue */
  ADC_QueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &ADC_Queue_attributes);
 800068c:	4a25      	ldr	r2, [pc, #148]	@ (8000724 <main+0xe4>)
 800068e:	2102      	movs	r1, #2
 8000690:	2001      	movs	r0, #1
 8000692:	f008 ffc7 	bl	8009624 <osMessageQueueNew>
 8000696:	4603      	mov	r3, r0
 8000698:	4a23      	ldr	r2, [pc, #140]	@ (8000728 <main+0xe8>)
 800069a:	6013      	str	r3, [r2, #0]

  /* creation of Encrypt_DATAQueue */
  Encrypt_DATAQueueHandle = osMessageQueueNew (1, sizeof(EncodedHexbuff), &Encrypt_DATAQueue_attributes);
 800069c:	4a23      	ldr	r2, [pc, #140]	@ (800072c <main+0xec>)
 800069e:	2146      	movs	r1, #70	@ 0x46
 80006a0:	2001      	movs	r0, #1
 80006a2:	f008 ffbf 	bl	8009624 <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <main+0xf0>)
 80006aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ac:	4a21      	ldr	r2, [pc, #132]	@ (8000734 <main+0xf4>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4821      	ldr	r0, [pc, #132]	@ (8000738 <main+0xf8>)
 80006b2:	f008 fdeb 	bl	800928c <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a20      	ldr	r2, [pc, #128]	@ (800073c <main+0xfc>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(Get_ADC_Val, NULL, &ADC_Task_attributes);
 80006bc:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <main+0x100>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <main+0x104>)
 80006c2:	f008 fde3 	bl	800928c <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a1f      	ldr	r2, [pc, #124]	@ (8000748 <main+0x108>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of SDIO_Task */
  SDIO_TaskHandle = osThreadNew(Write_TO_SDIO, NULL, &SDIO_Task_attributes);
 80006cc:	4a1f      	ldr	r2, [pc, #124]	@ (800074c <main+0x10c>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	481f      	ldr	r0, [pc, #124]	@ (8000750 <main+0x110>)
 80006d2:	f008 fddb 	bl	800928c <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <main+0x114>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of RTC_Task */
  RTC_TaskHandle = osThreadNew(Get_Time_Date, NULL, &RTC_Task_attributes);
 80006dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <main+0x118>)
 80006de:	2100      	movs	r1, #0
 80006e0:	481e      	ldr	r0, [pc, #120]	@ (800075c <main+0x11c>)
 80006e2:	f008 fdd3 	bl	800928c <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <main+0x120>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of Encrypt_Task */
  Encrypt_TaskHandle = osThreadNew(Encrypt_DATA, NULL, &Encrypt_Task_attributes);
 80006ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000764 <main+0x124>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	481d      	ldr	r0, [pc, #116]	@ (8000768 <main+0x128>)
 80006f2:	f008 fdcb 	bl	800928c <osThreadNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <main+0x12c>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* creation of Decrypt_Task */
  Decrypt_TaskHandle = osThreadNew(Decrypt_DATA, NULL, &Decrypt_Task_attributes);
 80006fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <main+0x130>)
 80006fe:	2100      	movs	r1, #0
 8000700:	481c      	ldr	r0, [pc, #112]	@ (8000774 <main+0x134>)
 8000702:	f008 fdc3 	bl	800928c <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <main+0x138>)
 800070a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070c:	f008 fd98 	bl	8009240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <main+0xd0>
 8000714:	0800eb88 	.word	0x0800eb88
 8000718:	20000284 	.word	0x20000284
 800071c:	0800eb40 	.word	0x0800eb40
 8000720:	20000278 	.word	0x20000278
 8000724:	0800eb58 	.word	0x0800eb58
 8000728:	2000027c 	.word	0x2000027c
 800072c:	0800eb70 	.word	0x0800eb70
 8000730:	20000280 	.word	0x20000280
 8000734:	0800ea68 	.word	0x0800ea68
 8000738:	08000b6d 	.word	0x08000b6d
 800073c:	20000260 	.word	0x20000260
 8000740:	0800ea8c 	.word	0x0800ea8c
 8000744:	08000b91 	.word	0x08000b91
 8000748:	20000264 	.word	0x20000264
 800074c:	0800eab0 	.word	0x0800eab0
 8000750:	08000c09 	.word	0x08000c09
 8000754:	20000268 	.word	0x20000268
 8000758:	0800ead4 	.word	0x0800ead4
 800075c:	08000d3d 	.word	0x08000d3d
 8000760:	2000026c 	.word	0x2000026c
 8000764:	0800eaf8 	.word	0x0800eaf8
 8000768:	08000dc1 	.word	0x08000dc1
 800076c:	20000270 	.word	0x20000270
 8000770:	0800eb1c 	.word	0x0800eb1c
 8000774:	08000f51 	.word	0x08000f51
 8000778:	20000274 	.word	0x20000274

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00d fcaa 	bl	800e0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2309      	movs	r3, #9
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f4:	2348      	movs	r3, #72	@ 0x48
 80007f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fa09 	bl	8002c1c <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000810:	f000 fbfa 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000818:	2302      	movs	r3, #2
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fc6a 	bl	800310c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083e:	f000 fbe3 	bl	8001008 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	@ (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_ADC1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_ADC1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088c:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_ADC1_Init+0x98>)
 8000894:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0xa0>)
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008b4:	f000 ff00 	bl	80016b8 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fba3 	bl	8001008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <MX_ADC1_Init+0x98>)
 80008d4:	f001 f8d2 	bl	8001a7c <HAL_ADC_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008de:	f000 fb93 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000a4 	.word	0x200000a4
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_RNG_Init+0x20>)
 80008fe:	4a07      	ldr	r2, [pc, #28]	@ (800091c <MX_RNG_Init+0x24>)
 8000900:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_RNG_Init+0x20>)
 8000904:	f002 ff22 	bl	800374c <HAL_RNG_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800090e:	f000 fb7b 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000ec 	.word	0x200000ec
 800091c:	50060800 	.word	0x50060800

08000920 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <MX_RTC_Init+0xac>)
 800093a:	4a25      	ldr	r2, [pc, #148]	@ (80009d0 <MX_RTC_Init+0xb0>)
 800093c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_RTC_Init+0xac>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_RTC_Init+0xac>)
 8000946:	227f      	movs	r2, #127	@ 0x7f
 8000948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <MX_RTC_Init+0xac>)
 800094c:	22ff      	movs	r2, #255	@ 0xff
 800094e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_RTC_Init+0xac>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_RTC_Init+0xac>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_RTC_Init+0xac>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000962:	481a      	ldr	r0, [pc, #104]	@ (80009cc <MX_RTC_Init+0xac>)
 8000964:	f002 ff1c 	bl	80037a0 <HAL_RTC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 fb4b 	bl	8001008 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 8000972:	2315      	movs	r3, #21
 8000974:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x36;
 8000976:	2336      	movs	r3, #54	@ 0x36
 8000978:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800097a:	2300      	movs	r3, #0
 800097c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2201      	movs	r2, #1
 800098a:	4619      	mov	r1, r3
 800098c:	480f      	ldr	r0, [pc, #60]	@ (80009cc <MX_RTC_Init+0xac>)
 800098e:	f002 ff8a 	bl	80038a6 <HAL_RTC_SetTime>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fb36 	bl	8001008 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800099c:	2304      	movs	r3, #4
 800099e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80009a0:	2307      	movs	r3, #7
 80009a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 80009a4:	2317      	movs	r3, #23
 80009a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2201      	movs	r2, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <MX_RTC_Init+0xac>)
 80009b4:	f003 f86f 	bl	8003a96 <HAL_RTC_SetDate>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80009be:	f000 fb23 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000fc 	.word	0x200000fc
 80009d0:	40002800 	.word	0x40002800

080009d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009da:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <MX_SDIO_SD_Init+0x3c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <MX_SDIO_SD_Init+0x38>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	2000011c 	.word	0x2000011c
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <MX_DMA_Init+0x4c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <MX_DMA_Init+0x4c>)
 8000a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <MX_DMA_Init+0x4c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	203b      	movs	r0, #59	@ 0x3b
 8000a3c:	f001 fb18 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a40:	203b      	movs	r0, #59	@ 0x3b
 8000a42:	f001 fb31 	bl	80020a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	2045      	movs	r0, #69	@ 0x45
 8000a4c:	f001 fb10 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a50:	2045      	movs	r0, #69	@ 0x45
 8000a52:	f001 fb29 	bl	80020a8 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a37      	ldr	r2, [pc, #220]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a30      	ldr	r2, [pc, #192]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a29      	ldr	r2, [pc, #164]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a22      	ldr	r2, [pc, #136]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <MX_GPIO_Init+0xfc>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000af0:	481c      	ldr	r0, [pc, #112]	@ (8000b64 <MX_GPIO_Init+0x100>)
 8000af2:	f002 f847 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <MX_GPIO_Init+0x104>)
 8000b0c:	f001 fe86 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b10:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <MX_GPIO_Init+0x100>)
 8000b2a:	f001 fe77 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <MX_GPIO_Init+0x100>)
 8000b42:	f001 fe6b 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2105      	movs	r1, #5
 8000b4a:	2006      	movs	r0, #6
 8000b4c:	f001 fa90 	bl	8002070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b50:	2006      	movs	r0, #6
 8000b52:	f001 faa9 	bl	80020a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	40020000 	.word	0x40020000

08000b6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <StartDefaultTask+0x20>)
 8000b7a:	f002 f81c 	bl	8002bb6 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b82:	f008 fc15 	bl	80093b0 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b86:	bf00      	nop
 8000b88:	e7f4      	b.n	8000b74 <StartDefaultTask+0x8>
 8000b8a:	bf00      	nop
 8000b8c:	40020c00 	.word	0x40020c00

08000b90 <Get_ADC_Val>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Get_ADC_Val */
void Get_ADC_Val(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Get_ADC_Val */
  /* Infinite loop */
  for(;;)
  {
	 if(HAL_ADC_Start(&hadc1)!=HAL_OK)
 8000b98:	4818      	ldr	r0, [pc, #96]	@ (8000bfc <Get_ADC_Val+0x6c>)
 8000b9a:	f000 fdd1 	bl	8001740 <HAL_ADC_Start>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <Get_ADC_Val+0x18>
	 {
	  	Error_Handler();
 8000ba4:	f000 fa30 	bl	8001008 <Error_Handler>
	 }
	 if(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK)
 8000ba8:	2164      	movs	r1, #100	@ 0x64
 8000baa:	4814      	ldr	r0, [pc, #80]	@ (8000bfc <Get_ADC_Val+0x6c>)
 8000bac:	f000 fecd 	bl	800194a <HAL_ADC_PollForConversion>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <Get_ADC_Val+0x2a>
	 {
	  	Error_Handler();
 8000bb6:	f000 fa27 	bl	8001008 <Error_Handler>
	 }
	 ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8000bba:	4810      	ldr	r0, [pc, #64]	@ (8000bfc <Get_ADC_Val+0x6c>)
 8000bbc:	f000 ff50 	bl	8001a60 <HAL_ADC_GetValue>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <Get_ADC_Val+0x70>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	 if(HAL_ADC_Stop(&hadc1)!=HAL_OK)
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <Get_ADC_Val+0x6c>)
 8000bca:	f000 fe8b 	bl	80018e4 <HAL_ADC_Stop>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <Get_ADC_Val+0x48>
	 {
	  	Error_Handler();
 8000bd4:	f000 fa18 	bl	8001008 <Error_Handler>
	 }
	 if(osMessageQueuePut(ADC_QueueHandle, &ADC_VAL, NULL, osWaitForever)!=osOK)
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <Get_ADC_Val+0x74>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	2200      	movs	r2, #0
 8000be2:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <Get_ADC_Val+0x70>)
 8000be4:	f008 fd92 	bl	800970c <osMessageQueuePut>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <Get_ADC_Val+0x62>
	 {
		 Error_Handler();
 8000bee:	f000 fa0b 	bl	8001008 <Error_Handler>
	 }
    osDelay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f008 fbdc 	bl	80093b0 <osDelay>
	 if(HAL_ADC_Start(&hadc1)!=HAL_OK)
 8000bf8:	e7ce      	b.n	8000b98 <Get_ADC_Val+0x8>
 8000bfa:	bf00      	nop
 8000bfc:	200000a4 	.word	0x200000a4
 8000c00:	20000288 	.word	0x20000288
 8000c04:	2000027c 	.word	0x2000027c

08000c08 <Write_TO_SDIO>:
*/
/* USER CODE END Header_Write_TO_SDIO */

//Tâche FreeRTOS d’écriture sur carte SD via SDIO
void Write_TO_SDIO(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09c      	sub	sp, #112	@ 0x70
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	char adc_tab[30];
  /* Infinite loop */
  for(;;)
  {
	  // Récupération du buffer hexadécimal depuis la queue (bloc jusqu'à réception)
	  if(osMessageQueueGet(Encrypt_DATAQueueHandle, &Rec_EncodedHexbuff, NULL, osWaitForever)!=osOK)
 8000c10:	4b3c      	ldr	r3, [pc, #240]	@ (8000d04 <Write_TO_SDIO+0xfc>)
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	2200      	movs	r2, #0
 8000c1a:	493b      	ldr	r1, [pc, #236]	@ (8000d08 <Write_TO_SDIO+0x100>)
 8000c1c:	f008 fdd6 	bl	80097cc <osMessageQueueGet>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <Write_TO_SDIO+0x22>
	  {
	  	 Error_Handler();
 8000c26:	f000 f9ef 	bl	8001008 <Error_Handler>
	  }
	  // Format du numéro d’événement (presses bouton)
	  sprintf(showpress,"%d: ",counter);
 8000c2a:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <Write_TO_SDIO+0x104>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4937      	ldr	r1, [pc, #220]	@ (8000d10 <Write_TO_SDIO+0x108>)
 8000c32:	4838      	ldr	r0, [pc, #224]	@ (8000d14 <Write_TO_SDIO+0x10c>)
 8000c34:	f00d fa1a 	bl	800e06c <siprintf>
	  // Ajout CR/LF après les données pour le fichier texte
	  snprintf(SD_W_Buff,sizeof(SD_W_Buff),"%s\r\n",Rec_EncodedHexbuff);
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <Write_TO_SDIO+0x100>)
 8000c3a:	4a37      	ldr	r2, [pc, #220]	@ (8000d18 <Write_TO_SDIO+0x110>)
 8000c3c:	2146      	movs	r1, #70	@ 0x46
 8000c3e:	4837      	ldr	r0, [pc, #220]	@ (8000d1c <Write_TO_SDIO+0x114>)
 8000c40:	f00d f9de 	bl	800e000 <sniprintf>
	  // Attendre que le sémaphore SD soit disponible (libéré par ISR sur bouton)
	  if(osSemaphoreAcquire(BinarySemSD_CARDHandle, osWaitForever)!=osOK)
 8000c44:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <Write_TO_SDIO+0x118>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 fc53 	bl	80094f8 <osSemaphoreAcquire>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <Write_TO_SDIO+0x54>
	  {
		 Error_Handler();
 8000c58:	f000 f9d6 	bl	8001008 <Error_Handler>
	  }
	  // Initialisation interface SD
	  if( HAL_SD_Init(&hsd)!=HAL_OK)
 8000c5c:	4831      	ldr	r0, [pc, #196]	@ (8000d24 <Write_TO_SDIO+0x11c>)
 8000c5e:	f003 f8ab 	bl	8003db8 <HAL_SD_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <Write_TO_SDIO+0x64>
	  {
	  	 Error_Handler();
 8000c68:	f000 f9ce 	bl	8001008 <Error_Handler>
	  }
	  // Montage du système de fichiers FATFS
	  if(f_mount(&fs, "", 1)!=FR_OK)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	492e      	ldr	r1, [pc, #184]	@ (8000d28 <Write_TO_SDIO+0x120>)
 8000c70:	482e      	ldr	r0, [pc, #184]	@ (8000d2c <Write_TO_SDIO+0x124>)
 8000c72:	f007 fd15 	bl	80086a0 <f_mount>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <Write_TO_SDIO+0x78>
	  {
	  	 Error_Handler();
 8000c7c:	f000 f9c4 	bl	8001008 <Error_Handler>
	  }
	  // Ouvrir fichier en mode append (création si inexistant)
	  if(f_open(&file, "SD_DATA.txt", FA_WRITE | FA_OPEN_APPEND)!=FR_OK)
 8000c80:	2232      	movs	r2, #50	@ 0x32
 8000c82:	492b      	ldr	r1, [pc, #172]	@ (8000d30 <Write_TO_SDIO+0x128>)
 8000c84:	482b      	ldr	r0, [pc, #172]	@ (8000d34 <Write_TO_SDIO+0x12c>)
 8000c86:	f007 fd51 	bl	800872c <f_open>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <Write_TO_SDIO+0x8c>
	  {
	  	 Error_Handler();
 8000c90:	f000 f9ba 	bl	8001008 <Error_Handler>
	  }
	  // Écrire l'index d'événement
	  if(f_write(&file, showpress, sizeof(showpress), &byteswritten)== FR_OK)
 8000c94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c98:	221e      	movs	r2, #30
 8000c9a:	491e      	ldr	r1, [pc, #120]	@ (8000d14 <Write_TO_SDIO+0x10c>)
 8000c9c:	4825      	ldr	r0, [pc, #148]	@ (8000d34 <Write_TO_SDIO+0x12c>)
 8000c9e:	f007 ff0f 	bl	8008ac0 <f_write>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d105      	bne.n	8000cb4 <Write_TO_SDIO+0xac>
	  {
	  	 //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cae:	4822      	ldr	r0, [pc, #136]	@ (8000d38 <Write_TO_SDIO+0x130>)
 8000cb0:	f001 ff68 	bl	8002b84 <HAL_GPIO_WritePin>
	  }
	  // Écrire les données chiffrées
	  if(f_write(&file, SD_W_Buff, sizeof(SD_W_Buff), &byteswritten)== FR_OK)
 8000cb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cb8:	2246      	movs	r2, #70	@ 0x46
 8000cba:	4918      	ldr	r1, [pc, #96]	@ (8000d1c <Write_TO_SDIO+0x114>)
 8000cbc:	481d      	ldr	r0, [pc, #116]	@ (8000d34 <Write_TO_SDIO+0x12c>)
 8000cbe:	f007 feff 	bl	8008ac0 <f_write>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <Write_TO_SDIO+0xcc>
	  {
	  	  	 //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	  	  	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <Write_TO_SDIO+0x130>)
 8000cd0:	f001 ff58 	bl	8002b84 <HAL_GPIO_WritePin>
	  }
	  // Forcer l'écriture sur la carte
	  if(f_sync(&file)!= FR_OK)
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <Write_TO_SDIO+0x12c>)
 8000cd6:	f008 f868 	bl	8008daa <f_sync>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <Write_TO_SDIO+0xdc>
	  {
	  	 Error_Handler();
 8000ce0:	f000 f992 	bl	8001008 <Error_Handler>
	  }
	  // Fermer le fichier
	  if(f_close(&file)!= FR_OK)
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <Write_TO_SDIO+0x12c>)
 8000ce6:	f008 f8de 	bl	8008ea6 <f_close>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <Write_TO_SDIO+0xec>
	  {
	  	 Error_Handler();
 8000cf0:	f000 f98a 	bl	8001008 <Error_Handler>
	  }
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf4:	2006      	movs	r0, #6
 8000cf6:	f001 f9d7 	bl	80020a8 <HAL_NVIC_EnableIRQ>
    osDelay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f008 fb58 	bl	80093b0 <osDelay>
	  if(osMessageQueueGet(Encrypt_DATAQueueHandle, &Rec_EncodedHexbuff, NULL, osWaitForever)!=osOK)
 8000d00:	e786      	b.n	8000c10 <Write_TO_SDIO+0x8>
 8000d02:	bf00      	nop
 8000d04:	20000280 	.word	0x20000280
 8000d08:	200008fc 	.word	0x200008fc
 8000d0c:	20000964 	.word	0x20000964
 8000d10:	0800e9bc 	.word	0x0800e9bc
 8000d14:	20000944 	.word	0x20000944
 8000d18:	0800e9c4 	.word	0x0800e9c4
 8000d1c:	20000968 	.word	0x20000968
 8000d20:	20000284 	.word	0x20000284
 8000d24:	2000011c 	.word	0x2000011c
 8000d28:	0800e9cc 	.word	0x0800e9cc
 8000d2c:	2000028c 	.word	0x2000028c
 8000d30:	0800e9d0 	.word	0x0800e9d0
 8000d34:	200004c0 	.word	0x200004c0
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <Get_Time_Date>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Get_Time_Date */
void Get_Time_Date(void *argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Lire l'heure depuis le RTC (format BCD)
	  HAL_RTC_GetTime(&hrtc, &ActualTime, RTC_FORMAT_BCD);
 8000d44:	2201      	movs	r2, #1
 8000d46:	4919      	ldr	r1, [pc, #100]	@ (8000dac <Get_Time_Date+0x70>)
 8000d48:	4819      	ldr	r0, [pc, #100]	@ (8000db0 <Get_Time_Date+0x74>)
 8000d4a:	f002 fe46 	bl	80039da <HAL_RTC_GetTime>
	  // Lire la date depuis le RTC
	  HAL_RTC_GetDate(&hrtc, &ActualDate, RTC_FORMAT_BCD);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4918      	ldr	r1, [pc, #96]	@ (8000db4 <Get_Time_Date+0x78>)
 8000d52:	4817      	ldr	r0, [pc, #92]	@ (8000db0 <Get_Time_Date+0x74>)
 8000d54:	f002 ff23 	bl	8003b9e <HAL_RTC_GetDate>
	  // Stocker les données temporelles dans la structure utilisateur
	  RTC_data.Hours = ActualTime.Hours;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <Get_Time_Date+0x70>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d5e:	701a      	strb	r2, [r3, #0]
	  RTC_data.Minutes = ActualTime.Minutes;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <Get_Time_Date+0x70>)
 8000d62:	785a      	ldrb	r2, [r3, #1]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d66:	705a      	strb	r2, [r3, #1]
	  RTC_data.Seconds = ActualTime.Seconds;
 8000d68:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <Get_Time_Date+0x70>)
 8000d6a:	789a      	ldrb	r2, [r3, #2]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d6e:	709a      	strb	r2, [r3, #2]
	  RTC_data.Date = ActualDate.Date;
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <Get_Time_Date+0x78>)
 8000d72:	789a      	ldrb	r2, [r3, #2]
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d76:	711a      	strb	r2, [r3, #4]
	  RTC_data.Month = ActualDate.Month;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <Get_Time_Date+0x78>)
 8000d7a:	785a      	ldrb	r2, [r3, #1]
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d7e:	70da      	strb	r2, [r3, #3]
	  RTC_data.Year = ActualDate.Year;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <Get_Time_Date+0x78>)
 8000d82:	78da      	ldrb	r2, [r3, #3]
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d86:	715a      	strb	r2, [r3, #5]
	  // Envoyer les données RTC à la file de messages pour traitement dans une autre tâche
	  if(osMessageQueuePut(RTC_QueueHandle, &RTC_data, NULL, osWaitForever)!=osOK)
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <Get_Time_Date+0x80>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	2200      	movs	r2, #0
 8000d92:	4909      	ldr	r1, [pc, #36]	@ (8000db8 <Get_Time_Date+0x7c>)
 8000d94:	f008 fcba 	bl	800970c <osMessageQueuePut>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <Get_Time_Date+0x66>
      {
		 Error_Handler();
 8000d9e:	f000 f933 	bl	8001008 <Error_Handler>
	  }
    osDelay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f008 fb04 	bl	80093b0 <osDelay>
	  HAL_RTC_GetTime(&hrtc, &ActualTime, RTC_FORMAT_BCD);
 8000da8:	e7cc      	b.n	8000d44 <Get_Time_Date+0x8>
 8000daa:	bf00      	nop
 8000dac:	200006f0 	.word	0x200006f0
 8000db0:	200000fc 	.word	0x200000fc
 8000db4:	20000704 	.word	0x20000704
 8000db8:	20000708 	.word	0x20000708
 8000dbc:	20000278 	.word	0x20000278

08000dc0 <Encrypt_DATA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Encrypt_DATA */
void Encrypt_DATA(void *argument)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	b08d      	sub	sp, #52	@ 0x34
 8000dc4:	af06      	add	r7, sp, #24
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Encrypt_DATA */

	// Activer l'horloge du module CRC utilisé par la librairie de chiffrement
	  __CRC_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <Encrypt_DATA+0x154>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a50      	ldr	r2, [pc, #320]	@ (8000f14 <Encrypt_DATA+0x154>)
 8000dd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <Encrypt_DATA+0x154>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
	  // Configuration du contexte AES
	  AESctx.mFlags = E_SK_DEFAULT;
 8000de4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	711a      	strb	r2, [r3, #4]
	  AESctx.mKeySize = 24;
 8000dea:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000dec:	2218      	movs	r2, #24
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
	  AESctx.mIvSize = sizeof(IV);
 8000df0:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000df2:	2210      	movs	r2, #16
 8000df4:	611a      	str	r2, [r3, #16]
	  uint16_t year = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	82fb      	strh	r3, [r7, #22]
	  uint32_t data_length =0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  // Récupérer les données RTC depuis la queue
	  if(osMessageQueueGet(RTC_QueueHandle, &RTC_data_received, NULL, osWaitForever)!=osOK)
 8000dfe:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <Encrypt_DATA+0x15c>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2200      	movs	r2, #0
 8000e08:	4945      	ldr	r1, [pc, #276]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e0a:	f008 fcdf 	bl	80097cc <osMessageQueueGet>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <Encrypt_DATA+0x58>
	  {
		 Error_Handler();
 8000e14:	f000 f8f8 	bl	8001008 <Error_Handler>
	  }
	  // Récupérer la valeur ADC depuis la queue
	  if(osMessageQueueGet(ADC_QueueHandle, &ADC_VAL_GET, NULL, osWaitForever)!=osOK)
 8000e18:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <Encrypt_DATA+0x164>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2200      	movs	r2, #0
 8000e22:	4941      	ldr	r1, [pc, #260]	@ (8000f28 <Encrypt_DATA+0x168>)
 8000e24:	f008 fcd2 	bl	80097cc <osMessageQueueGet>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <Encrypt_DATA+0x72>
	  {
		 Error_Handler();
 8000e2e:	f000 f8eb 	bl	8001008 <Error_Handler>
	  }
	  // Convertir l'année BCD (exemple : 0x24 → 2024)
	  year = 2000+RTC_data_received.Year;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e3a:	82fb      	strh	r3, [r7, #22]
	  // Formater les données en chaîne lisible : Date, Heure, valeur ADC
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
			   RTC_data_received.Date,
 8000e3c:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e3e:	791b      	ldrb	r3, [r3, #4]
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
 8000e40:	461e      	mov	r6, r3
	           RTC_data_received.Month,
 8000e42:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
 8000e46:	4619      	mov	r1, r3
 8000e48:	8afb      	ldrh	r3, [r7, #22]
			   year,
	           RTC_data_received.Hours,
 8000e4a:	4a35      	ldr	r2, [pc, #212]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e4c:	7812      	ldrb	r2, [r2, #0]
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
 8000e4e:	4610      	mov	r0, r2
	           RTC_data_received.Minutes,
 8000e50:	4a33      	ldr	r2, [pc, #204]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e52:	7852      	ldrb	r2, [r2, #1]
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
 8000e54:	4614      	mov	r4, r2
	           RTC_data_received.Seconds,
 8000e56:	4a32      	ldr	r2, [pc, #200]	@ (8000f20 <Encrypt_DATA+0x160>)
 8000e58:	7892      	ldrb	r2, [r2, #2]
	  snprintf(data, sizeof(data), "%02d-%02d-%04d %02d:%02d:%02d, ADC_VAL=%04d",
 8000e5a:	4615      	mov	r5, r2
 8000e5c:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <Encrypt_DATA+0x168>)
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	9205      	str	r2, [sp, #20]
 8000e62:	9504      	str	r5, [sp, #16]
 8000e64:	9403      	str	r4, [sp, #12]
 8000e66:	9002      	str	r0, [sp, #8]
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	9100      	str	r1, [sp, #0]
 8000e6c:	4633      	mov	r3, r6
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f2c <Encrypt_DATA+0x16c>)
 8000e70:	2128      	movs	r1, #40	@ 0x28
 8000e72:	482f      	ldr	r0, [pc, #188]	@ (8000f30 <Encrypt_DATA+0x170>)
 8000e74:	f00d f8c4 	bl	800e000 <sniprintf>
	           ADC_VAL_GET);
	      data_length = strlen(data);
 8000e78:	482d      	ldr	r0, [pc, #180]	@ (8000f30 <Encrypt_DATA+0x170>)
 8000e7a:	f7ff f9a9 	bl	80001d0 <strlen>
 8000e7e:	6138      	str	r0, [r7, #16]
	      // Initialiser le chiffrement AES CBC
	      if(AES_CBC_Encrypt_Init(&AESctx, Key, IV)!=AES_SUCCESS)
 8000e80:	4a2c      	ldr	r2, [pc, #176]	@ (8000f34 <Encrypt_DATA+0x174>)
 8000e82:	492d      	ldr	r1, [pc, #180]	@ (8000f38 <Encrypt_DATA+0x178>)
 8000e84:	4824      	ldr	r0, [pc, #144]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000e86:	f00c faad 	bl	800d3e4 <AES_CBC_Encrypt_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <Encrypt_DATA+0xd4>
	  	  {
	  		  Error_Handler();
 8000e90:	f000 f8ba 	bl	8001008 <Error_Handler>
	  	  }
	      // Chiffrer le message
	  	  if(AES_CBC_Encrypt_Append(&AESctx, data, data_length, OutputEncMessage, &output_enc_length)!=AES_SUCCESS)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <Encrypt_DATA+0x17c>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <Encrypt_DATA+0x180>)
 8000e9c:	4924      	ldr	r1, [pc, #144]	@ (8000f30 <Encrypt_DATA+0x170>)
 8000e9e:	481e      	ldr	r0, [pc, #120]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000ea0:	f00c fb06 	bl	800d4b0 <AES_CBC_Encrypt_Append>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <Encrypt_DATA+0xee>
	  	  {
	  		  Error_Handler();
 8000eaa:	f000 f8ad 	bl	8001008 <Error_Handler>
	  	  }
	  	  // Finaliser l’opération (gestion du padding)
	  	  OutputMessageLength = output_enc_length;
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <Encrypt_DATA+0x17c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <Encrypt_DATA+0x184>)
 8000eb6:	601a      	str	r2, [r3, #0]
	  	  if(AES_CBC_Encrypt_Finish(&AESctx, OutputEncMessage + output_enc_length, &output_enc_length)!=AES_SUCCESS)
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <Encrypt_DATA+0x17c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <Encrypt_DATA+0x180>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <Encrypt_DATA+0x17c>)
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <Encrypt_DATA+0x158>)
 8000ec8:	f00c fce4 	bl	800d894 <AES_CBC_Encrypt_Finish>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <Encrypt_DATA+0x116>
	  	  {
	  		  Error_Handler();
 8000ed2:	f000 f899 	bl	8001008 <Error_Handler>
	  	  }
	  	  OutputMessageLength += output_enc_length;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <Encrypt_DATA+0x184>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <Encrypt_DATA+0x17c>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a18      	ldr	r2, [pc, #96]	@ (8000f44 <Encrypt_DATA+0x184>)
 8000ee2:	6013      	str	r3, [r2, #0]
	  	  EncodeHex(OutputEncMessage, OutputMessageLength, EncodedHexbuff);
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <Encrypt_DATA+0x184>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <Encrypt_DATA+0x188>)
 8000eea:	4619      	mov	r1, r3
 8000eec:	4814      	ldr	r0, [pc, #80]	@ (8000f40 <Encrypt_DATA+0x180>)
 8000eee:	f7ff fb5d 	bl	80005ac <EncodeHex>
	  	  // Envoyer le message chiffré à la file Encrypt_DATAQueue
	  	  if(osMessageQueuePut(Encrypt_DATAQueueHandle, &EncodedHexbuff, NULL, osWaitForever)!=osOK)
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <Encrypt_DATA+0x18c>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2200      	movs	r2, #0
 8000efc:	4912      	ldr	r1, [pc, #72]	@ (8000f48 <Encrypt_DATA+0x188>)
 8000efe:	f008 fc05 	bl	800970c <osMessageQueuePut>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <Encrypt_DATA+0x14c>
	  	  {
	  		 Error_Handler();
 8000f08:	f000 f87e 	bl	8001008 <Error_Handler>
	  	  }

    osDelay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f008 fa4f 	bl	80093b0 <osDelay>
	  if(osMessageQueueGet(RTC_QueueHandle, &RTC_data_received, NULL, osWaitForever)!=osOK)
 8000f12:	e774      	b.n	8000dfe <Encrypt_DATA+0x3e>
 8000f14:	40023800 	.word	0x40023800
 8000f18:	20000718 	.word	0x20000718
 8000f1c:	20000278 	.word	0x20000278
 8000f20:	20000710 	.word	0x20000710
 8000f24:	2000027c 	.word	0x2000027c
 8000f28:	2000028a 	.word	0x2000028a
 8000f2c:	0800e9dc 	.word	0x0800e9dc
 8000f30:	2000088c 	.word	0x2000088c
 8000f34:	20000018 	.word	0x20000018
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000830 	.word	0x20000830
 8000f40:	20000838 	.word	0x20000838
 8000f44:	20000888 	.word	0x20000888
 8000f48:	200008b4 	.word	0x200008b4
 8000f4c:	20000280 	.word	0x20000280

08000f50 <Decrypt_DATA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Decrypt_DATA */
void Decrypt_DATA(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Decrypt_DATA */
  /* Infinite loop */
  for(;;)
  {
	      //Initialiser le contexte de déchiffrement AES-CBC
	      if(AES_CBC_Decrypt_Init(&AESctx, Key, IV)!=AES_SUCCESS)
 8000f58:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <Decrypt_DATA+0x78>)
 8000f5a:	491c      	ldr	r1, [pc, #112]	@ (8000fcc <Decrypt_DATA+0x7c>)
 8000f5c:	481c      	ldr	r0, [pc, #112]	@ (8000fd0 <Decrypt_DATA+0x80>)
 8000f5e:	f00c fca7 	bl	800d8b0 <AES_CBC_Decrypt_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <Decrypt_DATA+0x1c>
	       {
	     	  Error_Handler();
 8000f68:	f000 f84e 	bl	8001008 <Error_Handler>
	       }
	      // Déchiffrer les données chiffrées (OutputEncMessage)
	 	  if(AES_CBC_Decrypt_Append(&AESctx, OutputEncMessage, OutputMessageLength, OutputDecMessage, &output_dec_length)!=AES_SUCCESS)
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <Decrypt_DATA+0x84>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <Decrypt_DATA+0x88>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <Decrypt_DATA+0x8c>)
 8000f78:	4919      	ldr	r1, [pc, #100]	@ (8000fe0 <Decrypt_DATA+0x90>)
 8000f7a:	4815      	ldr	r0, [pc, #84]	@ (8000fd0 <Decrypt_DATA+0x80>)
 8000f7c:	f00c fce6 	bl	800d94c <AES_CBC_Decrypt_Append>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <Decrypt_DATA+0x3a>
	 	  {
	 	      Error_Handler();
 8000f86:	f000 f83f 	bl	8001008 <Error_Handler>
	 	  }
	 	  // Mettre à jour la longueur partielle du message déchiffré
	 	  OutputMessageLength = output_dec_length;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <Decrypt_DATA+0x88>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <Decrypt_DATA+0x84>)
 8000f92:	601a      	str	r2, [r3, #0]
	 	  // Finaliser le déchiffrement pour gérer le padding éventuel
	 	  if(AES_CBC_Decrypt_Finish(&AESctx, OutputDecMessage + output_dec_length, &output_dec_length)!=AES_SUCCESS)
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <Decrypt_DATA+0x88>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <Decrypt_DATA+0x8c>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <Decrypt_DATA+0x88>)
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <Decrypt_DATA+0x80>)
 8000fa4:	f00c ff60 	bl	800de68 <AES_CBC_Decrypt_Finish>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <Decrypt_DATA+0x62>
	      {
	     	 Error_Handler();
 8000fae:	f000 f82b 	bl	8001008 <Error_Handler>
	      }
	 	  OutputMessageLength += output_dec_length;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <Decrypt_DATA+0x84>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <Decrypt_DATA+0x88>)
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <Decrypt_DATA+0x84>)
 8000fbe:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f008 f9f5 	bl	80093b0 <osDelay>
	      if(AES_CBC_Decrypt_Init(&AESctx, Key, IV)!=AES_SUCCESS)
 8000fc6:	e7c7      	b.n	8000f58 <Decrypt_DATA+0x8>
 8000fc8:	20000018 	.word	0x20000018
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000718 	.word	0x20000718
 8000fd4:	20000888 	.word	0x20000888
 8000fd8:	20000834 	.word	0x20000834
 8000fdc:	20000860 	.word	0x20000860
 8000fe0:	20000838 	.word	0x20000838

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ff6:	f000 fb1b 	bl	8001630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40001000 	.word	0x40001000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001016:	4802      	ldr	r0, [pc, #8]	@ (8001020 <Error_Handler+0x18>)
 8001018:	f001 fdb4 	bl	8002b84 <HAL_GPIO_WritePin>
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <Error_Handler+0x14>
 8001020:	40020c00 	.word	0x40020c00

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_MspInit+0x54>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <HAL_MspInit+0x54>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001038:	6453      	str	r3, [r2, #68]	@ 0x44
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_MspInit+0x54>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_MspInit+0x54>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_MspInit+0x54>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_MspInit+0x54>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f001 f801 	bl	8002070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_ADC_MspInit+0x7c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d127      	bne.n	80010ee <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_ADC_MspInit+0x80>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <HAL_ADC_MspInit+0x84>)
 80010ea:	f001 fb97 	bl	800281c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40012000 	.word	0x40012000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <HAL_RNG_MspInit+0x3c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10d      	bne.n	8001132 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_RNG_MspInit+0x40>)
 800111c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_RNG_MspInit+0x40>)
 8001120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001124:	6353      	str	r3, [r2, #52]	@ 0x34
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_RNG_MspInit+0x40>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	50060800 	.word	0x50060800
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0c      	ldr	r2, [pc, #48]	@ (8001194 <HAL_RTC_MspInit+0x4c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d111      	bne.n	800118c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800116c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001170:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fa06 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001182:	f7ff ff41 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_RTC_MspInit+0x50>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40002800 	.word	0x40002800
 8001198:	42470e3c 	.word	0x42470e3c

0800119c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a68      	ldr	r2, [pc, #416]	@ (800135c <HAL_SD_MspInit+0x1c0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f040 80c9 	bne.w	8001352 <HAL_SD_MspInit+0x1b6>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b66      	ldr	r3, [pc, #408]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	4a65      	ldr	r2, [pc, #404]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d0:	4b63      	ldr	r3, [pc, #396]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b58      	ldr	r3, [pc, #352]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	4a57      	ldr	r2, [pc, #348]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6313      	str	r3, [r2, #48]	@ 0x30
 8001208:	4b55      	ldr	r3, [pc, #340]	@ (8001360 <HAL_SD_MspInit+0x1c4>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001214:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001226:	230c      	movs	r3, #12
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	484c      	ldr	r0, [pc, #304]	@ (8001364 <HAL_SD_MspInit+0x1c8>)
 8001232:	f001 faf3 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001246:	230c      	movs	r3, #12
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4845      	ldr	r0, [pc, #276]	@ (8001368 <HAL_SD_MspInit+0x1cc>)
 8001252:	f001 fae3 	bl	800281c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001258:	4a45      	ldr	r2, [pc, #276]	@ (8001370 <HAL_SD_MspInit+0x1d4>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800125c:	4b43      	ldr	r3, [pc, #268]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001262:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b41      	ldr	r3, [pc, #260]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b40      	ldr	r3, [pc, #256]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001278:	4b3c      	ldr	r3, [pc, #240]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 800127a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800127e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001280:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001286:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001288:	4b38      	ldr	r3, [pc, #224]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 800128a:	2220      	movs	r2, #32
 800128c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001294:	4b35      	ldr	r3, [pc, #212]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 8001296:	2204      	movs	r2, #4
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800129a:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 800129c:	2203      	movs	r2, #3
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 80012a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 80012aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80012b0:	482e      	ldr	r0, [pc, #184]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 80012b2:	f000 ff15 	bl	80020e0 <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80012bc:	f7ff fea4 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a2a      	ldr	r2, [pc, #168]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c6:	4a29      	ldr	r2, [pc, #164]	@ (800136c <HAL_SD_MspInit+0x1d0>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001378 <HAL_SD_MspInit+0x1dc>)
 80012d0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 80012f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001300:	2220      	movs	r2, #32
 8001302:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 800130c:	2204      	movs	r2, #4
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001312:	2203      	movs	r2, #3
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001318:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001320:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001324:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001326:	4813      	ldr	r0, [pc, #76]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 8001328:	f000 feda 	bl	80020e0 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001332:	f7ff fe69 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <HAL_SD_MspInit+0x1d8>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	2031      	movs	r0, #49	@ 0x31
 8001348:	f000 fe92 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800134c:	2031      	movs	r0, #49	@ 0x31
 800134e:	f000 feab 	bl	80020a8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	200001a0 	.word	0x200001a0
 8001370:	40026458 	.word	0x40026458
 8001374:	20000200 	.word	0x20000200
 8001378:	400264a0 	.word	0x400264a0

0800137c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	@ 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	4b33      	ldr	r3, [pc, #204]	@ (8001460 <HAL_InitTick+0xe4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a32      	ldr	r2, [pc, #200]	@ (8001460 <HAL_InitTick+0xe4>)
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
 800139c:	4b30      	ldr	r3, [pc, #192]	@ (8001460 <HAL_InitTick+0xe4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f8b6 	bl	8003524 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013c2:	f002 f89b 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 80013c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80013c8:	e004      	b.n	80013d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ca:	f002 f897 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 80013ce:	4603      	mov	r3, r0
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d6:	4a23      	ldr	r2, [pc, #140]	@ (8001464 <HAL_InitTick+0xe8>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9b      	lsrs	r3, r3, #18
 80013de:	3b01      	subs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_InitTick+0xec>)
 80013e4:	4a21      	ldr	r2, [pc, #132]	@ (800146c <HAL_InitTick+0xf0>)
 80013e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <HAL_InitTick+0xec>)
 80013ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_InitTick+0xec>)
 80013f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_InitTick+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_InitTick+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_InitTick+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001408:	4817      	ldr	r0, [pc, #92]	@ (8001468 <HAL_InitTick+0xec>)
 800140a:	f003 fe05 	bl	8005018 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11b      	bne.n	8001454 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800141c:	4812      	ldr	r0, [pc, #72]	@ (8001468 <HAL_InitTick+0xec>)
 800141e:	f003 fe55 	bl	80050cc <HAL_TIM_Base_Start_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800142c:	2b00      	cmp	r3, #0
 800142e:	d111      	bne.n	8001454 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001430:	2036      	movs	r0, #54	@ 0x36
 8001432:	f000 fe39 	bl	80020a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d808      	bhi.n	800144e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2036      	movs	r0, #54	@ 0x36
 8001442:	f000 fe15 	bl	8002070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <HAL_InitTick+0xf4>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e002      	b.n	8001454 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001458:	4618      	mov	r0, r3
 800145a:	3738      	adds	r7, #56	@ 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	431bde83 	.word	0x431bde83
 8001468:	200009b0 	.word	0x200009b0
 800146c:	40001000 	.word	0x40001000
 8001470:	2000002c 	.word	0x2000002c

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f001 fb9c 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <SDIO_IRQHandler+0x10>)
 80014be:	f002 fef3 	bl	80042a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000011c 	.word	0x2000011c

080014cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <TIM6_DAC_IRQHandler+0x10>)
 80014d2:	f003 fe6b 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200009b0 	.word	0x200009b0

080014e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2_Stream3_IRQHandler+0x10>)
 80014e6:	f000 ff23 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001a0 	.word	0x200001a0

080014f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA2_Stream6_IRQHandler+0x10>)
 80014fa:	f000 ff19 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000200 	.word	0x20000200

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f00c fe4a 	bl	800e1d0 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20020000 	.word	0x20020000
 8001568:	00000400 	.word	0x00000400
 800156c:	200009f8 	.word	0x200009f8
 8001570:	20005578 	.word	0x20005578

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800159c:	f7ff ffea 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	@ (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	@ (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f00c fe09 	bl	800e1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff f839 	bl	8000640 <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80015dc:	0800fa78 	.word	0x0800fa78
  ldr r2, =_sbss
 80015e0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80015e4:	20005574 	.word	0x20005574

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	@ (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fd20 	bl	800205a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f7ff feae 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fd00 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000030 	.word	0x20000030
 8001654:	200009fc 	.word	0x200009fc

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200009fc 	.word	0x200009fc

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000030 	.word	0x20000030

080016b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e033      	b.n	8001736 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fcd0 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016fe:	f023 0302 	bic.w	r3, r3, #2
 8001702:	f043 0202 	orr.w	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fad8 	bl	8001cc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	@ 0x40
 8001726:	e001      	b.n	800172c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_ADC_Start+0x1a>
 8001756:	2302      	movs	r3, #2
 8001758:	e0b2      	b.n	80018c0 <HAL_ADC_Start+0x180>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d018      	beq.n	80017a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001780:	4b52      	ldr	r3, [pc, #328]	@ (80018cc <HAL_ADC_Start+0x18c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_ADC_Start+0x190>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9a      	lsrs	r2, r3, #18
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d17a      	bne.n	80018a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ee:	d106      	bne.n	80017fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f023 0206 	bic.w	r2, r3, #6
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80017fc:	e002      	b.n	8001804 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180c:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_ADC_Start+0x194>)
 800180e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001818:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2b00      	cmp	r3, #0
 8001824:	d12a      	bne.n	800187c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2b      	ldr	r2, [pc, #172]	@ (80018d8 <HAL_ADC_Start+0x198>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d015      	beq.n	800185c <HAL_ADC_Start+0x11c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_ADC_Start+0x19c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d105      	bne.n	8001846 <HAL_ADC_Start+0x106>
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <HAL_ADC_Start+0x194>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a25      	ldr	r2, [pc, #148]	@ (80018e0 <HAL_ADC_Start+0x1a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d136      	bne.n	80018be <HAL_ADC_Start+0x17e>
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_ADC_Start+0x194>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d130      	bne.n	80018be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d129      	bne.n	80018be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	e020      	b.n	80018be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a15      	ldr	r2, [pc, #84]	@ (80018d8 <HAL_ADC_Start+0x198>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11b      	bne.n	80018be <HAL_ADC_Start+0x17e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d114      	bne.n	80018be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e00b      	b.n	80018be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000028 	.word	0x20000028
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	40012300 	.word	0x40012300
 80018d8:	40012000 	.word	0x40012000
 80018dc:	40012100 	.word	0x40012100
 80018e0:	40012200 	.word	0x40012200

080018e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Stop+0x16>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e021      	b.n	800193e <HAL_ADC_Stop+0x5a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001966:	d113      	bne.n	8001990 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001976:	d10b      	bne.n	8001990 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	f043 0220 	orr.w	r2, r3, #32
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e063      	b.n	8001a58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001990:	f7ff fe62 	bl	8001658 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001996:	e021      	b.n	80019dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199e:	d01d      	beq.n	80019dc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x6c>
 80019a6:	f7ff fe57 	bl	8001658 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d212      	bcs.n	80019dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d00b      	beq.n	80019dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e03d      	b.n	8001a58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d1d6      	bne.n	8001998 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0212 	mvn.w	r2, #18
 80019f2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d123      	bne.n	8001a56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11f      	bne.n	8001a56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1c>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e105      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x228>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d925      	bls.n	8001af4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	3b1e      	subs	r3, #30
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	400a      	ands	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68d9      	ldr	r1, [r3, #12]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4403      	add	r3, r0
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	e022      	b.n	8001b3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	2207      	movs	r2, #7
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4403      	add	r3, r0
 8001b30:	409a      	lsls	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d824      	bhi.n	8001b8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b05      	subs	r3, #5
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b05      	subs	r3, #5
 8001b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8a:	e04c      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d824      	bhi.n	8001bde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b23      	subs	r3, #35	@ 0x23
 8001ba6:	221f      	movs	r2, #31
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43da      	mvns	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b23      	subs	r3, #35	@ 0x23
 8001bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bdc:	e023      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	3b41      	subs	r3, #65	@ 0x41
 8001bf0:	221f      	movs	r2, #31
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b41      	subs	r3, #65	@ 0x41
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <HAL_ADC_ConfigChannel+0x234>)
 8001c28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a21      	ldr	r2, [pc, #132]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x238>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d109      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1cc>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x238>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d123      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x21e>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_ConfigChannel+0x1e6>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b11      	cmp	r3, #17
 8001c60:	d11b      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d111      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x23c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <HAL_ADC_ConfigChannel+0x240>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	0c9a      	lsrs	r2, r3, #18
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f9      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	20000028 	.word	0x20000028
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc8:	4b79      	ldr	r3, [pc, #484]	@ (8001eb0 <ADC_Init+0x1f0>)
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	4a58      	ldr	r2, [pc, #352]	@ (8001eb4 <ADC_Init+0x1f4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d022      	beq.n	8001d9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e00f      	b.n	8001dbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0202 	bic.w	r2, r2, #2
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6899      	ldr	r1, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	005a      	lsls	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01b      	beq.n	8001e24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dfa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	3b01      	subs	r3, #1
 8001e18:	035a      	lsls	r2, r3, #13
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	e007      	b.n	8001e34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	051a      	lsls	r2, r3, #20
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e76:	025a      	lsls	r2, r3, #9
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	029a      	lsls	r2, r3, #10
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	0f000001 	.word	0x0f000001

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	@ (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db12      	blt.n	8001f90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	490a      	ldr	r1, [pc, #40]	@ (8001f9c <__NVIC_DisableIRQ+0x44>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	3320      	adds	r3, #32
 8001f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f84:	f3bf 8f4f 	dsb	sy
}
 8001f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f8a:	f3bf 8f6f 	isb	sy
}
 8001f8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	@ (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	@ 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	@ 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff28 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002082:	f7ff ff3d 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002086:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	6978      	ldr	r0, [r7, #20]
 800208e:	f7ff ffb1 	bl	8001ff4 <NVIC_EncodePriority>
 8002092:	4602      	mov	r2, r0
 8002094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff80 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff30 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff40 	bl	8001f58 <__NVIC_DisableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff fab4 	bl	8001658 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e099      	b.n	8002230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	e00f      	b.n	800213e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211e:	f7ff fa9b 	bl	8001658 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b05      	cmp	r3, #5
 800212a:	d908      	bls.n	800213e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e078      	b.n	8002230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e8      	bne.n	800211e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <HAL_DMA_Init+0x158>)
 8002158:	4013      	ands	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	2b04      	cmp	r3, #4
 8002196:	d107      	bne.n	80021a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4313      	orrs	r3, r2
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0307 	bic.w	r3, r3, #7
 80021be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d117      	bne.n	8002202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa9d 	bl	8002724 <DMA_CheckFifoParam>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021fe:	2301      	movs	r3, #1
 8002200:	e016      	b.n	8002230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa54 	bl	80026b8 <DMA_CalcBaseAndBitshift>
 8002210:	4603      	mov	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	223f      	movs	r2, #63	@ 0x3f
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	f010803f 	.word	0xf010803f

0800223c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Start_IT+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e040      	b.n	80022e4 <HAL_DMA_Start_IT+0xa8>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12f      	bne.n	80022d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f9e6 	bl	800265c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	223f      	movs	r2, #63	@ 0x3f
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0216 	orr.w	r2, r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e005      	b.n	80022e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00c      	b.n	8002324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800233c:	4b8e      	ldr	r3, [pc, #568]	@ (8002578 <HAL_DMA_IRQHandler+0x248>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a8e      	ldr	r2, [pc, #568]	@ (800257c <HAL_DMA_IRQHandler+0x24c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	2208      	movs	r2, #8
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01a      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	2208      	movs	r2, #8
 800238a:	409a      	lsls	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	f043 0202 	orr.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2204      	movs	r2, #4
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2210      	movs	r2, #16
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d043      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03c      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	2210      	movs	r2, #16
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d018      	beq.n	8002472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
 800245e:	e01f      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e016      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	2220      	movs	r2, #32
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 808f 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8087 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	2220      	movs	r2, #32
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d136      	bne.n	8002548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0216 	bic.w	r2, r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_DMA_IRQHandler+0x1da>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0208 	bic.w	r2, r2, #8
 8002518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	223f      	movs	r2, #63	@ 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07e      	beq.n	800263c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
        }
        return;
 8002546:	e079      	b.n	800263c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	2b00      	cmp	r3, #0
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e02c      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
 8002576:	bf00      	nop
 8002578:	20000028 	.word	0x20000028
 800257c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e01e      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d032      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d022      	beq.n	800262a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3301      	adds	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d307      	bcc.n	8002618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f2      	bne.n	80025fc <HAL_DMA_IRQHandler+0x2cc>
 8002616:	e000      	b.n	800261a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x30e>
        return;
 800263c:	bf00      	nop
    }
  }
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b40      	cmp	r3, #64	@ 0x40
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b10      	subs	r3, #16
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <DMA_CalcBaseAndBitshift+0x64>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d2:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <DMA_CalcBaseAndBitshift+0x68>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d909      	bls.n	80026fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026f8:	e007      	b.n	800270a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	0800ebb0 	.word	0x0800ebb0

08002724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d856      	bhi.n	80027f2 <DMA_CheckFifoParam+0xce>
 8002744:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <DMA_CheckFifoParam+0x28>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	0800276f 	.word	0x0800276f
 8002754:	0800275d 	.word	0x0800275d
 8002758:	080027f3 	.word	0x080027f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e043      	b.n	80027f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002776:	d140      	bne.n	80027fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e03d      	b.n	80027fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002786:	d121      	bne.n	80027cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d837      	bhi.n	80027fe <DMA_CheckFifoParam+0xda>
 800278e:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <DMA_CheckFifoParam+0x70>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027ab 	.word	0x080027ab
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	080027bd 	.word	0x080027bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e030      	b.n	800280c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e022      	b.n	8002802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ca:	e01c      	b.n	8002806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d903      	bls.n	80027da <DMA_CheckFifoParam+0xb6>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d003      	beq.n	80027e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d8:	e018      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      break;
 80027de:	e015      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e00b      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f2:	bf00      	nop
 80027f4:	e00a      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e008      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e006      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e004      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;   
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
    }
  } 
  
  return status; 
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b60      	ldr	r3, [pc, #384]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5b      	ldr	r2, [pc, #364]	@ (8002b2c <HAL_GPIO_Init+0x310>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	@ (8002b34 <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002b3c <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	@ (8002b40 <HAL_GPIO_Init+0x324>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b44 <HAL_GPIO_Init+0x328>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b4c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <HAL_GPIO_Init+0x310>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	@ 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e001      	b.n	8002b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bc8:	887a      	ldrh	r2, [r7, #2]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	041a      	lsls	r2, r3, #16
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcf6 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013c00 	.word	0x40013c00

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e267      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d075      	beq.n	8002d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c3a:	4b88      	ldr	r3, [pc, #544]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d00c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d112      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c52:	4b82      	ldr	r3, [pc, #520]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	4b7e      	ldr	r3, [pc, #504]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05b      	beq.n	8002d24 <HAL_RCC_OscConfig+0x108>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d157      	bne.n	8002d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e242      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x74>
 8002c82:	4b76      	ldr	r3, [pc, #472]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e01d      	b.n	8002ccc <HAL_RCC_OscConfig+0xb0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x98>
 8002c9a:	4b70      	ldr	r3, [pc, #448]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6c      	ldr	r2, [pc, #432]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0xb0>
 8002cb4:	4b69      	ldr	r3, [pc, #420]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a68      	ldr	r2, [pc, #416]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b66      	ldr	r3, [pc, #408]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a65      	ldr	r2, [pc, #404]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fcc0 	bl	8001658 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fcbc 	bl	8001658 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e207      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b5b      	ldr	r3, [pc, #364]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0xc0>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fcac 	bl	8001658 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fca8 	bl	8001658 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1f3      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	4b51      	ldr	r3, [pc, #324]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0xe8>
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d32:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d11c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b44      	ldr	r3, [pc, #272]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d116      	bne.n	8002d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_RCC_OscConfig+0x152>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e1c7      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4937      	ldr	r1, [pc, #220]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	e03a      	b.n	8002dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8c:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCC_OscConfig+0x244>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fc61 	bl	8001658 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fc5d 	bl	8001658 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1a8      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4925      	ldr	r1, [pc, #148]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dce:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <HAL_RCC_OscConfig+0x244>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fc40 	bl	8001658 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fc3c 	bl	8001658 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e187      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d036      	beq.n	8002e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_RCC_OscConfig+0x248>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe fc20 	bl	8001658 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fc1c 	bl	8001658 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e167      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_OscConfig+0x240>)
 8002e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x200>
 8002e3a:	e01b      	b.n	8002e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3c:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_RCC_OscConfig+0x248>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fc09 	bl	8001658 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	e00e      	b.n	8002e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fc05 	bl	8001658 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d907      	bls.n	8002e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e150      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b88      	ldr	r3, [pc, #544]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ea      	bne.n	8002e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8097 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4b81      	ldr	r3, [pc, #516]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	4b7d      	ldr	r3, [pc, #500]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b77      	ldr	r3, [pc, #476]	@ (8003090 <HAL_RCC_OscConfig+0x474>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b74      	ldr	r3, [pc, #464]	@ (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a73      	ldr	r2, [pc, #460]	@ (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fbc5 	bl	8001658 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fe fbc1 	bl	8001658 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e10c      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8003090 <HAL_RCC_OscConfig+0x474>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2ea>
 8002ef8:	4b64      	ldr	r3, [pc, #400]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a63      	ldr	r2, [pc, #396]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x324>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x30c>
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	4a5e      	ldr	r2, [pc, #376]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0x324>
 8002f28:	4b58      	ldr	r3, [pc, #352]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	4a57      	ldr	r2, [pc, #348]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f34:	4b55      	ldr	r3, [pc, #340]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a54      	ldr	r2, [pc, #336]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 0304 	bic.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fb86 	bl	8001658 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe fb82 	bl	8001658 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0cb      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	4b49      	ldr	r3, [pc, #292]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ee      	beq.n	8002f50 <HAL_RCC_OscConfig+0x334>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fe fb70 	bl	8001658 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fb6c 	bl	8001658 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0b5      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	4b3e      	ldr	r3, [pc, #248]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ee      	bne.n	8002f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b39      	ldr	r3, [pc, #228]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	4a38      	ldr	r2, [pc, #224]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a1 	beq.w	80030fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fba:	4b34      	ldr	r3, [pc, #208]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d05c      	beq.n	8003080 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d141      	bne.n	8003052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fce:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <HAL_RCC_OscConfig+0x478>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fb40 	bl	8001658 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe fb3c 	bl	8001658 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e087      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	4b27      	ldr	r3, [pc, #156]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	019b      	lsls	r3, r3, #6
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	491b      	ldr	r1, [pc, #108]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_RCC_OscConfig+0x478>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fb15 	bl	8001658 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fe fb11 	bl	8001658 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e05c      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x416>
 8003050:	e054      	b.n	80030fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <HAL_RCC_OscConfig+0x478>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fafe 	bl	8001658 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe fafa 	bl	8001658 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e045      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <HAL_RCC_OscConfig+0x470>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x444>
 800307e:	e03d      	b.n	80030fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e038      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000
 8003094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCC_OscConfig+0x4ec>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d028      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d121      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11a      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d111      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	3b01      	subs	r3, #1
 80030e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0cc      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b68      	ldr	r3, [pc, #416]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d90c      	bls.n	8003148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b65      	ldr	r3, [pc, #404]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800316a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d044      	beq.n	800322c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d119      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e067      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4934      	ldr	r1, [pc, #208]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fa2c 	bl	8001658 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fa28 	bl	8001658 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e04f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d20c      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b22      	ldr	r3, [pc, #136]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800327e:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f821 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	490a      	ldr	r1, [pc, #40]	@ (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f862 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00
 80032c8:	40023800 	.word	0x40023800
 80032cc:	0800eb98 	.word	0x0800eb98
 80032d0:	20000028 	.word	0x20000028
 80032d4:	2000002c 	.word	0x2000002c

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032dc:	b094      	sub	sp, #80	@ 0x50
 80032de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f0:	4b79      	ldr	r3, [pc, #484]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d00d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x40>
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	f200 80e1 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x34>
 8003306:	2b04      	cmp	r3, #4
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x3a>
 800330a:	e0db      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b73      	ldr	r3, [pc, #460]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x204>)
 800330e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003310:	e0db      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003312:	4b73      	ldr	r3, [pc, #460]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003316:	e0d8      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003320:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003322:	4b6d      	ldr	r3, [pc, #436]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	2200      	movs	r2, #0
 8003336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003338:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
 8003346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	0159      	lsls	r1, r3, #5
 8003358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335c:	0150      	lsls	r0, r2, #5
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4621      	mov	r1, r4
 8003364:	1a51      	subs	r1, r2, r1
 8003366:	6139      	str	r1, [r7, #16]
 8003368:	4629      	mov	r1, r5
 800336a:	eb63 0301 	sbc.w	r3, r3, r1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800337c:	4659      	mov	r1, fp
 800337e:	018b      	lsls	r3, r1, #6
 8003380:	4651      	mov	r1, sl
 8003382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003386:	4651      	mov	r1, sl
 8003388:	018a      	lsls	r2, r1, #6
 800338a:	4651      	mov	r1, sl
 800338c:	ebb2 0801 	subs.w	r8, r2, r1
 8003390:	4659      	mov	r1, fp
 8003392:	eb63 0901 	sbc.w	r9, r3, r1
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	eb18 0303 	adds.w	r3, r8, r3
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	462b      	mov	r3, r5
 80033b8:	eb49 0303 	adc.w	r3, r9, r3
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ca:	4629      	mov	r1, r5
 80033cc:	024b      	lsls	r3, r1, #9
 80033ce:	4621      	mov	r1, r4
 80033d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033d4:	4621      	mov	r1, r4
 80033d6:	024a      	lsls	r2, r1, #9
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033de:	2200      	movs	r2, #0
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033e8:	f7fc ff4a 	bl	8000280 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f4:	e058      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b38      	ldr	r3, [pc, #224]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	2200      	movs	r2, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	4611      	mov	r1, r2
 8003402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
 800340c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	f04f 0000 	mov.w	r0, #0
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	0159      	lsls	r1, r3, #5
 800341e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003422:	0150      	lsls	r0, r2, #5
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4641      	mov	r1, r8
 800342a:	ebb2 0a01 	subs.w	sl, r2, r1
 800342e:	4649      	mov	r1, r9
 8003430:	eb63 0b01 	sbc.w	fp, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003448:	ebb2 040a 	subs.w	r4, r2, sl
 800344c:	eb63 050b 	sbc.w	r5, r3, fp
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	00eb      	lsls	r3, r5, #3
 800345a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800345e:	00e2      	lsls	r2, r4, #3
 8003460:	4614      	mov	r4, r2
 8003462:	461d      	mov	r5, r3
 8003464:	4643      	mov	r3, r8
 8003466:	18e3      	adds	r3, r4, r3
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	464b      	mov	r3, r9
 800346c:	eb45 0303 	adc.w	r3, r5, r3
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800347e:	4629      	mov	r1, r5
 8003480:	028b      	lsls	r3, r1, #10
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003488:	4621      	mov	r1, r4
 800348a:	028a      	lsls	r2, r1, #10
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	61fa      	str	r2, [r7, #28]
 8003498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349c:	f7fc fef0 	bl	8000280 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	3301      	adds	r3, #1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80034b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034c2:	e002      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x204>)
 80034c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3750      	adds	r7, #80	@ 0x50
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000028 	.word	0x20000028

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	0800eba8 	.word	0x0800eba8

08003524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	220f      	movs	r2, #15
 8003532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003534:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003540:	4b0f      	ldr	r3, [pc, #60]	@ (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003566:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <HAL_RCC_GetClockConfig+0x60>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40023c00 	.word	0x40023c00

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d035      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035b0:	4b62      	ldr	r3, [pc, #392]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035b6:	f7fe f84f 	bl	8001658 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035be:	f7fe f84b 	bl	8001658 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0b0      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	019a      	lsls	r2, r3, #6
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	071b      	lsls	r3, r3, #28
 80035e8:	4955      	ldr	r1, [pc, #340]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035f0:	4b52      	ldr	r3, [pc, #328]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035f6:	f7fe f82f 	bl	8001658 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035fe:	f7fe f82b 	bl	8001658 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e090      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003610:	4b4b      	ldr	r3, [pc, #300]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8083 	beq.w	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b44      	ldr	r3, [pc, #272]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	4a43      	ldr	r2, [pc, #268]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	@ 0x40
 800363a:	4b41      	ldr	r3, [pc, #260]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003646:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003650:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003652:	f7fe f801 	bl	8001658 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd fffd 	bl	8001658 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e062      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003678:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003680:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	429a      	cmp	r2, r3
 8003694:	d028      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003696:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a0:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a6:	4b28      	ldr	r3, [pc, #160]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036ac:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036b2:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d114      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036be:	f7fd ffcb 	bl	8001658 <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd ffc7 	bl	8001658 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e02a      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	4b18      	ldr	r3, [pc, #96]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ee      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036f4:	d10d      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370a:	490d      	ldr	r1, [pc, #52]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
 8003710:	e005      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003712:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003718:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003720:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372a:	4905      	ldr	r1, [pc, #20]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	42470068 	.word	0x42470068
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000
 8003748:	42470e40 	.word	0x42470e40

0800374c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e01c      	b.n	8003798 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	795b      	ldrb	r3, [r3, #5]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fcc8 	bl	8001104 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0204 	orr.w	r2, r2, #4
 8003788:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e073      	b.n	800389e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7f5b      	ldrb	r3, [r3, #29]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fcbe 	bl	8001148 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d055      	beq.n	800388c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	22ca      	movs	r2, #202	@ 0xca
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2253      	movs	r2, #83	@ 0x53
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fa49 	bl	8003c88 <RTC_EnterInitMode>
 80037f6:	4603      	mov	r3, r0
 80037f8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d12c      	bne.n	800385a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800380e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003812:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	041a      	lsls	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa50 	bl	8003cf6 <RTC_ExitInitMode>
 8003856:	4603      	mov	r3, r0
 8003858:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d110      	bne.n	8003882 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	22ff      	movs	r2, #255	@ 0xff
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24
 800388a:	e001      	b.n	8003890 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038a6:	b590      	push	{r4, r7, lr}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	7f1b      	ldrb	r3, [r3, #28]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_RTC_SetTime+0x1c>
 80038be:	2302      	movs	r3, #2
 80038c0:	e087      	b.n	80039d2 <HAL_RTC_SetTime+0x12c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d126      	bne.n	8003922 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2200      	movs	r2, #0
 80038e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa27 	bl	8003d40 <RTC_ByteToBcd2>
 80038f2:	4603      	mov	r3, r0
 80038f4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fa20 	bl	8003d40 <RTC_ByteToBcd2>
 8003900:	4603      	mov	r3, r0
 8003902:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003904:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	789b      	ldrb	r3, [r3, #2]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa18 	bl	8003d40 <RTC_ByteToBcd2>
 8003910:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003912:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	78db      	ldrb	r3, [r3, #3]
 800391a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e018      	b.n	8003954 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003942:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003948:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	22ca      	movs	r2, #202	@ 0xca
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2253      	movs	r2, #83	@ 0x53
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f98f 	bl	8003c88 <RTC_EnterInitMode>
 800396a:	4603      	mov	r3, r0
 800396c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d120      	bne.n	80039b6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800397e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003982:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003992:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f9a2 	bl	8003cf6 <RTC_ExitInitMode>
 80039b2:	4603      	mov	r3, r0
 80039b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	22ff      	movs	r2, #255	@ 0xff
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]

  return status;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd90      	pop	{r4, r7, pc}

080039da <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003a0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	0d9b      	lsrs	r3, r3, #22
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11a      	bne.n	8003a8c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f98e 	bl	8003d7c <RTC_Bcd2ToByte>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f985 	bl	8003d7c <RTC_Bcd2ToByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	789b      	ldrb	r3, [r3, #2]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f97c 	bl	8003d7c <RTC_Bcd2ToByte>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a96:	b590      	push	{r4, r7, lr}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	7f1b      	ldrb	r3, [r3, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_RTC_SetDate+0x1c>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e071      	b.n	8003b96 <HAL_RTC_SetDate+0x100>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2202      	movs	r2, #2
 8003abc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10e      	bne.n	8003ae2 <HAL_RTC_SetDate+0x4c>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	330a      	adds	r3, #10
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11c      	bne.n	8003b22 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f927 	bl	8003d40 <RTC_ByteToBcd2>
 8003af2:	4603      	mov	r3, r0
 8003af4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f920 	bl	8003d40 <RTC_ByteToBcd2>
 8003b00:	4603      	mov	r3, r0
 8003b02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	789b      	ldrb	r3, [r3, #2]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f918 	bl	8003d40 <RTC_ByteToBcd2>
 8003b10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e00e      	b.n	8003b40 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	78db      	ldrb	r3, [r3, #3]
 8003b26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b2e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	22ca      	movs	r2, #202	@ 0xca
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2253      	movs	r2, #83	@ 0x53
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f899 	bl	8003c88 <RTC_EnterInitMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10c      	bne.n	8003b7a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b6e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f8c0 	bl	8003cf6 <RTC_ExitInitMode>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	22ff      	movs	r2, #255	@ 0xff
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]

  return status;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}

08003b9e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	0b5b      	lsrs	r3, r3, #13
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11a      	bne.n	8003c32 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f8bb 	bl	8003d7c <RTC_Bcd2ToByte>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f8b2 	bl	8003d7c <RTC_Bcd2ToByte>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	789b      	ldrb	r3, [r3, #2]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f8a9 	bl	8003d7c <RTC_Bcd2ToByte>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c84 <HAL_RTC_WaitForSynchro+0x48>)
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c50:	f7fd fd02 	bl	8001658 <HAL_GetTick>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c56:	e009      	b.n	8003c6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c58:	f7fd fcfe 	bl	8001658 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c66:	d901      	bls.n	8003c6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e007      	b.n	8003c7c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ee      	beq.n	8003c58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00017f5f 	.word	0x00017f5f

08003c88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d122      	bne.n	8003cec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cb6:	f7fd fccf 	bl	8001658 <HAL_GetTick>
 8003cba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cbc:	e00c      	b.n	8003cd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cbe:	f7fd fccb 	bl	8001658 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ccc:	d904      	bls.n	8003cd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <RTC_EnterInitMode+0x64>
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d1e8      	bne.n	8003cbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff8b 	bl	8003c3c <HAL_RTC_WaitForSynchro>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003d4e:	e005      	b.n	8003d5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	3b0a      	subs	r3, #10
 8003d5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d8f6      	bhi.n	8003d50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b2db      	uxtb	r3, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	b2db      	uxtb	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fd f9dd 	bl	800119c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2203      	movs	r2, #3
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f814 	bl	8003e18 <HAL_SD_InitCard>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00a      	b.n	8003e10 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b08e      	sub	sp, #56	@ 0x38
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003e34:	2376      	movs	r3, #118	@ 0x76
 8003e36:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681d      	ldr	r5, [r3, #0]
 8003e3c:	466c      	mov	r4, sp
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e50:	4628      	mov	r0, r5
 8003e52:	f001 fb83 	bl	800555c <SDIO_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04f      	b.n	8003f08 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003e68:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <HAL_SD_InitCard+0xf8>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fbbb 	bl	80055ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003e78:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <HAL_SD_InitCard+0xf8>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003e7e:	2002      	movs	r0, #2
 8003e80:	f7fd fbf6 	bl	8001670 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 ff6b 	bl	8004d60 <SD_PowerON>
 8003e8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02e      	b.n	8003f08 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fe8a 	bl	8004bc4 <SD_InitCard>
 8003eb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e01b      	b.n	8003f08 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f001 fc1a 	bl	8005712 <SDMMC_CmdBlockLength>
 8003ede:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00f      	beq.n	8003f06 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <HAL_SD_InitCard+0xfc>)
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3728      	adds	r7, #40	@ 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f10:	422580a0 	.word	0x422580a0
 8003f14:	004005ff 	.word	0x004005ff

08003f18 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	@ 0x30
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f34:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0c0      	b.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80b9 	bne.w	80040c0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d907      	bls.n	8003f72 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0a7      	b.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80040cc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	4a4b      	ldr	r2, [pc, #300]	@ (80040d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003fa4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	2200      	movs	r2, #0
 8003fac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3380      	adds	r3, #128	@ 0x80
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	f7fe f929 	bl	800223c <HAL_DMA_Start_IT>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a33      	ldr	r2, [pc, #204]	@ (80040d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004006:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e050      	b.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004020:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	2b01      	cmp	r3, #1
 800402c:	d002      	beq.n	8004034 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
 8004038:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	025b      	lsls	r3, r3, #9
 800403e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004040:	2390      	movs	r3, #144	@ 0x90
 8004042:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004044:	2302      	movs	r3, #2
 8004046:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800404c:	2301      	movs	r3, #1
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f107 0210 	add.w	r2, r7, #16
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fb2d 	bl	80056ba <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d90a      	bls.n	800407c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2282      	movs	r2, #130	@ 0x82
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fb91 	bl	800579a <SDMMC_CmdReadMultiBlock>
 8004078:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800407a:	e009      	b.n	8004090 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2281      	movs	r2, #129	@ 0x81
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fb64 	bl	8005756 <SDMMC_CmdReadSingleBlock>
 800408e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0e      	ldr	r2, [pc, #56]	@ (80040d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800409c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e002      	b.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3730      	adds	r7, #48	@ 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	080049d3 	.word	0x080049d3
 80040d0:	08004a45 	.word	0x08004a45
 80040d4:	004005ff 	.word	0x004005ff
 80040d8:	4225858c 	.word	0x4225858c

080040dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	@ 0x30
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0c5      	b.n	8004290 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	f040 80be 	bne.w	800428e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	441a      	add	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	429a      	cmp	r2, r3
 8004124:	d907      	bls.n	8004136 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0ac      	b.n	8004290 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	4a4e      	ldr	r2, [pc, #312]	@ (8004298 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	4a4d      	ldr	r2, [pc, #308]	@ (800429c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004168:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416e:	2200      	movs	r2, #0
 8004170:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	2b01      	cmp	r3, #1
 8004178:	d002      	beq.n	8004180 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800417a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d90a      	bls.n	800419c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22a0      	movs	r2, #160	@ 0xa0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004192:	4618      	mov	r0, r3
 8004194:	f001 fb45 	bl	8005822 <SDMMC_CmdWriteMultiBlock>
 8004198:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800419a:	e009      	b.n	80041b0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2290      	movs	r2, #144	@ 0x90
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fb18 	bl	80057de <SDMMC_CmdWriteSingleBlock>
 80041ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a39      	ldr	r2, [pc, #228]	@ (80042a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80041bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e059      	b.n	8004290 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	2240      	movs	r2, #64	@ 0x40
 80041e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3380      	adds	r3, #128	@ 0x80
 8004212:	461a      	mov	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	025b      	lsls	r3, r3, #9
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	f7fe f80f 	bl	800223c <HAL_DMA_Start_IT>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01c      	beq.n	800425e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004232:	f023 0302 	bic.w	r3, r3, #2
 8004236:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800423e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e018      	b.n	8004290 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	025b      	lsls	r3, r3, #9
 8004268:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800426a:	2390      	movs	r3, #144	@ 0x90
 800426c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004276:	2301      	movs	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f107 0210 	add.w	r2, r7, #16
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fa18 	bl	80056ba <SDIO_ConfigData>

      return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3730      	adds	r7, #48	@ 0x30
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	080049a9 	.word	0x080049a9
 800429c:	08004a45 	.word	0x08004a45
 80042a0:	004005ff 	.word	0x004005ff
 80042a4:	4225858c 	.word	0x4225858c

080042a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_SD_IRQHandler+0x2e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fdfc 	bl	8004ecc <SD_Read_IT>
 80042d4:	e165      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 808f 	beq.w	8004404 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80042fe:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004302:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d039      	beq.n	8004392 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <HAL_SD_IRQHandler+0x8a>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fa96 	bl	8005868 <SDMMC_CmdStopTransfer>
 800433c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f92f 	bl	80045b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800435e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_SD_IRQHandler+0xda>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f001 feb4 	bl	80060f0 <HAL_SD_RxCpltCallback>
 8004388:	e10b      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 fea6 	bl	80060dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004390:	e107      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8102 	beq.w	80045a2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fa5b 	bl	8005868 <SDMMC_CmdStopTransfer>
 80043b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f8f4 	bl	80045b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 80e5 	bne.w	80045a2 <HAL_SD_IRQHandler+0x2fa>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 80df 	bne.w	80045a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0208 	bic.w	r2, r2, #8
 80043f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 fe6d 	bl	80060dc <HAL_SD_TxCpltCallback>
}
 8004402:	e0ce      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_SD_IRQHandler+0x17c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fda6 	bl	8004f6e <SD_Write_IT>
 8004422:	e0be      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800442a:	f240 233a 	movw	r3, #570	@ 0x23a
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80b6 	beq.w	80045a2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	f043 0202 	orr.w	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004462:	f043 0208 	orr.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	f043 0210 	orr.w	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	f043 0208 	orr.w	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f240 723a 	movw	r2, #1850	@ 0x73a
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80044d0:	f023 0302 	bic.w	r3, r3, #2
 80044d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f9c4 	bl	8005868 <SDMMC_CmdStopTransfer>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f855 	bl	80045b4 <HAL_SD_ErrorCallback>
}
 800450a:	e04a      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d045      	beq.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <HAL_SD_IRQHandler+0x282>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d011      	beq.n	800454e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <HAL_SD_IRQHandler+0x304>)
 8004530:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fed8 	bl	80022ec <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02f      	beq.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	4618      	mov	r0, r3
 8004548:	f000 face 	bl	8004ae8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800454c:	e029      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_SD_IRQHandler+0x2ba>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <HAL_SD_IRQHandler+0x308>)
 8004568:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd febc 	bl	80022ec <HAL_DMA_Abort_IT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fae9 	bl	8004b56 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004584:	e00d      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f001 fd94 	bl	80060c8 <HAL_SD_AbortCallback>
}
 80045a0:	e7ff      	b.n	80045a2 <HAL_SD_IRQHandler+0x2fa>
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	08004ae9 	.word	0x08004ae9
 80045b0:	08004b57 	.word	0x08004b57

080045b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d6:	0f9b      	lsrs	r3, r3, #30
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e2:	0e9b      	lsrs	r3, r3, #26
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	b2da      	uxtb	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	b2da      	uxtb	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004628:	0d1b      	lsrs	r3, r3, #20
 800462a:	b29a      	uxth	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	0bdb      	lsrs	r3, r3, #15
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004658:	0b9b      	lsrs	r3, r3, #14
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467c:	0b1b      	lsrs	r3, r3, #12
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	2b00      	cmp	r3, #0
 8004696:	d163      	bne.n	8004760 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80046a8:	0f92      	lsrs	r2, r2, #30
 80046aa:	431a      	orrs	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b4:	0edb      	lsrs	r3, r3, #27
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c6:	0e1b      	lsrs	r3, r3, #24
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d8:	0d5b      	lsrs	r3, r3, #21
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ea:	0c9b      	lsrs	r3, r3, #18
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	0bdb      	lsrs	r3, r3, #15
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	7e1b      	ldrb	r3, [r3, #24]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	3302      	adds	r3, #2
 8004720:	2201      	movs	r2, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800472a:	fb03 f202 	mul.w	r2, r3, r2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	7a1b      	ldrb	r3, [r3, #8]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	2201      	movs	r2, #1
 800473e:	409a      	lsls	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800474c:	0a52      	lsrs	r2, r2, #9
 800474e:	fb03 f202 	mul.w	r2, r3, r2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475c:	661a      	str	r2, [r3, #96]	@ 0x60
 800475e:	e031      	b.n	80047c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	2b01      	cmp	r3, #1
 8004766:	d11d      	bne.n	80047a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	431a      	orrs	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	3301      	adds	r3, #1
 8004784:	029a      	lsls	r2, r3, #10
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004798:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80047a2:	e00f      	b.n	80047c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a58      	ldr	r2, [pc, #352]	@ (800490c <HAL_SD_GetCardCSD+0x344>)
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e09d      	b.n	8004900 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c8:	0b9b      	lsrs	r3, r3, #14
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047da:	09db      	lsrs	r3, r3, #7
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	0fdb      	lsrs	r3, r3, #31
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	0f5b      	lsrs	r3, r3, #29
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	b2da      	uxtb	r2, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	b2da      	uxtb	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	0d9b      	lsrs	r3, r3, #22
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	b2da      	uxtb	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	0d5b      	lsrs	r3, r3, #21
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486e:	0bdb      	lsrs	r3, r3, #15
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	b2da      	uxtb	r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	0b9b      	lsrs	r3, r3, #14
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	0b5b      	lsrs	r3, r3, #13
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	0b1b      	lsrs	r3, r3, #12
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	004005ff 	.word	0x004005ff

08004910 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa7e 	bl	8004e7c <SD_SendStatus>
 8004980:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	0a5b      	lsrs	r3, r3, #9
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800499e:	693b      	ldr	r3, [r7, #16]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	2b82      	cmp	r3, #130	@ 0x82
 80049e6:	d111      	bne.n	8004a0c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 ff3b 	bl	8005868 <SDMMC_CmdStopTransfer>
 80049f2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fdd4 	bl	80045b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0208 	bic.w	r2, r2, #8
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a24:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f001 fb5b 	bl	80060f0 <HAL_SD_RxCpltCallback>
#endif
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fdf6 	bl	8002644 <HAL_DMA_GetError>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d03e      	beq.n	8004adc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <SD_DMAError+0x36>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d12d      	bne.n	8004ad6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <SD_DMAError+0xa0>)
 8004a80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004a90:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a96:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7ff ff62 	bl	8004968 <HAL_SD_GetCardState>
 8004aa4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b06      	cmp	r3, #6
 8004aaa:	d002      	beq.n	8004ab2 <SD_DMAError+0x6e>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10a      	bne.n	8004ac8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fed6 	bl	8005868 <SDMMC_CmdStopTransfer>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff fd6c 	bl	80045b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004adc:	bf00      	nop
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	004005ff 	.word	0x004005ff

08004ae8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ff31 	bl	8004968 <HAL_SD_GetCardState>
 8004b06:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d002      	beq.n	8004b22 <SD_DMATxAbort+0x3a>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d10a      	bne.n	8004b38 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fe9e 	bl	8005868 <SDMMC_CmdStopTransfer>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 fac1 	bl	80060c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b46:	e002      	b.n	8004b4e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fd33 	bl	80045b4 <HAL_SD_ErrorCallback>
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fefa 	bl	8004968 <HAL_SD_GetCardState>
 8004b74:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d002      	beq.n	8004b90 <SD_DMARxAbort+0x3a>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10a      	bne.n	8004ba6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe67 	bl	8005868 <SDMMC_CmdStopTransfer>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f001 fa8a 	bl	80060c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bb4:	e002      	b.n	8004bbc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff fcfc 	bl	80045b4 <HAL_SD_ErrorCallback>
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bc4:	b5b0      	push	{r4, r5, r7, lr}
 8004bc6:	b094      	sub	sp, #80	@ 0x50
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fd18 	bl	800560a <SDIO_GetPowerState>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004be0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004be4:	e0b8      	b.n	8004d58 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d02f      	beq.n	8004c4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 feff 	bl	80059f6 <SDMMC_CmdSendCID>
 8004bf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c02:	e0a9      	b.n	8004d58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fd42 	bl	8005694 <SDIO_GetResponse>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2104      	movs	r1, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd39 	bl	8005694 <SDIO_GetResponse>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd30 	bl	8005694 <SDIO_GetResponse>
 8004c34:	4602      	mov	r2, r0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	210c      	movs	r1, #12
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fd27 	bl	8005694 <SDIO_GetResponse>
 8004c46:	4602      	mov	r2, r0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d00d      	beq.n	8004c72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f107 020e 	add.w	r2, r7, #14
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 ff05 	bl	8005a70 <SDMMC_CmdSetRelAdd>
 8004c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <SD_InitCard+0xae>
    {
      return errorstate;
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c70:	e072      	b.n	8004d58 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d036      	beq.n	8004ce8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 fecf 	bl	8005a32 <SDMMC_CmdSendCSD>
 8004c94:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	e05b      	b.n	8004d58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fcf4 	bl	8005694 <SDIO_GetResponse>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fceb 	bl	8005694 <SDIO_GetResponse>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2108      	movs	r1, #8
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fce2 	bl	8005694 <SDIO_GetResponse>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	210c      	movs	r1, #12
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fcd9 	bl	8005694 <SDIO_GetResponse>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2104      	movs	r1, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fcd0 	bl	8005694 <SDIO_GetResponse>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	0d1a      	lsrs	r2, r3, #20
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fc60 	bl	80045c8 <HAL_SD_GetCardCSD>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d12:	e021      	b.n	8004d58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	2200      	movs	r2, #0
 8004d20:	461c      	mov	r4, r3
 8004d22:	4615      	mov	r5, r2
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	4608      	mov	r0, r1
 8004d2a:	f000 fdbf 	bl	80058ac <SDMMC_CmdSelDesel>
 8004d2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <SD_InitCard+0x176>
  {
    return errorstate;
 8004d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d38:	e00e      	b.n	8004d58 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	466c      	mov	r4, sp
 8004d42:	f103 0210 	add.w	r2, r3, #16
 8004d46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 fc03 	bl	800555c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3740      	adds	r7, #64	@ 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bdb0      	pop	{r4, r5, r7, pc}

08004d60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fdba 	bl	80058f2 <SDMMC_CmdGoIdleState>
 8004d7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	e072      	b.n	8004e70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fdcd 	bl	800592e <SDMMC_CmdOperCond>
 8004d94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fda3 	bl	80058f2 <SDMMC_CmdGoIdleState>
 8004dac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	e05b      	b.n	8004e70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d137      	bne.n	8004e36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fdcd 	bl	800596c <SDMMC_CmdAppCommand>
 8004dd2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02d      	beq.n	8004e36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dda:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004dde:	e047      	b.n	8004e70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fdc0 	bl	800596c <SDMMC_CmdAppCommand>
 8004dec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	e03b      	b.n	8004e70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	491e      	ldr	r1, [pc, #120]	@ (8004e78 <SD_PowerON+0x118>)
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fdd6 	bl	80059b0 <SDMMC_CmdAppOperCommand>
 8004e04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e10:	e02e      	b.n	8004e70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fc3b 	bl	8005694 <SDIO_GetResponse>
 8004e1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	0fdb      	lsrs	r3, r3, #31
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <SD_PowerON+0xcc>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <SD_PowerON+0xce>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]

    count++;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d802      	bhi.n	8004e46 <SD_PowerON+0xe6>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0cc      	beq.n	8004de0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d902      	bls.n	8004e56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e54:	e00c      	b.n	8004e70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e66:	e002      	b.n	8004e6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	c1100000 	.word	0xc1100000

08004e7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e90:	e018      	b.n	8004ec4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f000 fe07 	bl	8005ab2 <SDMMC_CmdSendStatus>
 8004ea4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e009      	b.n	8004ec4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fbec 	bl	8005694 <SDIO_GetResponse>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d03f      	beq.n	8004f66 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e033      	b.n	8004f54 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb5e 	bl	80055b2 <SDIO_ReadFIFO>
 8004ef6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	0e1b      	lsrs	r3, r3, #24
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3301      	adds	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b07      	cmp	r3, #7
 8004f58:	d9c8      	bls.n	8004eec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d043      	beq.n	8005010 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e037      	b.n	8004ffe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	041a      	lsls	r2, r3, #16
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	061a      	lsls	r2, r3, #24
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f107 0208 	add.w	r2, r7, #8
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 faea 	bl	80055cc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b07      	cmp	r3, #7
 8005002:	d9c4      	bls.n	8004f8e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005010:	bf00      	nop
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e041      	b.n	80050ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f839 	bl	80050b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 f9c0 	bl	80053dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04e      	b.n	8005182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_TIM_Base_Start_IT+0xc4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d01d      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_TIM_Base_Start_IT+0xc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	@ (8005198 <HAL_TIM_Base_Start_IT+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <HAL_TIM_Base_Start_IT+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40001800 	.word	0x40001800

080051ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f8d2 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8c4 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8d5 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0204 	mvn.w	r2, #4
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8ac 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f89e 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8af 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0208 	mvn.w	r2, #8
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f886 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f878 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f889 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0210 	mvn.w	r2, #16
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2208      	movs	r2, #8
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f860 	bl	80053a0 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f852 	bl	800538c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f863 	bl	80053b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fb fe66 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f906 	bl	8005548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f834 	bl	80053c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8d8 	bl	8005534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a46      	ldr	r2, [pc, #280]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a43      	ldr	r2, [pc, #268]	@ (800550c <TIM_Base_SetConfig+0x130>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a42      	ldr	r2, [pc, #264]	@ (8005510 <TIM_Base_SetConfig+0x134>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a41      	ldr	r2, [pc, #260]	@ (8005514 <TIM_Base_SetConfig+0x138>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a40      	ldr	r2, [pc, #256]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d027      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a32      	ldr	r2, [pc, #200]	@ (800550c <TIM_Base_SetConfig+0x130>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d023      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a31      	ldr	r2, [pc, #196]	@ (8005510 <TIM_Base_SetConfig+0x134>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <TIM_Base_SetConfig+0x138>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d017      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2e      	ldr	r2, [pc, #184]	@ (800551c <TIM_Base_SetConfig+0x140>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2d      	ldr	r2, [pc, #180]	@ (8005520 <TIM_Base_SetConfig+0x144>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2c      	ldr	r2, [pc, #176]	@ (8005524 <TIM_Base_SetConfig+0x148>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2b      	ldr	r2, [pc, #172]	@ (8005528 <TIM_Base_SetConfig+0x14c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2a      	ldr	r2, [pc, #168]	@ (800552c <TIM_Base_SetConfig+0x150>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a29      	ldr	r2, [pc, #164]	@ (8005530 <TIM_Base_SetConfig+0x154>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	@ (8005508 <TIM_Base_SetConfig+0x12c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0xf8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <TIM_Base_SetConfig+0x13c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]
  }
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40010400 	.word	0x40010400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800
 8005528:	40001800 	.word	0x40001800
 800552c:	40001c00 	.word	0x40001c00
 8005530:	40002000 	.word	0x40002000

08005534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800555c:	b084      	sub	sp, #16
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	f107 001c 	add.w	r0, r7, #28
 800556a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005572:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005574:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005576:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800557a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800557e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005582:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005586:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8005596:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	b004      	add	sp, #16
 80055b0:	4770      	bx	lr

080055b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2203      	movs	r2, #3
 80055fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0303 	and.w	r3, r3, #3
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005644:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800564a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005650:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005660:	f023 030f 	bic.w	r3, r3, #15
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	b2db      	uxtb	r3, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3314      	adds	r3, #20
 80056a2:	461a      	mov	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
}  
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0

}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b088      	sub	sp, #32
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005720:	2310      	movs	r3, #16
 8005722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005724:	2340      	movs	r3, #64	@ 0x40
 8005726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800572c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005730:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005732:	f107 0308 	add.w	r3, r7, #8
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ff74 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800573e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005742:	2110      	movs	r1, #16
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f9d7 	bl	8005af8 <SDMMC_GetCmdResp1>
 800574a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800574c:	69fb      	ldr	r3, [r7, #28]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005764:	2311      	movs	r3, #17
 8005766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005768:	2340      	movs	r3, #64	@ 0x40
 800576a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005774:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff52 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005786:	2111      	movs	r1, #17
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f9b5 	bl	8005af8 <SDMMC_GetCmdResp1>
 800578e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005790:	69fb      	ldr	r3, [r7, #28]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b088      	sub	sp, #32
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80057a8:	2312      	movs	r3, #18
 80057aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057ac:	2340      	movs	r3, #64	@ 0x40
 80057ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff30 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ca:	2112      	movs	r1, #18
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f993 	bl	8005af8 <SDMMC_GetCmdResp1>
 80057d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057d4:	69fb      	ldr	r3, [r7, #28]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057ec:	2318      	movs	r3, #24
 80057ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057f0:	2340      	movs	r3, #64	@ 0x40
 80057f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057fe:	f107 0308 	add.w	r3, r7, #8
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff0e 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	2118      	movs	r1, #24
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f971 	bl	8005af8 <SDMMC_GetCmdResp1>
 8005816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005818:	69fb      	ldr	r3, [r7, #28]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b088      	sub	sp, #32
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005830:	2319      	movs	r3, #25
 8005832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005834:	2340      	movs	r3, #64	@ 0x40
 8005836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800583c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff feec 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800584e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005852:	2119      	movs	r1, #25
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f94f 	bl	8005af8 <SDMMC_GetCmdResp1>
 800585a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800585c:	69fb      	ldr	r3, [r7, #28]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005874:	230c      	movs	r3, #12
 8005876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005878:	2340      	movs	r3, #64	@ 0x40
 800587a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005884:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff feca 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005892:	4a05      	ldr	r2, [pc, #20]	@ (80058a8 <SDMMC_CmdStopTransfer+0x40>)
 8005894:	210c      	movs	r1, #12
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f92e 	bl	8005af8 <SDMMC_GetCmdResp1>
 800589c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800589e:	69fb      	ldr	r3, [r7, #28]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	05f5e100 	.word	0x05f5e100

080058ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	@ 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058bc:	2307      	movs	r3, #7
 80058be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058c0:	2340      	movs	r3, #64	@ 0x40
 80058c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ce:	f107 0310 	add.w	r3, r7, #16
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fea6 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80058da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058de:	2107      	movs	r1, #7
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f909 	bl	8005af8 <SDMMC_GetCmdResp1>
 80058e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3728      	adds	r7, #40	@ 0x28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b088      	sub	sp, #32
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005902:	2300      	movs	r3, #0
 8005904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800590a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800590e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005910:	f107 0308 	add.w	r3, r7, #8
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe85 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb23 	bl	8005f68 <SDMMC_GetCmdError>
 8005922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005924:	69fb      	ldr	r3, [r7, #28]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b088      	sub	sp, #32
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005936:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800593a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800593c:	2308      	movs	r3, #8
 800593e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005940:	2340      	movs	r3, #64	@ 0x40
 8005942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800594c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fe66 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fab6 	bl	8005ecc <SDMMC_GetCmdResp7>
 8005960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005962:	69fb      	ldr	r3, [r7, #28]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800597a:	2337      	movs	r3, #55	@ 0x37
 800597c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800597e:	2340      	movs	r3, #64	@ 0x40
 8005980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800598a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800598c:	f107 0308 	add.w	r3, r7, #8
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe47 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599c:	2137      	movs	r1, #55	@ 0x37
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8aa 	bl	8005af8 <SDMMC_GetCmdResp1>
 80059a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a6:	69fb      	ldr	r3, [r7, #28]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059c6:	2329      	movs	r3, #41	@ 0x29
 80059c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059ca:	2340      	movs	r3, #64	@ 0x40
 80059cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fe21 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f9bd 	bl	8005d64 <SDMMC_GetCmdResp3>
 80059ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059ec:	69fb      	ldr	r3, [r7, #28]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b088      	sub	sp, #32
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a02:	2302      	movs	r3, #2
 8005a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a06:	23c0      	movs	r3, #192	@ 0xc0
 8005a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a14:	f107 0308 	add.w	r3, r7, #8
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fe03 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f957 	bl	8005cd4 <SDMMC_GetCmdResp2>
 8005a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a28:	69fb      	ldr	r3, [r7, #28]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a40:	2309      	movs	r3, #9
 8005a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a44:	23c0      	movs	r3, #192	@ 0xc0
 8005a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a52:	f107 0308 	add.w	r3, r7, #8
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fde4 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f938 	bl	8005cd4 <SDMMC_GetCmdResp2>
 8005a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a66:	69fb      	ldr	r3, [r7, #28]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3720      	adds	r7, #32
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a82:	2340      	movs	r3, #64	@ 0x40
 8005a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fdc5 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f99d 	bl	8005de0 <SDMMC_GetCmdResp6>
 8005aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005ac0:	230d      	movs	r3, #13
 8005ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ac4:	2340      	movs	r3, #64	@ 0x40
 8005ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff fda4 	bl	8005626 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	210d      	movs	r1, #13
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f807 	bl	8005af8 <SDMMC_GetCmdResp1>
 8005aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aec:	69fb      	ldr	r3, [r7, #28]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	460b      	mov	r3, r1
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b06:	4b70      	ldr	r3, [pc, #448]	@ (8005cc8 <SDMMC_GetCmdResp1+0x1d0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a70      	ldr	r2, [pc, #448]	@ (8005ccc <SDMMC_GetCmdResp1+0x1d4>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	0a5a      	lsrs	r2, r3, #9
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	1e5a      	subs	r2, r3, #1
 8005b1e:	61fa      	str	r2, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b28:	e0c9      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ef      	beq.n	8005b1a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ea      	bne.n	8005b1a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b56:	2304      	movs	r3, #4
 8005b58:	e0b1      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a6      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	22c5      	movs	r2, #197	@ 0xc5
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff fd7f 	bl	800567a <SDIO_GetCommandResponse>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	7afb      	ldrb	r3, [r7, #11]
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d001      	beq.n	8005b8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e099      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fd81 	bl	8005694 <SDIO_GetResponse>
 8005b92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4b4e      	ldr	r3, [pc, #312]	@ (8005cd0 <SDMMC_GetCmdResp1+0x1d8>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e08d      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da02      	bge.n	8005bae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005ba8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bac:	e087      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005bb8:	2340      	movs	r3, #64	@ 0x40
 8005bba:	e080      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	e079      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bd8:	e071      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005be8:	e069      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf8:	e061      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c08:	e059      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c18:	e051      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c28:	e049      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c38:	e041      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c48:	e039      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c58:	e031      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005c68:	e029      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005c78:	e021      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005c88:	e019      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005c98:	e011      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ca4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005ca8:	e009      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005cb4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005cb8:	e001      	b.n	8005cbe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000028 	.word	0x20000028
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	fdffe008 	.word	0xfdffe008

08005cd4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d5c <SDMMC_GetCmdResp2+0x88>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d60 <SDMMC_GetCmdResp2+0x8c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0a5b      	lsrs	r3, r3, #9
 8005ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cec:	fb02 f303 	mul.w	r3, r2, r3
 8005cf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1e5a      	subs	r2, r3, #1
 8005cf6:	60fa      	str	r2, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d00:	e026      	b.n	8005d50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0ef      	beq.n	8005cf2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1ea      	bne.n	8005cf2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d2e:	2304      	movs	r3, #4
 8005d30:	e00e      	b.n	8005d50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e003      	b.n	8005d50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	22c5      	movs	r2, #197	@ 0xc5
 8005d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20000028 	.word	0x20000028
 8005d60:	10624dd3 	.word	0x10624dd3

08005d64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <SDMMC_GetCmdResp3+0x74>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1a      	ldr	r2, [pc, #104]	@ (8005ddc <SDMMC_GetCmdResp3+0x78>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	0a5b      	lsrs	r3, r3, #9
 8005d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1e5a      	subs	r2, r3, #1
 8005d86:	60fa      	str	r2, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d90:	e01b      	b.n	8005dca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ef      	beq.n	8005d82 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ea      	bne.n	8005d82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	e003      	b.n	8005dca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	22c5      	movs	r2, #197	@ 0xc5
 8005dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	20000028 	.word	0x20000028
 8005ddc:	10624dd3 	.word	0x10624dd3

08005de0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	460b      	mov	r3, r1
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dee:	4b35      	ldr	r3, [pc, #212]	@ (8005ec4 <SDMMC_GetCmdResp6+0xe4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a35      	ldr	r2, [pc, #212]	@ (8005ec8 <SDMMC_GetCmdResp6+0xe8>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	61fa      	str	r2, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e12:	e052      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ef      	beq.n	8005e04 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1ea      	bne.n	8005e04 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e40:	2304      	movs	r3, #4
 8005e42:	e03a      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e02f      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fc0d 	bl	800567a <SDIO_GetCommandResponse>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d001      	beq.n	8005e6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e025      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	22c5      	movs	r2, #197	@ 0xc5
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e74:	2100      	movs	r1, #0
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff fc0c 	bl	8005694 <SDIO_GetResponse>
 8005e7c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e011      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ea4:	e009      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005eb4:	e001      	b.n	8005eba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000028 	.word	0x20000028
 8005ec8:	10624dd3 	.word	0x10624dd3

08005ecc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ed4:	4b22      	ldr	r3, [pc, #136]	@ (8005f60 <SDMMC_GetCmdResp7+0x94>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	@ (8005f64 <SDMMC_GetCmdResp7+0x98>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0a5b      	lsrs	r3, r3, #9
 8005ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	60fa      	str	r2, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ef4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ef8:	e02c      	b.n	8005f54 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0ef      	beq.n	8005eea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ea      	bne.n	8005eea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2204      	movs	r2, #4
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f26:	2304      	movs	r3, #4
 8005f28:	e014      	b.n	8005f54 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e009      	b.n	8005f54 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2240      	movs	r2, #64	@ 0x40
 8005f50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
  
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000028 	.word	0x20000028
 8005f64:	10624dd3 	.word	0x10624dd3

08005f68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f70:	4b11      	ldr	r3, [pc, #68]	@ (8005fb8 <SDMMC_GetCmdError+0x50>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a11      	ldr	r2, [pc, #68]	@ (8005fbc <SDMMC_GetCmdError+0x54>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	60fa      	str	r2, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f94:	e009      	b.n	8005faa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f1      	beq.n	8005f86 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	22c5      	movs	r2, #197	@ 0xc5
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000028 	.word	0x20000028
 8005fbc:	10624dd3 	.word	0x10624dd3

08005fc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fc4:	4904      	ldr	r1, [pc, #16]	@ (8005fd8 <MX_FATFS_Init+0x18>)
 8005fc6:	4805      	ldr	r0, [pc, #20]	@ (8005fdc <MX_FATFS_Init+0x1c>)
 8005fc8:	f002 ffe4 	bl	8008f94 <FATFS_LinkDriver>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <MX_FATFS_Init+0x20>)
 8005fd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005fd4:	bf00      	nop
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000a04 	.word	0x20000a04
 8005fdc:	0800ebb8 	.word	0x0800ebb8
 8005fe0:	20000a00 	.word	0x20000a00

08005fe4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005fe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005ffe:	f000 f888 	bl	8006112 <BSP_SD_IsDetected>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d001      	beq.n	800600c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e005      	b.n	8006018 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800600c:	4804      	ldr	r0, [pc, #16]	@ (8006020 <BSP_SD_Init+0x2c>)
 800600e:	f7fd fed3 	bl	8003db8 <HAL_SD_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006016:	79fb      	ldrb	r3, [r7, #7]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000011c 	.word	0x2000011c

08006024 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	4806      	ldr	r0, [pc, #24]	@ (8006054 <BSP_SD_ReadBlocks_DMA+0x30>)
 800603c:	f7fd ff6c 	bl	8003f18 <HAL_SD_ReadBlocks_DMA>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	2000011c 	.word	0x2000011c

08006058 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	4806      	ldr	r0, [pc, #24]	@ (8006088 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006070:	f7fe f834 	bl	80040dc <HAL_SD_WriteBlocks_DMA>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2000011c 	.word	0x2000011c

0800608c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006090:	4805      	ldr	r0, [pc, #20]	@ (80060a8 <BSP_SD_GetCardState+0x1c>)
 8006092:	f7fe fc69 	bl	8004968 <HAL_SD_GetCardState>
 8006096:	4603      	mov	r3, r0
 8006098:	2b04      	cmp	r3, #4
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2000011c 	.word	0x2000011c

080060ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4803      	ldr	r0, [pc, #12]	@ (80060c4 <BSP_SD_GetCardInfo+0x18>)
 80060b8:	f7fe fc2a 	bl	8004910 <HAL_SD_GetCardInfo>
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	2000011c 	.word	0x2000011c

080060c8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80060d0:	f000 f818 	bl	8006104 <BSP_SD_AbortCallback>
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80060e4:	f000 f9a8 	bl	8006438 <BSP_SD_WriteCpltCallback>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80060f8:	f000 f9aa 	bl	8006450 <BSP_SD_ReadCpltCallback>
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0

}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006118:	2301      	movs	r3, #1
 800611a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800611c:	f000 f80c 	bl	8006138 <BSP_PlatformIsDetected>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006126:	2300      	movs	r3, #0
 8006128:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	b2db      	uxtb	r3, r3
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800613e:	2301      	movs	r3, #1
 8006140:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006142:	2108      	movs	r1, #8
 8006144:	4806      	ldr	r0, [pc, #24]	@ (8006160 <BSP_PlatformIsDetected+0x28>)
 8006146:	f7fc fd05 	bl	8002b54 <HAL_GPIO_ReadPin>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006150:	2300      	movs	r3, #0
 8006152:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006154:	79fb      	ldrb	r3, [r7, #7]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40020c00 	.word	0x40020c00

08006164 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800616c:	f7fb fa74 	bl	8001658 <HAL_GetTick>
 8006170:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006172:	e006      	b.n	8006182 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006174:	f7ff ff8a 	bl	800608c <BSP_SD_GetCardState>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800617e:	2300      	movs	r3, #0
 8006180:	e009      	b.n	8006196 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006182:	f7fb fa69 	bl	8001658 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d8f0      	bhi.n	8006174 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80061aa:	4b0b      	ldr	r3, [pc, #44]	@ (80061d8 <SD_CheckStatus+0x38>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80061b0:	f7ff ff6c 	bl	800608c <BSP_SD_GetCardState>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80061ba:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <SD_CheckStatus+0x38>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <SD_CheckStatus+0x38>)
 80061c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061ca:	4b03      	ldr	r3, [pc, #12]	@ (80061d8 <SD_CheckStatus+0x38>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b2db      	uxtb	r3, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000031 	.word	0x20000031

080061dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80061e6:	f7ff ff05 	bl	8005ff4 <BSP_SD_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ffd4 	bl	80061a0 <SD_CheckStatus>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <SD_initialize+0x34>)
 80061fe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006200:	4b03      	ldr	r3, [pc, #12]	@ (8006210 <SD_initialize+0x34>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000031 	.word	0x20000031

08006214 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ffbd 	bl	80061a0 <SD_CheckStatus>
 8006226:	4603      	mov	r3, r0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006244:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006248:	f7ff ff8c 	bl	8006164 <SD_CheckStatusWithTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	da01      	bge.n	8006256 <SD_read+0x26>
  {
    return res;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	e03b      	b.n	80062ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	68b8      	ldr	r0, [r7, #8]
 800625c:	f7ff fee2 	bl	8006024 <BSP_SD_ReadBlocks_DMA>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d132      	bne.n	80062cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006266:	4b1c      	ldr	r3, [pc, #112]	@ (80062d8 <SD_read+0xa8>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800626c:	f7fb f9f4 	bl	8001658 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006272:	bf00      	nop
 8006274:	4b18      	ldr	r3, [pc, #96]	@ (80062d8 <SD_read+0xa8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <SD_read+0x5e>
 800627c:	f7fb f9ec 	bl	8001658 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f247 522f 	movw	r2, #29999	@ 0x752f
 800628a:	4293      	cmp	r3, r2
 800628c:	d9f2      	bls.n	8006274 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800628e:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <SD_read+0xa8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]
 800629a:	e017      	b.n	80062cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800629c:	4b0e      	ldr	r3, [pc, #56]	@ (80062d8 <SD_read+0xa8>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80062a2:	f7fb f9d9 	bl	8001658 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80062a8:	e007      	b.n	80062ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062aa:	f7ff feef 	bl	800608c <BSP_SD_GetCardState>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <SD_read+0x8a>
          {
            res = RES_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80062b8:	e008      	b.n	80062cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80062ba:	f7fb f9cd 	bl	8001658 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d9ee      	bls.n	80062aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000a0c 	.word	0x20000a0c

080062dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80062f0:	4b24      	ldr	r3, [pc, #144]	@ (8006384 <SD_write+0xa8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062f6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80062fa:	f7ff ff33 	bl	8006164 <SD_CheckStatusWithTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	da01      	bge.n	8006308 <SD_write+0x2c>
  {
    return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	e038      	b.n	800637a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	68b8      	ldr	r0, [r7, #8]
 800630e:	f7ff fea3 	bl	8006058 <BSP_SD_WriteBlocks_DMA>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d12f      	bne.n	8006378 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006318:	f7fb f99e 	bl	8001658 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800631e:	bf00      	nop
 8006320:	4b18      	ldr	r3, [pc, #96]	@ (8006384 <SD_write+0xa8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <SD_write+0x5e>
 8006328:	f7fb f996 	bl	8001658 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006336:	4293      	cmp	r3, r2
 8006338:	d9f2      	bls.n	8006320 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800633a:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <SD_write+0xa8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
 8006346:	e017      	b.n	8006378 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006348:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <SD_write+0xa8>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800634e:	f7fb f983 	bl	8001658 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006354:	e007      	b.n	8006366 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006356:	f7ff fe99 	bl	800608c <BSP_SD_GetCardState>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <SD_write+0x8a>
          {
            res = RES_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	75fb      	strb	r3, [r7, #23]
            break;
 8006364:	e008      	b.n	8006378 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006366:	f7fb f977 	bl	8001658 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006374:	4293      	cmp	r3, r2
 8006376:	d9ee      	bls.n	8006356 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000a08 	.word	0x20000a08

08006388 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	@ 0x30
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	603a      	str	r2, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
 8006394:	460b      	mov	r3, r1
 8006396:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800639e:	4b25      	ldr	r3, [pc, #148]	@ (8006434 <SD_ioctl+0xac>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SD_ioctl+0x28>
 80063ac:	2303      	movs	r3, #3
 80063ae:	e03c      	b.n	800642a <SD_ioctl+0xa2>

  switch (cmd)
 80063b0:	79bb      	ldrb	r3, [r7, #6]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d834      	bhi.n	8006420 <SD_ioctl+0x98>
 80063b6:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <SD_ioctl+0x34>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	08006407 	.word	0x08006407
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80063d2:	e028      	b.n	8006426 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fe67 	bl	80060ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80063ea:	e01c      	b.n	8006426 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fe5b 	bl	80060ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80063f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006404:	e00f      	b.n	8006426 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fe4e 	bl	80060ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006412:	0a5a      	lsrs	r2, r3, #9
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800641e:	e002      	b.n	8006426 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006420:	2304      	movs	r3, #4
 8006422:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800642a:	4618      	mov	r0, r3
 800642c:	3730      	adds	r7, #48	@ 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000031 	.word	0x20000031

08006438 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800643c:	4b03      	ldr	r3, [pc, #12]	@ (800644c <BSP_SD_WriteCpltCallback+0x14>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000a08 	.word	0x20000a08

08006450 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006454:	4b03      	ldr	r3, [pc, #12]	@ (8006464 <BSP_SD_ReadCpltCallback+0x14>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	20000a0c 	.word	0x20000a0c

08006468 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <disk_status+0x30>)
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	79fa      	ldrb	r2, [r7, #7]
 8006480:	4905      	ldr	r1, [pc, #20]	@ (8006498 <disk_status+0x30>)
 8006482:	440a      	add	r2, r1
 8006484:	7a12      	ldrb	r2, [r2, #8]
 8006486:	4610      	mov	r0, r2
 8006488:	4798      	blx	r3
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000a38 	.word	0x20000a38

0800649c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4a0e      	ldr	r2, [pc, #56]	@ (80064e8 <disk_initialize+0x4c>)
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d114      	bne.n	80064de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	4a0c      	ldr	r2, [pc, #48]	@ (80064e8 <disk_initialize+0x4c>)
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	79fa      	ldrb	r2, [r7, #7]
 80064c2:	4909      	ldr	r1, [pc, #36]	@ (80064e8 <disk_initialize+0x4c>)
 80064c4:	440a      	add	r2, r1
 80064c6:	7a12      	ldrb	r2, [r2, #8]
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	4a03      	ldr	r2, [pc, #12]	@ (80064e8 <disk_initialize+0x4c>)
 80064da:	2101      	movs	r1, #1
 80064dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000a38 	.word	0x20000a38

080064ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006528 <disk_read+0x3c>)
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	689c      	ldr	r4, [r3, #8]
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	4a07      	ldr	r2, [pc, #28]	@ (8006528 <disk_read+0x3c>)
 800650c:	4413      	add	r3, r2
 800650e:	7a18      	ldrb	r0, [r3, #8]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	47a0      	blx	r4
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]
  return res;
 800651c:	7dfb      	ldrb	r3, [r7, #23]
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd90      	pop	{r4, r7, pc}
 8006526:	bf00      	nop
 8006528:	20000a38 	.word	0x20000a38

0800652c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800652c:	b590      	push	{r4, r7, lr}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <disk_write+0x3c>)
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68dc      	ldr	r4, [r3, #12]
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	4a07      	ldr	r2, [pc, #28]	@ (8006568 <disk_write+0x3c>)
 800654c:	4413      	add	r3, r2
 800654e:	7a18      	ldrb	r0, [r3, #8]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	47a0      	blx	r4
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]
  return res;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	bf00      	nop
 8006568:	20000a38 	.word	0x20000a38

0800656c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	603a      	str	r2, [r7, #0]
 8006576:	71fb      	strb	r3, [r7, #7]
 8006578:	460b      	mov	r3, r1
 800657a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	4a09      	ldr	r2, [pc, #36]	@ (80065a4 <disk_ioctl+0x38>)
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	79fa      	ldrb	r2, [r7, #7]
 800658a:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <disk_ioctl+0x38>)
 800658c:	440a      	add	r2, r1
 800658e:	7a10      	ldrb	r0, [r2, #8]
 8006590:	79b9      	ldrb	r1, [r7, #6]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4798      	blx	r3
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
  return res;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000a38 	.word	0x20000a38

080065a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80065b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	b21a      	sxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b21b      	sxth	r3, r3
 80065ca:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065cc:	89fb      	ldrh	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3303      	adds	r3, #3
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	3202      	adds	r2, #2
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	3201      	adds	r2, #1
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	7812      	ldrb	r2, [r2, #0]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
	return rv;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	887a      	ldrh	r2, [r7, #2]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	887a      	ldrh	r2, [r7, #2]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00d      	beq.n	80066e4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	1c53      	adds	r3, r2, #1
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	1c59      	adds	r1, r3, #1
 80066d2:	6179      	str	r1, [r7, #20]
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3b01      	subs	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f1      	bne.n	80066c8 <mem_cpy+0x1a>
	}
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	617a      	str	r2, [r7, #20]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3b01      	subs	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f3      	bne.n	8006700 <mem_set+0x10>
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006726:	b480      	push	{r7}
 8006728:	b089      	sub	sp, #36	@ 0x24
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	61fa      	str	r2, [r7, #28]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	61ba      	str	r2, [r7, #24]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	1acb      	subs	r3, r1, r3
 8006752:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <mem_cmp+0x40>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0eb      	beq.n	800673e <mem_cmp+0x18>

	return r;
 8006766:	697b      	ldr	r3, [r7, #20]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3724      	adds	r7, #36	@ 0x24
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800677e:	e002      	b.n	8006786 <chk_chr+0x12>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <chk_chr+0x26>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	4293      	cmp	r3, r2
 8006798:	d1f2      	bne.n	8006780 <chk_chr+0xc>
	return *str;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	781b      	ldrb	r3, [r3, #0]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e029      	b.n	8006814 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80067c0:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <chk_lock+0xb4>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	4413      	add	r3, r2
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01d      	beq.n	800680a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067ce:	4a24      	ldr	r2, [pc, #144]	@ (8006860 <chk_lock+0xb4>)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	4413      	add	r3, r2
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d116      	bne.n	800680e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80067e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006860 <chk_lock+0xb4>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	4413      	add	r3, r2
 80067e8:	3304      	adds	r3, #4
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d10c      	bne.n	800680e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80067f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006860 <chk_lock+0xb4>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	4413      	add	r3, r2
 80067fc:	3308      	adds	r3, #8
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006804:	429a      	cmp	r2, r3
 8006806:	d102      	bne.n	800680e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006808:	e007      	b.n	800681a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800680a:	2301      	movs	r3, #1
 800680c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d9d2      	bls.n	80067c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d109      	bne.n	8006834 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <chk_lock+0x80>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d101      	bne.n	8006830 <chk_lock+0x84>
 800682c:	2300      	movs	r3, #0
 800682e:	e010      	b.n	8006852 <chk_lock+0xa6>
 8006830:	2312      	movs	r3, #18
 8006832:	e00e      	b.n	8006852 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <chk_lock+0xa0>
 800683a:	4a09      	ldr	r2, [pc, #36]	@ (8006860 <chk_lock+0xb4>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	330c      	adds	r3, #12
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684a:	d101      	bne.n	8006850 <chk_lock+0xa4>
 800684c:	2310      	movs	r3, #16
 800684e:	e000      	b.n	8006852 <chk_lock+0xa6>
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000a18 	.word	0x20000a18

08006864 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	e002      	b.n	8006876 <enq_lock+0x12>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3301      	adds	r3, #1
 8006874:	607b      	str	r3, [r7, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d806      	bhi.n	800688a <enq_lock+0x26>
 800687c:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <enq_lock+0x40>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	4413      	add	r3, r2
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f2      	bne.n	8006870 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b02      	cmp	r3, #2
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000a18 	.word	0x20000a18

080068a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e01f      	b.n	80068f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80068b8:	4a41      	ldr	r2, [pc, #260]	@ (80069c0 <inc_lock+0x118>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d113      	bne.n	80068f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80068ca:	4a3d      	ldr	r2, [pc, #244]	@ (80069c0 <inc_lock+0x118>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	3304      	adds	r3, #4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80068da:	429a      	cmp	r2, r3
 80068dc:	d109      	bne.n	80068f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80068de:	4a38      	ldr	r2, [pc, #224]	@ (80069c0 <inc_lock+0x118>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	4413      	add	r3, r2
 80068e6:	3308      	adds	r3, #8
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d006      	beq.n	8006900 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d9dc      	bls.n	80068b8 <inc_lock+0x10>
 80068fe:	e000      	b.n	8006902 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006900:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d132      	bne.n	800696e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e002      	b.n	8006914 <inc_lock+0x6c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d806      	bhi.n	8006928 <inc_lock+0x80>
 800691a:	4a29      	ldr	r2, [pc, #164]	@ (80069c0 <inc_lock+0x118>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f2      	bne.n	800690e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d101      	bne.n	8006932 <inc_lock+0x8a>
 800692e:	2300      	movs	r3, #0
 8006930:	e040      	b.n	80069b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4922      	ldr	r1, [pc, #136]	@ (80069c0 <inc_lock+0x118>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	440b      	add	r3, r1
 800693e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	491e      	ldr	r1, [pc, #120]	@ (80069c0 <inc_lock+0x118>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	440b      	add	r3, r1
 800694c:	3304      	adds	r3, #4
 800694e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695a      	ldr	r2, [r3, #20]
 8006954:	491a      	ldr	r1, [pc, #104]	@ (80069c0 <inc_lock+0x118>)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	440b      	add	r3, r1
 800695c:	3308      	adds	r3, #8
 800695e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006960:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <inc_lock+0x118>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	4413      	add	r3, r2
 8006968:	330c      	adds	r3, #12
 800696a:	2200      	movs	r2, #0
 800696c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <inc_lock+0xe0>
 8006974:	4a12      	ldr	r2, [pc, #72]	@ (80069c0 <inc_lock+0x118>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	4413      	add	r3, r2
 800697c:	330c      	adds	r3, #12
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <inc_lock+0xe0>
 8006984:	2300      	movs	r3, #0
 8006986:	e015      	b.n	80069b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d108      	bne.n	80069a0 <inc_lock+0xf8>
 800698e:	4a0c      	ldr	r2, [pc, #48]	@ (80069c0 <inc_lock+0x118>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	4413      	add	r3, r2
 8006996:	330c      	adds	r3, #12
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	3301      	adds	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	e001      	b.n	80069a4 <inc_lock+0xfc>
 80069a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069a4:	4906      	ldr	r1, [pc, #24]	@ (80069c0 <inc_lock+0x118>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	440b      	add	r3, r1
 80069ac:	330c      	adds	r3, #12
 80069ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000a18 	.word	0x20000a18

080069c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d825      	bhi.n	8006a24 <dec_lock+0x60>
		n = Files[i].ctr;
 80069d8:	4a17      	ldr	r2, [pc, #92]	@ (8006a38 <dec_lock+0x74>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	4413      	add	r3, r2
 80069e0:	330c      	adds	r3, #12
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ec:	d101      	bne.n	80069f2 <dec_lock+0x2e>
 80069ee:	2300      	movs	r3, #0
 80069f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80069f2:	89fb      	ldrh	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <dec_lock+0x3a>
 80069f8:	89fb      	ldrh	r3, [r7, #14]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80069fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006a38 <dec_lock+0x74>)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	4413      	add	r3, r2
 8006a06:	330c      	adds	r3, #12
 8006a08:	89fa      	ldrh	r2, [r7, #14]
 8006a0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <dec_lock+0x5a>
 8006a12:	4a09      	ldr	r2, [pc, #36]	@ (8006a38 <dec_lock+0x74>)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	4413      	add	r3, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	737b      	strb	r3, [r7, #13]
 8006a22:	e001      	b.n	8006a28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006a24:	2302      	movs	r3, #2
 8006a26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006a28:	7b7b      	ldrb	r3, [r7, #13]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000a18 	.word	0x20000a18

08006a3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e010      	b.n	8006a6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a80 <clear_lock+0x44>)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	4413      	add	r3, r2
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d105      	bne.n	8006a66 <clear_lock+0x2a>
 8006a5a:	4a09      	ldr	r2, [pc, #36]	@ (8006a80 <clear_lock+0x44>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d9eb      	bls.n	8006a4a <clear_lock+0xe>
	}
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000a18 	.word	0x20000a18

08006a84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	78db      	ldrb	r3, [r3, #3]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d034      	beq.n	8006b02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7858      	ldrb	r0, [r3, #1]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	f7ff fd3e 	bl	800652c <disk_write>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <sync_window+0x38>
			res = FR_DISK_ERR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e022      	b.n	8006b02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d217      	bcs.n	8006b02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	789b      	ldrb	r3, [r3, #2]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e010      	b.n	8006afc <sync_window+0x78>
					wsect += fs->fsize;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7858      	ldrb	r0, [r3, #1]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006aee:	2301      	movs	r3, #1
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	f7ff fd1b 	bl	800652c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d8eb      	bhi.n	8006ada <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d01b      	beq.n	8006b5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff ffad 	bl	8006a84 <sync_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d113      	bne.n	8006b5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7858      	ldrb	r0, [r3, #1]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006b3e:	2301      	movs	r3, #1
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	f7ff fcd3 	bl	80064ec <disk_read>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff ff87 	bl	8006a84 <sync_window>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d158      	bne.n	8006c32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d148      	bne.n	8006c1a <sync_fs+0xb2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d144      	bne.n	8006c1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3334      	adds	r3, #52	@ 0x34
 8006b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fda8 	bl	80066f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3334      	adds	r3, #52	@ 0x34
 8006ba4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ba8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff fd37 	bl	8006620 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3334      	adds	r3, #52	@ 0x34
 8006bb6:	4921      	ldr	r1, [pc, #132]	@ (8006c3c <sync_fs+0xd4>)
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fd4c 	bl	8006656 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3334      	adds	r3, #52	@ 0x34
 8006bc2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006bc6:	491e      	ldr	r1, [pc, #120]	@ (8006c40 <sync_fs+0xd8>)
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fd44 	bl	8006656 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3334      	adds	r3, #52	@ 0x34
 8006bd2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7ff fd3a 	bl	8006656 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3334      	adds	r3, #52	@ 0x34
 8006be6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7ff fd30 	bl	8006656 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7858      	ldrb	r0, [r3, #1]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f7ff fc8c 	bl	800652c <disk_write>
			fs->fsi_flag = 0;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fca2 	bl	800656c <disk_ioctl>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <sync_fs+0xca>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	41615252 	.word	0x41615252
 8006c40:	61417272 	.word	0x61417272

08006c44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	3b02      	subs	r3, #2
 8006c52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	3b02      	subs	r3, #2
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d301      	bcc.n	8006c64 <clust2sect+0x20>
 8006c60:	2300      	movs	r3, #0
 8006c62:	e008      	b.n	8006c76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	fb03 f202 	mul.w	r2, r3, r2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	4413      	add	r3, r2
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d904      	bls.n	8006ca2 <get_fat+0x20>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d302      	bcc.n	8006ca8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	e08e      	b.n	8006dc6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d061      	beq.n	8006d7a <get_fat+0xf8>
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	dc7b      	bgt.n	8006db2 <get_fat+0x130>
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d002      	beq.n	8006cc4 <get_fat+0x42>
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d041      	beq.n	8006d46 <get_fat+0xc4>
 8006cc2:	e076      	b.n	8006db2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	0a5b      	lsrs	r3, r3, #9
 8006cda:	4413      	add	r3, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f7ff ff14 	bl	8006b0c <move_window>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d166      	bne.n	8006db8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	60fa      	str	r2, [r7, #12]
 8006cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cfc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	0a5b      	lsrs	r3, r3, #9
 8006d06:	4413      	add	r3, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6938      	ldr	r0, [r7, #16]
 8006d0c:	f7ff fefe 	bl	8006b0c <move_window>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d152      	bne.n	8006dbc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <get_fat+0xba>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	e002      	b.n	8006d42 <get_fat+0xc0>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d42:	617b      	str	r3, [r7, #20]
			break;
 8006d44:	e03f      	b.n	8006dc6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	4413      	add	r3, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f7ff feda 	bl	8006b0c <move_window>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d130      	bne.n	8006dc0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fc1a 	bl	80065a8 <ld_word>
 8006d74:	4603      	mov	r3, r0
 8006d76:	617b      	str	r3, [r7, #20]
			break;
 8006d78:	e025      	b.n	8006dc6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	09db      	lsrs	r3, r3, #7
 8006d82:	4413      	add	r3, r2
 8006d84:	4619      	mov	r1, r3
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f7ff fec0 	bl	8006b0c <move_window>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d118      	bne.n	8006dc4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006da0:	4413      	add	r3, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff fc19 	bl	80065da <ld_dword>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006dae:	617b      	str	r3, [r7, #20]
			break;
 8006db0:	e009      	b.n	8006dc6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006db2:	2301      	movs	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	e006      	b.n	8006dc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006db8:	bf00      	nop
 8006dba:	e004      	b.n	8006dc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006dc4:	bf00      	nop
		}
	}

	return val;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b089      	sub	sp, #36	@ 0x24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ddc:	2302      	movs	r3, #2
 8006dde:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	f240 80d9 	bls.w	8006f9a <put_fat+0x1ca>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f080 80d3 	bcs.w	8006f9a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	f000 8096 	beq.w	8006f2a <put_fat+0x15a>
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	f300 80cb 	bgt.w	8006f9a <put_fat+0x1ca>
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <put_fat+0x3e>
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d06e      	beq.n	8006eea <put_fat+0x11a>
 8006e0c:	e0c5      	b.n	8006f9a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4413      	add	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	0a5b      	lsrs	r3, r3, #9
 8006e24:	4413      	add	r3, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fe6f 	bl	8006b0c <move_window>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e32:	7ffb      	ldrb	r3, [r7, #31]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 80a9 	bne.w	8006f8c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	1c59      	adds	r1, r3, #1
 8006e44:	61b9      	str	r1, [r7, #24]
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	4413      	add	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00d      	beq.n	8006e74 <put_fat+0xa4>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	b25a      	sxtb	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	e001      	b.n	8006e78 <put_fat+0xa8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	0a5b      	lsrs	r3, r3, #9
 8006e8a:	4413      	add	r3, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fe3c 	bl	8006b0c <move_window>
 8006e94:	4603      	mov	r3, r0
 8006e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e98:	7ffb      	ldrb	r3, [r7, #31]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d178      	bne.n	8006f90 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eaa:	4413      	add	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <put_fat+0xf0>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	e00e      	b.n	8006ede <put_fat+0x10e>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b25b      	sxtb	r3, r3
 8006ec6:	f023 030f 	bic.w	r3, r3, #15
 8006eca:	b25a      	sxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b25b      	sxtb	r3, r3
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	70da      	strb	r2, [r3, #3]
			break;
 8006ee8:	e057      	b.n	8006f9a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fe08 	bl	8006b0c <move_window>
 8006efc:	4603      	mov	r3, r0
 8006efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f00:	7ffb      	ldrb	r3, [r7, #31]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d146      	bne.n	8006f94 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006f14:	4413      	add	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	b292      	uxth	r2, r2
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fb7f 	bl	8006620 <st_word>
			fs->wflag = 1;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	70da      	strb	r2, [r3, #3]
			break;
 8006f28:	e037      	b.n	8006f9a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	09db      	lsrs	r3, r3, #7
 8006f32:	4413      	add	r3, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff fde8 	bl	8006b0c <move_window>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f40:	7ffb      	ldrb	r3, [r7, #31]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d128      	bne.n	8006f98 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f5a:	4413      	add	r3, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fb3c 	bl	80065da <ld_dword>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f68:	4323      	orrs	r3, r4
 8006f6a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f7a:	4413      	add	r3, r2
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fb69 	bl	8006656 <st_dword>
			fs->wflag = 1;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	70da      	strb	r2, [r3, #3]
			break;
 8006f8a:	e006      	b.n	8006f9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f8c:	bf00      	nop
 8006f8e:	e004      	b.n	8006f9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f90:	bf00      	nop
 8006f92:	e002      	b.n	8006f9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f98:	bf00      	nop
		}
	}
	return res;
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3724      	adds	r7, #36	@ 0x24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}

08006fa4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d904      	bls.n	8006fca <remove_chain+0x26>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d301      	bcc.n	8006fce <remove_chain+0x2a>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e04b      	b.n	8007066 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00c      	beq.n	8006fee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	69b8      	ldr	r0, [r7, #24]
 8006fdc:	f7ff fef8 	bl	8006dd0 <put_fat>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006fe4:	7ffb      	ldrb	r3, [r7, #31]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <remove_chain+0x4a>
 8006fea:	7ffb      	ldrb	r3, [r7, #31]
 8006fec:	e03b      	b.n	8007066 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fe46 	bl	8006c82 <get_fat>
 8006ff6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d031      	beq.n	8007062 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <remove_chain+0x64>
 8007004:	2302      	movs	r3, #2
 8007006:	e02e      	b.n	8007066 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d101      	bne.n	8007014 <remove_chain+0x70>
 8007010:	2301      	movs	r3, #1
 8007012:	e028      	b.n	8007066 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007014:	2200      	movs	r2, #0
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	69b8      	ldr	r0, [r7, #24]
 800701a:	f7ff fed9 	bl	8006dd0 <put_fat>
 800701e:	4603      	mov	r3, r0
 8007020:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007022:	7ffb      	ldrb	r3, [r7, #31]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <remove_chain+0x88>
 8007028:	7ffb      	ldrb	r3, [r7, #31]
 800702a:	e01c      	b.n	8007066 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	3b02      	subs	r3, #2
 8007036:	429a      	cmp	r2, r3
 8007038:	d20b      	bcs.n	8007052 <remove_chain+0xae>
			fs->free_clst++;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	791b      	ldrb	r3, [r3, #4]
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	b2da      	uxtb	r2, r3
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	429a      	cmp	r2, r3
 800705e:	d3c6      	bcc.n	8006fee <remove_chain+0x4a>
 8007060:	e000      	b.n	8007064 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007062:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b088      	sub	sp, #32
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10d      	bne.n	80070a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <create_chain+0x2c>
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	429a      	cmp	r2, r3
 8007098:	d31b      	bcc.n	80070d2 <create_chain+0x64>
 800709a:	2301      	movs	r3, #1
 800709c:	61bb      	str	r3, [r7, #24]
 800709e:	e018      	b.n	80070d2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff fded 	bl	8006c82 <get_fat>
 80070a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d801      	bhi.n	80070b4 <create_chain+0x46>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e070      	b.n	8007196 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ba:	d101      	bne.n	80070c0 <create_chain+0x52>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	e06a      	b.n	8007196 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d201      	bcs.n	80070ce <create_chain+0x60>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	e063      	b.n	8007196 <create_chain+0x128>
		scl = clst;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d307      	bcc.n	80070f6 <create_chain+0x88>
				ncl = 2;
 80070e6:	2302      	movs	r3, #2
 80070e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d901      	bls.n	80070f6 <create_chain+0x88>
 80070f2:	2300      	movs	r3, #0
 80070f4:	e04f      	b.n	8007196 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fdc2 	bl	8006c82 <get_fat>
 80070fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d003      	beq.n	8007114 <create_chain+0xa6>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d101      	bne.n	8007118 <create_chain+0xaa>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	e03e      	b.n	8007196 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	429a      	cmp	r2, r3
 800711e:	d1da      	bne.n	80070d6 <create_chain+0x68>
 8007120:	2300      	movs	r3, #0
 8007122:	e038      	b.n	8007196 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007124:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	69f9      	ldr	r1, [r7, #28]
 800712c:	6938      	ldr	r0, [r7, #16]
 800712e:	f7ff fe4f 	bl	8006dd0 <put_fat>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <create_chain+0xe2>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d006      	beq.n	8007150 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6938      	ldr	r0, [r7, #16]
 8007148:	f7ff fe42 	bl	8006dd0 <put_fat>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d116      	bne.n	8007184 <create_chain+0x116>
		fs->last_clst = ncl;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	3b02      	subs	r3, #2
 8007166:	429a      	cmp	r2, r3
 8007168:	d804      	bhi.n	8007174 <create_chain+0x106>
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	791b      	ldrb	r3, [r3, #4]
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	b2da      	uxtb	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	711a      	strb	r2, [r3, #4]
 8007182:	e007      	b.n	8007194 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d102      	bne.n	8007190 <create_chain+0x122>
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	e000      	b.n	8007192 <create_chain+0x124>
 8007190:	2301      	movs	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007194:	69fb      	ldr	r3, [r7, #28]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	3304      	adds	r3, #4
 80071b4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	8952      	ldrh	r2, [r2, #10]
 80071be:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	613a      	str	r2, [r7, #16]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <clmt_clust+0x3a>
 80071d4:	2300      	movs	r3, #0
 80071d6:	e010      	b.n	80071fa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d307      	bcc.n	80071f0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3304      	adds	r3, #4
 80071ec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071ee:	e7e9      	b.n	80071c4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80071f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4413      	add	r3, r2
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800721c:	d204      	bcs.n	8007228 <dir_sdi+0x22>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007228:	2302      	movs	r3, #2
 800722a:	e063      	b.n	80072f4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <dir_sdi+0x46>
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d902      	bls.n	800724c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10c      	bne.n	800726c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	8912      	ldrh	r2, [r2, #8]
 800725a:	4293      	cmp	r3, r2
 800725c:	d301      	bcc.n	8007262 <dir_sdi+0x5c>
 800725e:	2302      	movs	r3, #2
 8007260:	e048      	b.n	80072f4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	61da      	str	r2, [r3, #28]
 800726a:	e029      	b.n	80072c0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	895b      	ldrh	r3, [r3, #10]
 8007270:	025b      	lsls	r3, r3, #9
 8007272:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007274:	e019      	b.n	80072aa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6979      	ldr	r1, [r7, #20]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff fd01 	bl	8006c82 <get_fat>
 8007280:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d101      	bne.n	800728e <dir_sdi+0x88>
 800728a:	2301      	movs	r3, #1
 800728c:	e032      	b.n	80072f4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d904      	bls.n	800729e <dir_sdi+0x98>
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	429a      	cmp	r2, r3
 800729c:	d301      	bcc.n	80072a2 <dir_sdi+0x9c>
 800729e:	2302      	movs	r3, #2
 80072a0:	e028      	b.n	80072f4 <dir_sdi+0xee>
			ofs -= csz;
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d2e1      	bcs.n	8007276 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80072b2:	6979      	ldr	r1, [r7, #20]
 80072b4:	6938      	ldr	r0, [r7, #16]
 80072b6:	f7ff fcc5 	bl	8006c44 <clust2sect>
 80072ba:	4602      	mov	r2, r0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <dir_sdi+0xcc>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e010      	b.n	80072f4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	441a      	add	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ec:	441a      	add	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	3320      	adds	r3, #32
 8007312:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <dir_next+0x28>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007322:	d301      	bcc.n	8007328 <dir_next+0x2c>
 8007324:	2304      	movs	r3, #4
 8007326:	e0aa      	b.n	800747e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 8098 	bne.w	8007464 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	8912      	ldrh	r2, [r2, #8]
 800734e:	4293      	cmp	r3, r2
 8007350:	f0c0 8088 	bcc.w	8007464 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	61da      	str	r2, [r3, #28]
 800735a:	2304      	movs	r3, #4
 800735c:	e08f      	b.n	800747e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0a5b      	lsrs	r3, r3, #9
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	8952      	ldrh	r2, [r2, #10]
 8007366:	3a01      	subs	r2, #1
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d17a      	bne.n	8007464 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f7ff fc83 	bl	8006c82 <get_fat>
 800737c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d801      	bhi.n	8007388 <dir_next+0x8c>
 8007384:	2302      	movs	r3, #2
 8007386:	e07a      	b.n	800747e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d101      	bne.n	8007394 <dir_next+0x98>
 8007390:	2301      	movs	r3, #1
 8007392:	e074      	b.n	800747e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	429a      	cmp	r2, r3
 800739c:	d358      	bcc.n	8007450 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	61da      	str	r2, [r3, #28]
 80073aa:	2304      	movs	r3, #4
 80073ac:	e067      	b.n	800747e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7ff fe59 	bl	800706e <create_chain>
 80073bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <dir_next+0xcc>
 80073c4:	2307      	movs	r3, #7
 80073c6:	e05a      	b.n	800747e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <dir_next+0xd6>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e055      	b.n	800747e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d101      	bne.n	80073de <dir_next+0xe2>
 80073da:	2301      	movs	r3, #1
 80073dc:	e04f      	b.n	800747e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff fb50 	bl	8006a84 <sync_window>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <dir_next+0xf2>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e047      	b.n	800747e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3334      	adds	r3, #52	@ 0x34
 80073f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff f979 	bl	80066f0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fc1d 	bl	8006c44 <clust2sect>
 800740a:	4602      	mov	r2, r0
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007410:	e012      	b.n	8007438 <dir_next+0x13c>
						fs->wflag = 1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff fb33 	bl	8006a84 <sync_window>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <dir_next+0x12c>
 8007424:	2301      	movs	r3, #1
 8007426:	e02a      	b.n	800747e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3301      	adds	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	895b      	ldrh	r3, [r3, #10]
 800743c:	461a      	mov	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	4293      	cmp	r3, r2
 8007442:	d3e6      	bcc.n	8007412 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fbf3 	bl	8006c44 <clust2sect>
 800745e:	4602      	mov	r2, r0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff feb4 	bl	8007206 <dir_sdi>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d12b      	bne.n	8007500 <dir_alloc+0x7a>
		n = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fb2a 	bl	8006b0c <move_window>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d11d      	bne.n	80074fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2be5      	cmp	r3, #229	@ 0xe5
 80074ca:	d004      	beq.n	80074d6 <dir_alloc+0x50>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d107      	bne.n	80074e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d102      	bne.n	80074ea <dir_alloc+0x64>
 80074e4:	e00c      	b.n	8007500 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074ea:	2101      	movs	r1, #1
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ff05 	bl	80072fc <dir_next>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0d7      	beq.n	80074ac <dir_alloc+0x26>
 80074fc:	e000      	b.n	8007500 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80074fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d101      	bne.n	800750a <dir_alloc+0x84>
 8007506:	2307      	movs	r3, #7
 8007508:	75fb      	strb	r3, [r7, #23]
	return res;
 800750a:	7dfb      	ldrb	r3, [r7, #23]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	331a      	adds	r3, #26
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff f840 	bl	80065a8 <ld_word>
 8007528:	4603      	mov	r3, r0
 800752a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d109      	bne.n	8007548 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff f835 	bl	80065a8 <ld_word>
 800753e:	4603      	mov	r3, r0
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007548:	68fb      	ldr	r3, [r7, #12]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	331a      	adds	r3, #26
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	b292      	uxth	r2, r2
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff f859 	bl	8006620 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b03      	cmp	r3, #3
 8007574:	d109      	bne.n	800758a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f103 0214 	add.w	r2, r3, #20
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	b29b      	uxth	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7ff f84b 	bl	8006620 <st_word>
	}
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	331a      	adds	r3, #26
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f800 	bl	80065a8 <ld_word>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <cmp_lfn+0x1e>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e059      	b.n	8007666 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075c8:	2301      	movs	r3, #1
 80075ca:	81fb      	strh	r3, [r7, #14]
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	e033      	b.n	800763a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80075d2:	4a27      	ldr	r2, [pc, #156]	@ (8007670 <cmp_lfn+0xdc>)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4413      	add	r3, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe ffe1 	bl	80065a8 <ld_word>
 80075e6:	4603      	mov	r3, r0
 80075e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01a      	beq.n	8007626 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80075f4:	d812      	bhi.n	800761c <cmp_lfn+0x88>
 80075f6:	89bb      	ldrh	r3, [r7, #12]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fd17 	bl	800902c <ff_wtoupper>
 80075fe:	4603      	mov	r3, r0
 8007600:	461c      	mov	r4, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	617a      	str	r2, [r7, #20]
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fd0b 	bl	800902c <ff_wtoupper>
 8007616:	4603      	mov	r3, r0
 8007618:	429c      	cmp	r4, r3
 800761a:	d001      	beq.n	8007620 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800761c:	2300      	movs	r3, #0
 800761e:	e022      	b.n	8007666 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	81fb      	strh	r3, [r7, #14]
 8007624:	e006      	b.n	8007634 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007626:	89bb      	ldrh	r3, [r7, #12]
 8007628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800762c:	4293      	cmp	r3, r2
 800762e:	d001      	beq.n	8007634 <cmp_lfn+0xa0>
 8007630:	2300      	movs	r3, #0
 8007632:	e018      	b.n	8007666 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3301      	adds	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b0c      	cmp	r3, #12
 800763e:	d9c8      	bls.n	80075d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <cmp_lfn+0xd0>
 800764c:	89fb      	ldrh	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <cmp_lfn+0xd0>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <cmp_lfn+0xd0>
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007664:	2301      	movs	r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd90      	pop	{r4, r7, pc}
 800766e:	bf00      	nop
 8007670:	0800ec4c 	.word	0x0800ec4c

08007674 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	4611      	mov	r1, r2
 8007680:	461a      	mov	r2, r3
 8007682:	460b      	mov	r3, r1
 8007684:	71fb      	strb	r3, [r7, #7]
 8007686:	4613      	mov	r3, r2
 8007688:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	330d      	adds	r3, #13
 800768e:	79ba      	ldrb	r2, [r7, #6]
 8007690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	330b      	adds	r3, #11
 8007696:	220f      	movs	r2, #15
 8007698:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	330c      	adds	r3, #12
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	331a      	adds	r3, #26
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe ffb9 	bl	8006620 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	1e5a      	subs	r2, r3, #1
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	82fb      	strh	r3, [r7, #22]
 80076c2:	2300      	movs	r3, #0
 80076c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80076c6:	8afb      	ldrh	r3, [r7, #22]
 80076c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <put_lfn+0x6c>
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	61fa      	str	r2, [r7, #28]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4413      	add	r3, r2
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80076e0:	4a17      	ldr	r2, [pc, #92]	@ (8007740 <put_lfn+0xcc>)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	4413      	add	r3, r2
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	8afa      	ldrh	r2, [r7, #22]
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe ff94 	bl	8006620 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80076f8:	8afb      	ldrh	r3, [r7, #22]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <put_lfn+0x90>
 80076fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007702:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	3301      	adds	r3, #1
 8007708:	61bb      	str	r3, [r7, #24]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b0c      	cmp	r3, #12
 800770e:	d9da      	bls.n	80076c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007710:	8afb      	ldrh	r3, [r7, #22]
 8007712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007716:	4293      	cmp	r3, r2
 8007718:	d006      	beq.n	8007728 <put_lfn+0xb4>
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <put_lfn+0xbc>
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	79fa      	ldrb	r2, [r7, #7]
 8007734:	701a      	strb	r2, [r3, #0]
}
 8007736:	bf00      	nop
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	0800ec4c 	.word	0x0800ec4c

08007744 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	@ 0x30
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007752:	220b      	movs	r2, #11
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7fe ffa9 	bl	80066ae <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b05      	cmp	r3, #5
 8007760:	d92b      	bls.n	80077ba <gen_numname+0x76>
		sr = seq;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007766:	e022      	b.n	80077ae <gen_numname+0x6a>
			wc = *lfn++;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	1c9a      	adds	r2, r3, #2
 800776c:	607a      	str	r2, [r7, #4]
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007772:	2300      	movs	r3, #0
 8007774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007776:	e017      	b.n	80077a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	005a      	lsls	r2, r3, #1
 800777c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007786:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <gen_numname+0x5e>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800779c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80077a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	3301      	adds	r3, #1
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d9e4      	bls.n	8007778 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d8      	bne.n	8007768 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80077ba:	2307      	movs	r3, #7
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	3330      	adds	r3, #48	@ 0x30
 80077ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80077ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077d2:	2b39      	cmp	r3, #57	@ 0x39
 80077d4:	d904      	bls.n	80077e0 <gen_numname+0x9c>
 80077d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077da:	3307      	adds	r3, #7
 80077dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80077e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e2:	1e5a      	subs	r2, r3, #1
 80077e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80077e6:	3330      	adds	r3, #48	@ 0x30
 80077e8:	443b      	add	r3, r7
 80077ea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80077ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	091b      	lsrs	r3, r3, #4
 80077f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1df      	bne.n	80077be <gen_numname+0x7a>
	ns[i] = '~';
 80077fe:	f107 0214 	add.w	r2, r7, #20
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	4413      	add	r3, r2
 8007806:	227e      	movs	r2, #126	@ 0x7e
 8007808:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
 800780e:	e002      	b.n	8007816 <gen_numname+0xd2>
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	3301      	adds	r3, #1
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
 8007816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781a:	429a      	cmp	r2, r3
 800781c:	d205      	bcs.n	800782a <gen_numname+0xe6>
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b20      	cmp	r3, #32
 8007828:	d1f2      	bne.n	8007810 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	2b07      	cmp	r3, #7
 800782e:	d807      	bhi.n	8007840 <gen_numname+0xfc>
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007836:	3330      	adds	r3, #48	@ 0x30
 8007838:	443b      	add	r3, r7
 800783a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800783e:	e000      	b.n	8007842 <gen_numname+0xfe>
 8007840:	2120      	movs	r1, #32
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	627a      	str	r2, [r7, #36]	@ 0x24
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	460a      	mov	r2, r1
 800784e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	2b07      	cmp	r3, #7
 8007854:	d9e9      	bls.n	800782a <gen_numname+0xe6>
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	3730      	adds	r7, #48	@ 0x30
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800786c:	230b      	movs	r3, #11
 800786e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	0852      	lsrs	r2, r2, #1
 8007876:	01db      	lsls	r3, r3, #7
 8007878:	4313      	orrs	r3, r2
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	6079      	str	r1, [r7, #4]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	4413      	add	r3, r2
 8007886:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3b01      	subs	r3, #1
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ed      	bne.n	8007870 <sum_sfn+0x10>
	return sum;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80078b0:	2100      	movs	r1, #0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fca7 	bl	8007206 <dir_sdi>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <dir_find+0x24>
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	e0a9      	b.n	8007a1a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078c6:	23ff      	movs	r3, #255	@ 0xff
 80078c8:	753b      	strb	r3, [r7, #20]
 80078ca:	7d3b      	ldrb	r3, [r7, #20]
 80078cc:	757b      	strb	r3, [r7, #21]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	4619      	mov	r1, r3
 80078dc:	6938      	ldr	r0, [r7, #16]
 80078de:	f7ff f915 	bl	8006b0c <move_window>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f040 8090 	bne.w	8007a0e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80078f6:	7dbb      	ldrb	r3, [r7, #22]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <dir_find+0x60>
 80078fc:	2304      	movs	r3, #4
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e08a      	b.n	8007a18 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	330b      	adds	r3, #11
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7bfa      	ldrb	r2, [r7, #15]
 8007914:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007916:	7dbb      	ldrb	r3, [r7, #22]
 8007918:	2be5      	cmp	r3, #229	@ 0xe5
 800791a:	d007      	beq.n	800792c <dir_find+0x8a>
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <dir_find+0x98>
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d006      	beq.n	800793a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800792c:	23ff      	movs	r3, #255	@ 0xff
 800792e:	757b      	strb	r3, [r7, #21]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	631a      	str	r2, [r3, #48]	@ 0x30
 8007938:	e05e      	b.n	80079f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b0f      	cmp	r3, #15
 800793e:	d136      	bne.n	80079ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d154      	bne.n	80079f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800794e:	7dbb      	ldrb	r3, [r7, #22]
 8007950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	7b5b      	ldrb	r3, [r3, #13]
 800795e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007960:	7dbb      	ldrb	r3, [r7, #22]
 8007962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007966:	75bb      	strb	r3, [r7, #22]
 8007968:	7dbb      	ldrb	r3, [r7, #22]
 800796a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007974:	7dba      	ldrb	r2, [r7, #22]
 8007976:	7d7b      	ldrb	r3, [r7, #21]
 8007978:	429a      	cmp	r2, r3
 800797a:	d115      	bne.n	80079a8 <dir_find+0x106>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	330d      	adds	r3, #13
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	7d3a      	ldrb	r2, [r7, #20]
 8007986:	429a      	cmp	r2, r3
 8007988:	d10e      	bne.n	80079a8 <dir_find+0x106>
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f7ff fdfd 	bl	8007594 <cmp_lfn>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <dir_find+0x106>
 80079a0:	7d7b      	ldrb	r3, [r7, #21]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	e000      	b.n	80079aa <dir_find+0x108>
 80079a8:	23ff      	movs	r3, #255	@ 0xff
 80079aa:	757b      	strb	r3, [r7, #21]
 80079ac:	e024      	b.n	80079f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80079ae:	7d7b      	ldrb	r3, [r7, #21]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <dir_find+0x126>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ff51 	bl	8007860 <sum_sfn>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	7d3b      	ldrb	r3, [r7, #20]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d024      	beq.n	8007a12 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <dir_find+0x14a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a18      	ldr	r0, [r3, #32]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3324      	adds	r3, #36	@ 0x24
 80079de:	220b      	movs	r2, #11
 80079e0:	4619      	mov	r1, r3
 80079e2:	f7fe fea0 	bl	8006726 <mem_cmp>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d014      	beq.n	8007a16 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079ec:	23ff      	movs	r3, #255	@ 0xff
 80079ee:	757b      	strb	r3, [r7, #21]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079f8:	2100      	movs	r1, #0
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fc7e 	bl	80072fc <dir_next>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f43f af65 	beq.w	80078d6 <dir_find+0x34>
 8007a0c:	e004      	b.n	8007a18 <dir_find+0x176>
		if (res != FR_OK) break;
 8007a0e:	bf00      	nop
 8007a10:	e002      	b.n	8007a18 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a16:	bf00      	nop

	return res;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08c      	sub	sp, #48	@ 0x30
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a38:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <dir_register+0x20>
 8007a40:	2306      	movs	r3, #6
 8007a42:	e0e0      	b.n	8007c06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007a44:	2300      	movs	r3, #0
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a48:	e002      	b.n	8007a50 <dir_register+0x2c>
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f4      	bne.n	8007a4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007a66:	f107 030c 	add.w	r3, r7, #12
 8007a6a:	220c      	movs	r2, #12
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fe1e 	bl	80066ae <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d032      	beq.n	8007ae2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2240      	movs	r2, #64	@ 0x40
 8007a80:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007a84:	2301      	movs	r3, #1
 8007a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a88:	e016      	b.n	8007ab8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	f107 010c 	add.w	r1, r7, #12
 8007a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9a:	f7ff fe53 	bl	8007744 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff feff 	bl	80078a2 <dir_find>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	2b63      	cmp	r3, #99	@ 0x63
 8007abc:	d9e5      	bls.n	8007a8a <dir_register+0x66>
 8007abe:	e000      	b.n	8007ac2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007ac0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac4:	2b64      	cmp	r3, #100	@ 0x64
 8007ac6:	d101      	bne.n	8007acc <dir_register+0xa8>
 8007ac8:	2307      	movs	r3, #7
 8007aca:	e09c      	b.n	8007c06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007acc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d002      	beq.n	8007ada <dir_register+0xb6>
 8007ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ad8:	e095      	b.n	8007c06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007ada:	7dfa      	ldrb	r2, [r7, #23]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <dir_register+0xd8>
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	330c      	adds	r3, #12
 8007af0:	4a47      	ldr	r2, [pc, #284]	@ (8007c10 <dir_register+0x1ec>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	3301      	adds	r3, #1
 8007afa:	e000      	b.n	8007afe <dir_register+0xda>
 8007afc:	2301      	movs	r3, #1
 8007afe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007b00:	6a39      	ldr	r1, [r7, #32]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff fcbf 	bl	8007486 <dir_alloc>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d148      	bne.n	8007ba8 <dir_register+0x184>
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	623b      	str	r3, [r7, #32]
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d042      	beq.n	8007ba8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695a      	ldr	r2, [r3, #20]
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	015b      	lsls	r3, r3, #5
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff fb69 	bl	8007206 <dir_sdi>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d132      	bne.n	8007ba8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3324      	adds	r3, #36	@ 0x24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fe8a 	bl	8007860 <sum_sfn>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4619      	mov	r1, r3
 8007b56:	69f8      	ldr	r0, [r7, #28]
 8007b58:	f7fe ffd8 	bl	8006b0c <move_window>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d11d      	bne.n	8007ba6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	68d8      	ldr	r0, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a19      	ldr	r1, [r3, #32]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	7efb      	ldrb	r3, [r7, #27]
 8007b78:	f7ff fd7c 	bl	8007674 <put_lfn>
				fs->wflag = 1;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007b82:	2100      	movs	r1, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fbb9 	bl	80072fc <dir_next>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d107      	bne.n	8007ba8 <dir_register+0x184>
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1d5      	bne.n	8007b50 <dir_register+0x12c>
 8007ba4:	e000      	b.n	8007ba8 <dir_register+0x184>
				if (res != FR_OK) break;
 8007ba6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d128      	bne.n	8007c02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	69f8      	ldr	r0, [r7, #28]
 8007bb8:	f7fe ffa8 	bl	8006b0c <move_window>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11b      	bne.n	8007c02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe fd8c 	bl	80066f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a18      	ldr	r0, [r3, #32]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3324      	adds	r3, #36	@ 0x24
 8007be0:	220b      	movs	r2, #11
 8007be2:	4619      	mov	r1, r3
 8007be4:	f7fe fd63 	bl	80066ae <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	f002 0218 	and.w	r2, r2, #24
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3730      	adds	r7, #48	@ 0x30
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	4ec4ec4f 	.word	0x4ec4ec4f

08007c14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	@ 0x28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	61ba      	str	r2, [r7, #24]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c44:	2b1f      	cmp	r3, #31
 8007c46:	d940      	bls.n	8007cca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007c48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c4c:	d006      	beq.n	8007c5c <create_name+0x48>
 8007c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c50:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c52:	d110      	bne.n	8007c76 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c54:	e002      	b.n	8007c5c <create_name+0x48>
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c66:	d0f6      	beq.n	8007c56 <create_name+0x42>
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c72:	d0f0      	beq.n	8007c56 <create_name+0x42>
			break;
 8007c74:	e02a      	b.n	8007ccc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c7a:	d901      	bls.n	8007c80 <create_name+0x6c>
 8007c7c:	2306      	movs	r3, #6
 8007c7e:	e17d      	b.n	8007f7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c88:	2101      	movs	r1, #1
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 f992 	bl	8008fb4 <ff_convert>
 8007c90:	4603      	mov	r3, r0
 8007c92:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <create_name+0x8a>
 8007c9a:	2306      	movs	r3, #6
 8007c9c:	e16e      	b.n	8007f7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ca2:	d809      	bhi.n	8007cb8 <create_name+0xa4>
 8007ca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	488d      	ldr	r0, [pc, #564]	@ (8007ee0 <create_name+0x2cc>)
 8007caa:	f7fe fd63 	bl	8006774 <chk_chr>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <create_name+0xa4>
 8007cb4:	2306      	movs	r3, #6
 8007cb6:	e161      	b.n	8007f7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	617a      	str	r2, [r7, #20]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007cc6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007cc8:	e7b4      	b.n	8007c34 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007cca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	441a      	add	r2, r3
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007cd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cd8:	2b1f      	cmp	r3, #31
 8007cda:	d801      	bhi.n	8007ce0 <create_name+0xcc>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	e000      	b.n	8007ce2 <create_name+0xce>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007ce6:	e011      	b.n	8007d0c <create_name+0xf8>
		w = lfn[di - 1];
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d002      	beq.n	8007d06 <create_name+0xf2>
 8007d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d04:	d106      	bne.n	8007d14 <create_name+0x100>
		di--;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1ea      	bne.n	8007ce8 <create_name+0xd4>
 8007d12:	e000      	b.n	8007d16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007d14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <create_name+0x118>
 8007d28:	2306      	movs	r3, #6
 8007d2a:	e127      	b.n	8007f7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3324      	adds	r3, #36	@ 0x24
 8007d30:	220b      	movs	r2, #11
 8007d32:	2120      	movs	r1, #32
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fcdb 	bl	80066f0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e002      	b.n	8007d46 <create_name+0x132>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d0f5      	beq.n	8007d40 <create_name+0x12c>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d60:	d0ee      	beq.n	8007d40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <create_name+0x168>
 8007d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d6c:	f043 0303 	orr.w	r3, r3, #3
 8007d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007d74:	e002      	b.n	8007d7c <create_name+0x168>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <create_name+0x182>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d94:	d1ef      	bne.n	8007d76 <create_name+0x162>

	i = b = 0; ni = 8;
 8007d96:	2300      	movs	r3, #0
 8007d98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	623b      	str	r3, [r7, #32]
 8007da0:	2308      	movs	r3, #8
 8007da2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	61ba      	str	r2, [r7, #24]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007db4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 8090 	beq.w	8007edc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007dbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d006      	beq.n	8007dd0 <create_name+0x1bc>
 8007dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dc6:	d10a      	bne.n	8007dde <create_name+0x1ca>
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d006      	beq.n	8007dde <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dd4:	f043 0303 	orr.w	r3, r3, #3
 8007dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ddc:	e07d      	b.n	8007eda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d203      	bcs.n	8007dee <create_name+0x1da>
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d123      	bne.n	8007e36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	2b0b      	cmp	r3, #11
 8007df2:	d106      	bne.n	8007e02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df8:	f043 0303 	orr.w	r3, r3, #3
 8007dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e00:	e075      	b.n	8007eee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d005      	beq.n	8007e16 <create_name+0x202>
 8007e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e0e:	f043 0303 	orr.w	r3, r3, #3
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d866      	bhi.n	8007eec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	2308      	movs	r3, #8
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	230b      	movs	r3, #11
 8007e28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007e34:	e051      	b.n	8007eda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e3a:	d914      	bls.n	8007e66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007e3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 f8b7 	bl	8008fb4 <ff_convert>
 8007e46:	4603      	mov	r3, r0
 8007e48:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <create_name+0x246>
 8007e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e52:	3b80      	subs	r3, #128	@ 0x80
 8007e54:	4a23      	ldr	r2, [pc, #140]	@ (8007ee4 <create_name+0x2d0>)
 8007e56:	5cd3      	ldrb	r3, [r2, r3]
 8007e58:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e5e:	f043 0302 	orr.w	r3, r3, #2
 8007e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007e66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <create_name+0x268>
 8007e6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e6e:	4619      	mov	r1, r3
 8007e70:	481d      	ldr	r0, [pc, #116]	@ (8007ee8 <create_name+0x2d4>)
 8007e72:	f7fe fc7f 	bl	8006774 <chk_chr>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007e7c:	235f      	movs	r3, #95	@ 0x5f
 8007e7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e84:	f043 0303 	orr.w	r3, r3, #3
 8007e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e8c:	e01b      	b.n	8007ec6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e90:	2b40      	cmp	r3, #64	@ 0x40
 8007e92:	d909      	bls.n	8007ea8 <create_name+0x294>
 8007e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e96:	2b5a      	cmp	r3, #90	@ 0x5a
 8007e98:	d806      	bhi.n	8007ea8 <create_name+0x294>
					b |= 2;
 8007e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e9e:	f043 0302 	orr.w	r3, r3, #2
 8007ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ea6:	e00e      	b.n	8007ec6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007ea8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007eaa:	2b60      	cmp	r3, #96	@ 0x60
 8007eac:	d90b      	bls.n	8007ec6 <create_name+0x2b2>
 8007eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007eb0:	2b7a      	cmp	r3, #122	@ 0x7a
 8007eb2:	d808      	bhi.n	8007ec6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ec2:	3b20      	subs	r3, #32
 8007ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	623a      	str	r2, [r7, #32]
 8007ecc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ece:	b2d1      	uxtb	r1, r2
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	460a      	mov	r2, r1
 8007ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007eda:	e763      	b.n	8007da4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007edc:	bf00      	nop
 8007ede:	e006      	b.n	8007eee <create_name+0x2da>
 8007ee0:	0800ea08 	.word	0x0800ea08
 8007ee4:	0800ebcc 	.word	0x0800ebcc
 8007ee8:	0800ea14 	.word	0x0800ea14
			if (si > di) break;			/* No extension */
 8007eec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ef4:	2be5      	cmp	r3, #229	@ 0xe5
 8007ef6:	d103      	bne.n	8007f00 <create_name+0x2ec>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2205      	movs	r2, #5
 8007efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2b08      	cmp	r3, #8
 8007f04:	d104      	bne.n	8007f10 <create_name+0x2fc>
 8007f06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007f10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	d005      	beq.n	8007f28 <create_name+0x314>
 8007f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d105      	bne.n	8007f34 <create_name+0x320>
 8007f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f2c:	f043 0302 	orr.w	r3, r3, #2
 8007f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d117      	bne.n	8007f70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007f40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d105      	bne.n	8007f58 <create_name+0x344>
 8007f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f50:	f043 0310 	orr.w	r3, r3, #16
 8007f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007f58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f5c:	f003 030c 	and.w	r3, r3, #12
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d105      	bne.n	8007f70 <create_name+0x35c>
 8007f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f68:	f043 0308 	orr.w	r3, r3, #8
 8007f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007f76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007f7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	@ 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007f98:	e002      	b.n	8007fa0 <follow_path+0x1c>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8007fa6:	d0f8      	beq.n	8007f9a <follow_path+0x16>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b5c      	cmp	r3, #92	@ 0x5c
 8007fae:	d0f4      	beq.n	8007f9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b1f      	cmp	r3, #31
 8007fbc:	d80a      	bhi.n	8007fd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2280      	movs	r2, #128	@ 0x80
 8007fc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff f91c 	bl	8007206 <dir_sdi>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]
 8007fd2:	e043      	b.n	800805c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fe1b 	bl	8007c14 <create_name>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d134      	bne.n	8008052 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fc5a 	bl	80078a2 <dir_find>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ff8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b04      	cmp	r3, #4
 8008004:	d127      	bne.n	8008056 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d122      	bne.n	8008056 <follow_path+0xd2>
 8008010:	2305      	movs	r3, #5
 8008012:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008014:	e01f      	b.n	8008056 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11c      	bne.n	800805a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	799b      	ldrb	r3, [r3, #6]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800802c:	2305      	movs	r3, #5
 800802e:	75fb      	strb	r3, [r7, #23]
 8008030:	e014      	b.n	800805c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008040:	4413      	add	r3, r2
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff fa65 	bl	8007514 <ld_clust>
 800804a:	4602      	mov	r2, r0
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008050:	e7c0      	b.n	8007fd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008052:	bf00      	nop
 8008054:	e002      	b.n	800805c <follow_path+0xd8>
				break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800805a:	bf00      	nop
			}
		}
	}

	return res;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d031      	beq.n	80080e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	e002      	b.n	800808a <get_ldnumber+0x24>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3301      	adds	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b1f      	cmp	r3, #31
 8008090:	d903      	bls.n	800809a <get_ldnumber+0x34>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b3a      	cmp	r3, #58	@ 0x3a
 8008098:	d1f4      	bne.n	8008084 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b3a      	cmp	r3, #58	@ 0x3a
 80080a0:	d11c      	bne.n	80080dc <get_ldnumber+0x76>
			tp = *path;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	60fa      	str	r2, [r7, #12]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	3b30      	subs	r3, #48	@ 0x30
 80080b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b09      	cmp	r3, #9
 80080b8:	d80e      	bhi.n	80080d8 <get_ldnumber+0x72>
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d10a      	bne.n	80080d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d107      	bne.n	80080d8 <get_ldnumber+0x72>
					vol = (int)i;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	3301      	adds	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	e002      	b.n	80080e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080e0:	693b      	ldr	r3, [r7, #16]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	70da      	strb	r2, [r3, #3]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fe fcfe 	bl	8006b0c <move_window>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <check_fs+0x2a>
 8008116:	2304      	movs	r3, #4
 8008118:	e038      	b.n	800818c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3334      	adds	r3, #52	@ 0x34
 800811e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fa40 	bl	80065a8 <ld_word>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008130:	429a      	cmp	r2, r3
 8008132:	d001      	beq.n	8008138 <check_fs+0x48>
 8008134:	2303      	movs	r3, #3
 8008136:	e029      	b.n	800818c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800813e:	2be9      	cmp	r3, #233	@ 0xe9
 8008140:	d009      	beq.n	8008156 <check_fs+0x66>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008148:	2beb      	cmp	r3, #235	@ 0xeb
 800814a:	d11e      	bne.n	800818a <check_fs+0x9a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008152:	2b90      	cmp	r3, #144	@ 0x90
 8008154:	d119      	bne.n	800818a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3334      	adds	r3, #52	@ 0x34
 800815a:	3336      	adds	r3, #54	@ 0x36
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fa3c 	bl	80065da <ld_dword>
 8008162:	4603      	mov	r3, r0
 8008164:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008168:	4a0a      	ldr	r2, [pc, #40]	@ (8008194 <check_fs+0xa4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d101      	bne.n	8008172 <check_fs+0x82>
 800816e:	2300      	movs	r3, #0
 8008170:	e00c      	b.n	800818c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3334      	adds	r3, #52	@ 0x34
 8008176:	3352      	adds	r3, #82	@ 0x52
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fa2e 	bl	80065da <ld_dword>
 800817e:	4603      	mov	r3, r0
 8008180:	4a05      	ldr	r2, [pc, #20]	@ (8008198 <check_fs+0xa8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d101      	bne.n	800818a <check_fs+0x9a>
 8008186:	2300      	movs	r3, #0
 8008188:	e000      	b.n	800818c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800818a:	2302      	movs	r3, #2
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	00544146 	.word	0x00544146
 8008198:	33544146 	.word	0x33544146

0800819c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b096      	sub	sp, #88	@ 0x58
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff ff58 	bl	8008066 <get_ldnumber>
 80081b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da01      	bge.n	80081c2 <find_volume+0x26>
 80081be:	230b      	movs	r3, #11
 80081c0:	e22d      	b.n	800861e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081c2:	4aa1      	ldr	r2, [pc, #644]	@ (8008448 <find_volume+0x2ac>)
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <find_volume+0x3a>
 80081d2:	230c      	movs	r3, #12
 80081d4:	e223      	b.n	800861e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01a      	beq.n	8008222 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80081ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe f939 	bl	8006468 <disk_status>
 80081f6:	4603      	mov	r3, r0
 80081f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80081fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10c      	bne.n	8008222 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <find_volume+0x82>
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800821a:	230a      	movs	r3, #10
 800821c:	e1ff      	b.n	800861e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800821e:	2300      	movs	r3, #0
 8008220:	e1fd      	b.n	800861e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822a:	b2da      	uxtb	r2, r3
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe f931 	bl	800649c <disk_initialize>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008240:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800824c:	2303      	movs	r3, #3
 800824e:	e1e6      	b.n	800861e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <find_volume+0xca>
 8008256:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008262:	230a      	movs	r3, #10
 8008264:	e1db      	b.n	800861e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800826a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800826c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800826e:	f7ff ff3f 	bl	80080f0 <check_fs>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008278:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800827c:	2b02      	cmp	r3, #2
 800827e:	d149      	bne.n	8008314 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008280:	2300      	movs	r3, #0
 8008282:	643b      	str	r3, [r7, #64]	@ 0x40
 8008284:	e01e      	b.n	80082c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800828c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008294:	4413      	add	r3, r2
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	3304      	adds	r3, #4
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d006      	beq.n	80082b0 <find_volume+0x114>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	3308      	adds	r3, #8
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe f997 	bl	80065da <ld_dword>
 80082ac:	4602      	mov	r2, r0
 80082ae:	e000      	b.n	80082b2 <find_volume+0x116>
 80082b0:	2200      	movs	r2, #0
 80082b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3358      	adds	r3, #88	@ 0x58
 80082b8:	443b      	add	r3, r7
 80082ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c0:	3301      	adds	r3, #1
 80082c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d9dd      	bls.n	8008286 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082ca:	2300      	movs	r3, #0
 80082cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80082ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <find_volume+0x13e>
 80082d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082d6:	3b01      	subs	r3, #1
 80082d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	3358      	adds	r3, #88	@ 0x58
 80082e0:	443b      	add	r3, r7
 80082e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80082e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <find_volume+0x15e>
 80082ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082f2:	f7ff fefd 	bl	80080f0 <check_fs>
 80082f6:	4603      	mov	r3, r0
 80082f8:	e000      	b.n	80082fc <find_volume+0x160>
 80082fa:	2303      	movs	r3, #3
 80082fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008304:	2b01      	cmp	r3, #1
 8008306:	d905      	bls.n	8008314 <find_volume+0x178>
 8008308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800830a:	3301      	adds	r3, #1
 800830c:	643b      	str	r3, [r7, #64]	@ 0x40
 800830e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008310:	2b03      	cmp	r3, #3
 8008312:	d9e2      	bls.n	80082da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008314:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008318:	2b04      	cmp	r3, #4
 800831a:	d101      	bne.n	8008320 <find_volume+0x184>
 800831c:	2301      	movs	r3, #1
 800831e:	e17e      	b.n	800861e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008320:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008324:	2b01      	cmp	r3, #1
 8008326:	d901      	bls.n	800832c <find_volume+0x190>
 8008328:	230d      	movs	r3, #13
 800832a:	e178      	b.n	800861e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	3334      	adds	r3, #52	@ 0x34
 8008330:	330b      	adds	r3, #11
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe f938 	bl	80065a8 <ld_word>
 8008338:	4603      	mov	r3, r0
 800833a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833e:	d001      	beq.n	8008344 <find_volume+0x1a8>
 8008340:	230d      	movs	r3, #13
 8008342:	e16c      	b.n	800861e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	3334      	adds	r3, #52	@ 0x34
 8008348:	3316      	adds	r3, #22
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe f92c 	bl	80065a8 <ld_word>
 8008350:	4603      	mov	r3, r0
 8008352:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <find_volume+0x1cc>
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	3334      	adds	r3, #52	@ 0x34
 800835e:	3324      	adds	r3, #36	@ 0x24
 8008360:	4618      	mov	r0, r3
 8008362:	f7fe f93a 	bl	80065da <ld_dword>
 8008366:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800836c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837a:	789b      	ldrb	r3, [r3, #2]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d005      	beq.n	800838c <find_volume+0x1f0>
 8008380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008382:	789b      	ldrb	r3, [r3, #2]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d001      	beq.n	800838c <find_volume+0x1f0>
 8008388:	230d      	movs	r3, #13
 800838a:	e148      	b.n	800861e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	789b      	ldrb	r3, [r3, #2]
 8008390:	461a      	mov	r2, r3
 8008392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008394:	fb02 f303 	mul.w	r3, r2, r3
 8008398:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083a0:	461a      	mov	r2, r3
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	895b      	ldrh	r3, [r3, #10]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <find_volume+0x224>
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	895b      	ldrh	r3, [r3, #10]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b6:	895b      	ldrh	r3, [r3, #10]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <find_volume+0x228>
 80083c0:	230d      	movs	r3, #13
 80083c2:	e12c      	b.n	800861e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c6:	3334      	adds	r3, #52	@ 0x34
 80083c8:	3311      	adds	r3, #17
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe f8ec 	bl	80065a8 <ld_word>
 80083d0:	4603      	mov	r3, r0
 80083d2:	461a      	mov	r2, r3
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	891b      	ldrh	r3, [r3, #8]
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <find_volume+0x24e>
 80083e6:	230d      	movs	r3, #13
 80083e8:	e119      	b.n	800861e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	3334      	adds	r3, #52	@ 0x34
 80083ee:	3313      	adds	r3, #19
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe f8d9 	bl	80065a8 <ld_word>
 80083f6:	4603      	mov	r3, r0
 80083f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <find_volume+0x272>
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	3334      	adds	r3, #52	@ 0x34
 8008404:	3320      	adds	r3, #32
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe f8e7 	bl	80065da <ld_dword>
 800840c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	3334      	adds	r3, #52	@ 0x34
 8008412:	330e      	adds	r3, #14
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe f8c7 	bl	80065a8 <ld_word>
 800841a:	4603      	mov	r3, r0
 800841c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800841e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <find_volume+0x28c>
 8008424:	230d      	movs	r3, #13
 8008426:	e0fa      	b.n	800861e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008428:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800842a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842c:	4413      	add	r3, r2
 800842e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008430:	8912      	ldrh	r2, [r2, #8]
 8008432:	0912      	lsrs	r2, r2, #4
 8008434:	b292      	uxth	r2, r2
 8008436:	4413      	add	r3, r2
 8008438:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800843a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	429a      	cmp	r2, r3
 8008440:	d204      	bcs.n	800844c <find_volume+0x2b0>
 8008442:	230d      	movs	r3, #13
 8008444:	e0eb      	b.n	800861e <find_volume+0x482>
 8008446:	bf00      	nop
 8008448:	20000a10 	.word	0x20000a10
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800844c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008454:	8952      	ldrh	r2, [r2, #10]
 8008456:	fbb3 f3f2 	udiv	r3, r3, r2
 800845a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <find_volume+0x2ca>
 8008462:	230d      	movs	r3, #13
 8008464:	e0db      	b.n	800861e <find_volume+0x482>
		fmt = FS_FAT32;
 8008466:	2303      	movs	r3, #3
 8008468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008472:	4293      	cmp	r3, r2
 8008474:	d802      	bhi.n	800847c <find_volume+0x2e0>
 8008476:	2302      	movs	r3, #2
 8008478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008482:	4293      	cmp	r3, r2
 8008484:	d802      	bhi.n	800848c <find_volume+0x2f0>
 8008486:	2301      	movs	r3, #1
 8008488:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	1c9a      	adds	r2, r3, #2
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008498:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800849a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800849c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800849e:	441a      	add	r2, r3
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80084a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	441a      	add	r2, r3
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80084ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d11e      	bne.n	80084f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b8:	3334      	adds	r3, #52	@ 0x34
 80084ba:	332a      	adds	r3, #42	@ 0x2a
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe f873 	bl	80065a8 <ld_word>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <find_volume+0x330>
 80084c8:	230d      	movs	r3, #13
 80084ca:	e0a8      	b.n	800861e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	891b      	ldrh	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <find_volume+0x33c>
 80084d4:	230d      	movs	r3, #13
 80084d6:	e0a2      	b.n	800861e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80084d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084da:	3334      	adds	r3, #52	@ 0x34
 80084dc:	332c      	adds	r3, #44	@ 0x2c
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe f87b 	bl	80065da <ld_dword>
 80084e4:	4602      	mov	r2, r0
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80084f2:	e01f      	b.n	8008534 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	891b      	ldrh	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <find_volume+0x364>
 80084fc:	230d      	movs	r3, #13
 80084fe:	e08e      	b.n	800861e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008506:	441a      	add	r2, r3
 8008508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800850c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008510:	2b02      	cmp	r3, #2
 8008512:	d103      	bne.n	800851c <find_volume+0x380>
 8008514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	e00a      	b.n	8008532 <find_volume+0x396>
 800851c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	4613      	mov	r3, r2
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	4413      	add	r3, r2
 8008526:	085a      	lsrs	r2, r3, #1
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008532:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	69da      	ldr	r2, [r3, #28]
 8008538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800853a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800853e:	0a5b      	lsrs	r3, r3, #9
 8008540:	429a      	cmp	r2, r3
 8008542:	d201      	bcs.n	8008548 <find_volume+0x3ac>
 8008544:	230d      	movs	r3, #13
 8008546:	e06a      	b.n	800861e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	615a      	str	r2, [r3, #20]
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	2280      	movs	r2, #128	@ 0x80
 800855c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800855e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008562:	2b03      	cmp	r3, #3
 8008564:	d149      	bne.n	80085fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008568:	3334      	adds	r3, #52	@ 0x34
 800856a:	3330      	adds	r3, #48	@ 0x30
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe f81b 	bl	80065a8 <ld_word>
 8008572:	4603      	mov	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	d140      	bne.n	80085fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800857a:	3301      	adds	r3, #1
 800857c:	4619      	mov	r1, r3
 800857e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008580:	f7fe fac4 	bl	8006b0c <move_window>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d137      	bne.n	80085fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800858a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858c:	2200      	movs	r2, #0
 800858e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008592:	3334      	adds	r3, #52	@ 0x34
 8008594:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe f805 	bl	80065a8 <ld_word>
 800859e:	4603      	mov	r3, r0
 80085a0:	461a      	mov	r2, r3
 80085a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d127      	bne.n	80085fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ac:	3334      	adds	r3, #52	@ 0x34
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe f813 	bl	80065da <ld_dword>
 80085b4:	4603      	mov	r3, r0
 80085b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008628 <find_volume+0x48c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d11e      	bne.n	80085fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	3334      	adds	r3, #52	@ 0x34
 80085c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe f808 	bl	80065da <ld_dword>
 80085ca:	4603      	mov	r3, r0
 80085cc:	4a17      	ldr	r2, [pc, #92]	@ (800862c <find_volume+0x490>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d113      	bne.n	80085fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80085d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d4:	3334      	adds	r3, #52	@ 0x34
 80085d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fd fffd 	bl	80065da <ld_dword>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	3334      	adds	r3, #52	@ 0x34
 80085ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fd fff3 	bl	80065da <ld_dword>
 80085f4:	4602      	mov	r2, r0
 80085f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80085fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008600:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008602:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <find_volume+0x494>)
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	3301      	adds	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <find_volume+0x494>)
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	4b08      	ldr	r3, [pc, #32]	@ (8008630 <find_volume+0x494>)
 8008610:	881a      	ldrh	r2, [r3, #0]
 8008612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008614:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008618:	f7fe fa10 	bl	8006a3c <clear_lock>
#endif
	return FR_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3758      	adds	r7, #88	@ 0x58
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	41615252 	.word	0x41615252
 800862c:	61417272 	.word	0x61417272
 8008630:	20000a14 	.word	0x20000a14

08008634 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800863e:	2309      	movs	r3, #9
 8008640:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01c      	beq.n	8008682 <validate+0x4e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d018      	beq.n	8008682 <validate+0x4e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d013      	beq.n	8008682 <validate+0x4e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	889a      	ldrh	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	88db      	ldrh	r3, [r3, #6]
 8008664:	429a      	cmp	r2, r3
 8008666:	d10c      	bne.n	8008682 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	4618      	mov	r0, r3
 8008670:	f7fd fefa 	bl	8006468 <disk_status>
 8008674:	4603      	mov	r3, r0
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <validate+0x4e>
			res = FR_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <validate+0x5a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	e000      	b.n	8008690 <validate+0x5c>
 800868e:	2300      	movs	r3, #0
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	6013      	str	r3, [r2, #0]
	return res;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80086b2:	f107 0310 	add.w	r3, r7, #16
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fcd5 	bl	8008066 <get_ldnumber>
 80086bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da01      	bge.n	80086c8 <f_mount+0x28>
 80086c4:	230b      	movs	r3, #11
 80086c6:	e02b      	b.n	8008720 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80086c8:	4a17      	ldr	r2, [pc, #92]	@ (8008728 <f_mount+0x88>)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80086d8:	69b8      	ldr	r0, [r7, #24]
 80086da:	f7fe f9af 	bl	8006a3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	490d      	ldr	r1, [pc, #52]	@ (8008728 <f_mount+0x88>)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <f_mount+0x66>
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d001      	beq.n	800870a <f_mount+0x6a>
 8008706:	2300      	movs	r3, #0
 8008708:	e00a      	b.n	8008720 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800870a:	f107 010c 	add.w	r1, r7, #12
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	2200      	movs	r2, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fd41 	bl	800819c <find_volume>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800871e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000a10 	.word	0x20000a10

0800872c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b09a      	sub	sp, #104	@ 0x68
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <f_open+0x18>
 8008740:	2309      	movs	r3, #9
 8008742:	e1b9      	b.n	8008ab8 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800874a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800874c:	79fa      	ldrb	r2, [r7, #7]
 800874e:	f107 0110 	add.w	r1, r7, #16
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fd20 	bl	800819c <find_volume>
 800875c:	4603      	mov	r3, r0
 800875e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008762:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 819d 	bne.w	8008aa6 <f_open+0x37a>
		dj.obj.fs = fs;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008770:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008774:	f000 fce4 	bl	8009140 <ff_memalloc>
 8008778:	65b8      	str	r0, [r7, #88]	@ 0x58
 800877a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <f_open+0x58>
 8008780:	2311      	movs	r3, #17
 8008782:	e199      	b.n	8008ab8 <f_open+0x38c>
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008788:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fbf6 	bl	8007f84 <follow_path>
 8008798:	4603      	mov	r3, r0
 800879a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800879e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d118      	bne.n	80087d8 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80087a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087aa:	b25b      	sxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da03      	bge.n	80087b8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 80087b0:	2306      	movs	r3, #6
 80087b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80087b6:	e00f      	b.n	80087d8 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	bf8c      	ite	hi
 80087be:	2301      	movhi	r3, #1
 80087c0:	2300      	movls	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd ffed 	bl	80067ac <chk_lock>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	f003 031c 	and.w	r3, r3, #28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d07f      	beq.n	80088e2 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 80087e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80087ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d10e      	bne.n	8008810 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80087f2:	f7fe f837 	bl	8006864 <enq_lock>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <f_open+0xde>
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff f90f 	bl	8007a24 <dir_register>
 8008806:	4603      	mov	r3, r0
 8008808:	e000      	b.n	800880c <f_open+0xe0>
 800880a:	2312      	movs	r3, #18
 800880c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	f043 0308 	orr.w	r3, r3, #8
 8008816:	71fb      	strb	r3, [r7, #7]
 8008818:	e010      	b.n	800883c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800881a:	7ebb      	ldrb	r3, [r7, #26]
 800881c:	f003 0311 	and.w	r3, r3, #17
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <f_open+0x100>
					res = FR_DENIED;
 8008824:	2307      	movs	r3, #7
 8008826:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800882a:	e007      	b.n	800883c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <f_open+0x110>
 8008836:	2308      	movs	r3, #8
 8008838:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800883c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008840:	2b00      	cmp	r3, #0
 8008842:	d168      	bne.n	8008916 <f_open+0x1ea>
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d063      	beq.n	8008916 <f_open+0x1ea>
				dw = GET_FATTIME();
 800884e:	f7fd fbc9 	bl	8005fe4 <get_fattime>
 8008852:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	330e      	adds	r3, #14
 8008858:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800885a:	4618      	mov	r0, r3
 800885c:	f7fd fefb 	bl	8006656 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	3316      	adds	r3, #22
 8008864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fef5 	bl	8006656 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800886c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886e:	330b      	adds	r3, #11
 8008870:	2220      	movs	r2, #32
 8008872:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fe4a 	bl	8007514 <ld_clust>
 8008880:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008886:	2200      	movs	r2, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f7fe fe62 	bl	8007552 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800888e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008890:	331c      	adds	r3, #28
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f7fd fede 	bl	8006656 <st_dword>
					fs->wflag = 1;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2201      	movs	r2, #1
 800889e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80088a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d037      	beq.n	8008916 <f_open+0x1ea>
						dw = fs->winsect;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088aa:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80088ac:	f107 0314 	add.w	r3, r7, #20
 80088b0:	2200      	movs	r2, #0
 80088b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fb75 	bl	8006fa4 <remove_chain>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80088c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d126      	bne.n	8008916 <f_open+0x1ea>
							res = move_window(fs, dw);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f91d 	bl	8006b0c <move_window>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088dc:	3a01      	subs	r2, #1
 80088de:	611a      	str	r2, [r3, #16]
 80088e0:	e019      	b.n	8008916 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80088e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d115      	bne.n	8008916 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80088ea:	7ebb      	ldrb	r3, [r7, #26]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <f_open+0x1d0>
					res = FR_NO_FILE;
 80088f4:	2304      	movs	r3, #4
 80088f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80088fa:	e00c      	b.n	8008916 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <f_open+0x1ea>
 8008906:	7ebb      	ldrb	r3, [r7, #26]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <f_open+0x1ea>
						res = FR_DENIED;
 8008910:	2307      	movs	r3, #7
 8008912:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008916:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800891a:	2b00      	cmp	r3, #0
 800891c:	d126      	bne.n	800896c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <f_open+0x204>
				mode |= FA_MODIFIED;
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	2b01      	cmp	r3, #1
 8008942:	bf8c      	ite	hi
 8008944:	2301      	movhi	r3, #1
 8008946:	2300      	movls	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	461a      	mov	r2, r3
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd ffa8 	bl	80068a8 <inc_lock>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <f_open+0x240>
 8008966:	2302      	movs	r3, #2
 8008968:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800896c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008970:	2b00      	cmp	r3, #0
 8008972:	f040 8095 	bne.w	8008aa0 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fdc9 	bl	8007514 <ld_clust>
 8008982:	4602      	mov	r2, r0
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898a:	331c      	adds	r3, #28
 800898c:	4618      	mov	r0, r3
 800898e:	f7fd fe24 	bl	80065da <ld_dword>
 8008992:	4602      	mov	r2, r0
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	88da      	ldrh	r2, [r3, #6]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	79fa      	ldrb	r2, [r7, #7]
 80089b0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3330      	adds	r3, #48	@ 0x30
 80089c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fd fe8e 	bl	80066f0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d060      	beq.n	8008aa0 <f_open+0x374>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d05c      	beq.n	8008aa0 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	895b      	ldrh	r3, [r3, #10]
 80089f2:	025b      	lsls	r3, r3, #9
 80089f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a02:	e016      	b.n	8008a32 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe f93a 	bl	8006c82 <get_fat>
 8008a0e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d802      	bhi.n	8008a1c <f_open+0x2f0>
 8008a16:	2302      	movs	r3, #2
 8008a18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d102      	bne.n	8008a2a <f_open+0x2fe>
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <f_open+0x316>
 8008a3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d8e0      	bhi.n	8008a04 <f_open+0x2d8>
				}
				fp->clust = clst;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a46:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d127      	bne.n	8008aa0 <f_open+0x374>
 8008a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d022      	beq.n	8008aa0 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe f8f0 	bl	8006c44 <clust2sect>
 8008a64:	64b8      	str	r0, [r7, #72]	@ 0x48
 8008a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <f_open+0x348>
						res = FR_INT_ERR;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008a72:	e015      	b.n	8008aa0 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a76:	0a5a      	lsrs	r2, r3, #9
 8008a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a7a:	441a      	add	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	7858      	ldrb	r0, [r3, #1]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1a      	ldr	r2, [r3, #32]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f7fd fd2c 	bl	80064ec <disk_read>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <f_open+0x374>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008aa0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008aa2:	f000 fb59 	bl	8009158 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008aa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <f_open+0x388>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3768      	adds	r7, #104	@ 0x68
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	@ 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f107 0210 	add.w	r2, r7, #16
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fda7 	bl	8008634 <validate>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008aec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d107      	bne.n	8008b04 <f_write+0x44>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	7d5b      	ldrb	r3, [r3, #21]
 8008af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008afc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <f_write+0x4a>
 8008b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b08:	e14b      	b.n	8008da2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	7d1b      	ldrb	r3, [r3, #20]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <f_write+0x5a>
 8008b16:	2307      	movs	r3, #7
 8008b18:	e143      	b.n	8008da2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	f080 812d 	bcs.w	8008d86 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b34:	e127      	b.n	8008d86 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 80e3 	bne.w	8008d0a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	8952      	ldrh	r2, [r2, #10]
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	4013      	ands	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d143      	bne.n	8008be2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10c      	bne.n	8008b7c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11a      	bne.n	8008ba4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fa7b 	bl	800706e <create_chain>
 8008b78:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008b7a:	e013      	b.n	8008ba4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7fe fb07 	bl	800719e <clmt_clust>
 8008b90:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008b92:	e007      	b.n	8008ba4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fe fa66 	bl	800706e <create_chain>
 8008ba2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80f2 	beq.w	8008d90 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d104      	bne.n	8008bbc <f_write+0xfc>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	755a      	strb	r2, [r3, #21]
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e0f2      	b.n	8008da2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d104      	bne.n	8008bce <f_write+0x10e>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	755a      	strb	r2, [r3, #21]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e0e9      	b.n	8008da2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bd2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <f_write+0x122>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008be0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	7d1b      	ldrb	r3, [r3, #20]
 8008be6:	b25b      	sxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da18      	bge.n	8008c1e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	7858      	ldrb	r0, [r3, #1]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1a      	ldr	r2, [r3, #32]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f7fd fc96 	bl	800652c <disk_write>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <f_write+0x150>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	755a      	strb	r2, [r3, #21]
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0c8      	b.n	8008da2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	7d1b      	ldrb	r3, [r3, #20]
 8008c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe f80c 	bl	8006c44 <clust2sect>
 8008c2c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <f_write+0x17e>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2202      	movs	r2, #2
 8008c38:	755a      	strb	r2, [r3, #21]
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e0b1      	b.n	8008da2 <f_write+0x2e2>
			sect += csect;
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	4413      	add	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	0a5b      	lsrs	r3, r3, #9
 8008c4a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d03c      	beq.n	8008ccc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	4413      	add	r3, r2
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	8952      	ldrh	r2, [r2, #10]
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d905      	bls.n	8008c6c <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	895b      	ldrh	r3, [r3, #10]
 8008c64:	461a      	mov	r2, r3
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	7858      	ldrb	r0, [r3, #1]
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	69f9      	ldr	r1, [r7, #28]
 8008c76:	f7fd fc59 	bl	800652c <disk_write>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <f_write+0x1ca>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	755a      	strb	r2, [r3, #21]
 8008c86:	2301      	movs	r3, #1
 8008c88:	e08b      	b.n	8008da2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	6a3a      	ldr	r2, [r7, #32]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d915      	bls.n	8008cc4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1a      	ldr	r2, [r3, #32]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	025b      	lsls	r3, r3, #9
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f7fd fcfc 	bl	80066ae <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	7d1b      	ldrb	r3, [r3, #20]
 8008cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	025b      	lsls	r3, r3, #9
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008cca:	e03f      	b.n	8008d4c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d016      	beq.n	8008d04 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d210      	bcs.n	8008d04 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	7858      	ldrb	r0, [r3, #1]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008cec:	2301      	movs	r3, #1
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	f7fd fbfc 	bl	80064ec <disk_read>
 8008cf4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	755a      	strb	r2, [r3, #21]
 8008d00:	2301      	movs	r3, #1
 8008d02:	e04e      	b.n	8008da2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008d16:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d901      	bls.n	8008d24 <f_write+0x264>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	4413      	add	r3, r2
 8008d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d36:	69f9      	ldr	r1, [r7, #28]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fd fcb8 	bl	80066ae <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7d1b      	ldrb	r3, [r3, #20]
 8008d42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	4413      	add	r3, r2
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	441a      	add	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	619a      	str	r2, [r3, #24]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	bf38      	it	cc
 8008d6c:	461a      	movcc	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	60da      	str	r2, [r3, #12]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	441a      	add	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f aed4 	bne.w	8008b36 <f_write+0x76>
 8008d8e:	e000      	b.n	8008d92 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	7d1b      	ldrb	r3, [r3, #20]
 8008d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3730      	adds	r7, #48	@ 0x30
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fc3a 	bl	8008634 <validate>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d168      	bne.n	8008e9c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	7d1b      	ldrb	r3, [r3, #20]
 8008dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d062      	beq.n	8008e9c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7d1b      	ldrb	r3, [r3, #20]
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da15      	bge.n	8008e0c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7858      	ldrb	r0, [r3, #1]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	2301      	movs	r3, #1
 8008df0:	f7fd fb9c 	bl	800652c <disk_write>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <f_sync+0x54>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e04f      	b.n	8008e9e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7d1b      	ldrb	r3, [r3, #20]
 8008e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e0c:	f7fd f8ea 	bl	8005fe4 <get_fattime>
 8008e10:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fd fe76 	bl	8006b0c <move_window>
 8008e20:	4603      	mov	r3, r0
 8008e22:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d138      	bne.n	8008e9c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	330b      	adds	r3, #11
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	330b      	adds	r3, #11
 8008e3a:	f042 0220 	orr.w	r2, r2, #32
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	f7fe fb80 	bl	8007552 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f103 021c 	add.w	r2, r3, #28
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f7fd fbf9 	bl	8006656 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3316      	adds	r3, #22
 8008e68:	6939      	ldr	r1, [r7, #16]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fd fbf3 	bl	8006656 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3312      	adds	r3, #18
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fd fbd2 	bl	8006620 <st_word>
					fs->wflag = 1;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fd fe6f 	bl	8006b68 <sync_fs>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7d1b      	ldrb	r3, [r3, #20]
 8008e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff ff7b 	bl	8008daa <f_sync>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d118      	bne.n	8008ef0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f107 0208 	add.w	r2, r7, #8
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fbb4 	bl	8008634 <validate>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10c      	bne.n	8008ef0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd fd72 	bl	80069c4 <dec_lock>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f12:	4b1f      	ldr	r3, [pc, #124]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f14:	7a5b      	ldrb	r3, [r3, #9]
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d131      	bne.n	8008f80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f1e:	7a5b      	ldrb	r3, [r3, #9]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f26:	2100      	movs	r1, #0
 8008f28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008f2a:	4b19      	ldr	r3, [pc, #100]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f2c:	7a5b      	ldrb	r3, [r3, #9]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	4a17      	ldr	r2, [pc, #92]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f3c:	7a5b      	ldrb	r3, [r3, #9]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	4b13      	ldr	r3, [pc, #76]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f44:	4413      	add	r3, r2
 8008f46:	79fa      	ldrb	r2, [r7, #7]
 8008f48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008f4a:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f4c:	7a5b      	ldrb	r3, [r3, #9]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	b2d1      	uxtb	r1, r2
 8008f54:	4a0e      	ldr	r2, [pc, #56]	@ (8008f90 <FATFS_LinkDriverEx+0x94>)
 8008f56:	7251      	strb	r1, [r2, #9]
 8008f58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008f5a:	7dbb      	ldrb	r3, [r7, #22]
 8008f5c:	3330      	adds	r3, #48	@ 0x30
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	3301      	adds	r3, #1
 8008f68:	223a      	movs	r2, #58	@ 0x3a
 8008f6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3302      	adds	r3, #2
 8008f70:	222f      	movs	r2, #47	@ 0x2f
 8008f72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	3303      	adds	r3, #3
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000a38 	.word	0x20000a38

08008f94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ffaa 	bl	8008efc <FATFS_LinkDriverEx>
 8008fa8:	4603      	mov	r3, r0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fc4:	d802      	bhi.n	8008fcc <ff_convert+0x18>
		c = chr;
 8008fc6:	88fb      	ldrh	r3, [r7, #6]
 8008fc8:	81fb      	strh	r3, [r7, #14]
 8008fca:	e025      	b.n	8009018 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2bff      	cmp	r3, #255	@ 0xff
 8008fd6:	d805      	bhi.n	8008fe4 <ff_convert+0x30>
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	3b80      	subs	r3, #128	@ 0x80
 8008fdc:	4a12      	ldr	r2, [pc, #72]	@ (8009028 <ff_convert+0x74>)
 8008fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe2:	e000      	b.n	8008fe6 <ff_convert+0x32>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	81fb      	strh	r3, [r7, #14]
 8008fe8:	e016      	b.n	8009018 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008fea:	2300      	movs	r3, #0
 8008fec:	81fb      	strh	r3, [r7, #14]
 8008fee:	e009      	b.n	8009004 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008ff0:	89fb      	ldrh	r3, [r7, #14]
 8008ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8009028 <ff_convert+0x74>)
 8008ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ff8:	88fa      	ldrh	r2, [r7, #6]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d006      	beq.n	800900c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008ffe:	89fb      	ldrh	r3, [r7, #14]
 8009000:	3301      	adds	r3, #1
 8009002:	81fb      	strh	r3, [r7, #14]
 8009004:	89fb      	ldrh	r3, [r7, #14]
 8009006:	2b7f      	cmp	r3, #127	@ 0x7f
 8009008:	d9f2      	bls.n	8008ff0 <ff_convert+0x3c>
 800900a:	e000      	b.n	800900e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800900c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800900e:	89fb      	ldrh	r3, [r7, #14]
 8009010:	3380      	adds	r3, #128	@ 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	b2db      	uxtb	r3, r3
 8009016:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009018:	89fb      	ldrh	r3, [r7, #14]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	0800ec5c 	.word	0x0800ec5c

0800902c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903c:	d201      	bcs.n	8009042 <ff_wtoupper+0x16>
 800903e:	4b3e      	ldr	r3, [pc, #248]	@ (8009138 <ff_wtoupper+0x10c>)
 8009040:	e000      	b.n	8009044 <ff_wtoupper+0x18>
 8009042:	4b3e      	ldr	r3, [pc, #248]	@ (800913c <ff_wtoupper+0x110>)
 8009044:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1c9a      	adds	r2, r3, #2
 800904a:	617a      	str	r2, [r7, #20]
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009050:	8a7b      	ldrh	r3, [r7, #18]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d068      	beq.n	8009128 <ff_wtoupper+0xfc>
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	429a      	cmp	r2, r3
 800905c:	d364      	bcc.n	8009128 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	1c9a      	adds	r2, r3, #2
 8009062:	617a      	str	r2, [r7, #20]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	823b      	strh	r3, [r7, #16]
 8009068:	8a3b      	ldrh	r3, [r7, #16]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	81fb      	strh	r3, [r7, #14]
 800906e:	8a3b      	ldrh	r3, [r7, #16]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009074:	88fa      	ldrh	r2, [r7, #6]
 8009076:	8a79      	ldrh	r1, [r7, #18]
 8009078:	8a3b      	ldrh	r3, [r7, #16]
 800907a:	440b      	add	r3, r1
 800907c:	429a      	cmp	r2, r3
 800907e:	da49      	bge.n	8009114 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d84f      	bhi.n	8009126 <ff_wtoupper+0xfa>
 8009086:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <ff_wtoupper+0x60>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090b1 	.word	0x080090b1
 8009090:	080090c3 	.word	0x080090c3
 8009094:	080090d9 	.word	0x080090d9
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090e9 	.word	0x080090e9
 80090a0:	080090f1 	.word	0x080090f1
 80090a4:	080090f9 	.word	0x080090f9
 80090a8:	08009101 	.word	0x08009101
 80090ac:	08009109 	.word	0x08009109
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	8a7b      	ldrh	r3, [r7, #18]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	80fb      	strh	r3, [r7, #6]
 80090c0:	e027      	b.n	8009112 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	8a7b      	ldrh	r3, [r7, #18]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	80fb      	strh	r3, [r7, #6]
 80090d6:	e01c      	b.n	8009112 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80090d8:	88fb      	ldrh	r3, [r7, #6]
 80090da:	3b10      	subs	r3, #16
 80090dc:	80fb      	strh	r3, [r7, #6]
 80090de:	e018      	b.n	8009112 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	3b20      	subs	r3, #32
 80090e4:	80fb      	strh	r3, [r7, #6]
 80090e6:	e014      	b.n	8009112 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	3b30      	subs	r3, #48	@ 0x30
 80090ec:	80fb      	strh	r3, [r7, #6]
 80090ee:	e010      	b.n	8009112 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80090f0:	88fb      	ldrh	r3, [r7, #6]
 80090f2:	3b1a      	subs	r3, #26
 80090f4:	80fb      	strh	r3, [r7, #6]
 80090f6:	e00c      	b.n	8009112 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	3308      	adds	r3, #8
 80090fc:	80fb      	strh	r3, [r7, #6]
 80090fe:	e008      	b.n	8009112 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	3b50      	subs	r3, #80	@ 0x50
 8009104:	80fb      	strh	r3, [r7, #6]
 8009106:	e004      	b.n	8009112 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800910e:	80fb      	strh	r3, [r7, #6]
 8009110:	bf00      	nop
			}
			break;
 8009112:	e008      	b.n	8009126 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d195      	bne.n	8009046 <ff_wtoupper+0x1a>
 800911a:	8a3b      	ldrh	r3, [r7, #16]
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009124:	e78f      	b.n	8009046 <ff_wtoupper+0x1a>
			break;
 8009126:	bf00      	nop
	}

	return chr;
 8009128:	88fb      	ldrh	r3, [r7, #6]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	0800ed5c 	.word	0x0800ed5c
 800913c:	0800ef50 	.word	0x0800ef50

08009140 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f004 fe9b 	bl	800de84 <malloc>
 800914e:	4603      	mov	r3, r0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f004 fe97 	bl	800de94 <free>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <__NVIC_SetPriority>:
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	6039      	str	r1, [r7, #0]
 800917a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800917c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db0a      	blt.n	800919a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	b2da      	uxtb	r2, r3
 8009188:	490c      	ldr	r1, [pc, #48]	@ (80091bc <__NVIC_SetPriority+0x4c>)
 800918a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800918e:	0112      	lsls	r2, r2, #4
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	440b      	add	r3, r1
 8009194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009198:	e00a      	b.n	80091b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	b2da      	uxtb	r2, r3
 800919e:	4908      	ldr	r1, [pc, #32]	@ (80091c0 <__NVIC_SetPriority+0x50>)
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	3b04      	subs	r3, #4
 80091a8:	0112      	lsls	r2, r2, #4
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	440b      	add	r3, r1
 80091ae:	761a      	strb	r2, [r3, #24]
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	e000e100 	.word	0xe000e100
 80091c0:	e000ed00 	.word	0xe000ed00

080091c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091c8:	4b05      	ldr	r3, [pc, #20]	@ (80091e0 <SysTick_Handler+0x1c>)
 80091ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091cc:	f002 fac8 	bl	800b760 <xTaskGetSchedulerState>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d001      	beq.n	80091da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091d6:	f003 f9bf 	bl	800c558 <xPortSysTickHandler>
  }
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010

080091e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091e8:	2100      	movs	r1, #0
 80091ea:	f06f 0004 	mvn.w	r0, #4
 80091ee:	f7ff ffbf 	bl	8009170 <__NVIC_SetPriority>
#endif
}
 80091f2:	bf00      	nop
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091fe:	f3ef 8305 	mrs	r3, IPSR
 8009202:	603b      	str	r3, [r7, #0]
  return(result);
 8009204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800920a:	f06f 0305 	mvn.w	r3, #5
 800920e:	607b      	str	r3, [r7, #4]
 8009210:	e00c      	b.n	800922c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009212:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <osKernelInitialize+0x44>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d105      	bne.n	8009226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800921a:	4b08      	ldr	r3, [pc, #32]	@ (800923c <osKernelInitialize+0x44>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009220:	2300      	movs	r3, #0
 8009222:	607b      	str	r3, [r7, #4]
 8009224:	e002      	b.n	800922c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009226:	f04f 33ff 	mov.w	r3, #4294967295
 800922a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800922c:	687b      	ldr	r3, [r7, #4]
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000a44 	.word	0x20000a44

08009240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009246:	f3ef 8305 	mrs	r3, IPSR
 800924a:	603b      	str	r3, [r7, #0]
  return(result);
 800924c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009252:	f06f 0305 	mvn.w	r3, #5
 8009256:	607b      	str	r3, [r7, #4]
 8009258:	e010      	b.n	800927c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800925a:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <osKernelStart+0x48>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d109      	bne.n	8009276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009262:	f7ff ffbf 	bl	80091e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009266:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <osKernelStart+0x48>)
 8009268:	2202      	movs	r2, #2
 800926a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800926c:	f001 fe14 	bl	800ae98 <vTaskStartScheduler>
      stat = osOK;
 8009270:	2300      	movs	r3, #0
 8009272:	607b      	str	r3, [r7, #4]
 8009274:	e002      	b.n	800927c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009276:	f04f 33ff 	mov.w	r3, #4294967295
 800927a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800927c:	687b      	ldr	r3, [r7, #4]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000a44 	.word	0x20000a44

0800928c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b08e      	sub	sp, #56	@ 0x38
 8009290:	af04      	add	r7, sp, #16
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009298:	2300      	movs	r3, #0
 800929a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800929c:	f3ef 8305 	mrs	r3, IPSR
 80092a0:	617b      	str	r3, [r7, #20]
  return(result);
 80092a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d17e      	bne.n	80093a6 <osThreadNew+0x11a>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d07b      	beq.n	80093a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092ae:	2380      	movs	r3, #128	@ 0x80
 80092b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092b2:	2318      	movs	r3, #24
 80092b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80092ba:	f04f 33ff 	mov.w	r3, #4294967295
 80092be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d045      	beq.n	8009352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <osThreadNew+0x48>
        name = attr->name;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <osThreadNew+0x6e>
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	2b38      	cmp	r3, #56	@ 0x38
 80092ec:	d805      	bhi.n	80092fa <osThreadNew+0x6e>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <osThreadNew+0x72>
        return (NULL);
 80092fa:	2300      	movs	r3, #0
 80092fc:	e054      	b.n	80093a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	089b      	lsrs	r3, r3, #2
 800930c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00e      	beq.n	8009334 <osThreadNew+0xa8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2ba7      	cmp	r3, #167	@ 0xa7
 800931c:	d90a      	bls.n	8009334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009322:	2b00      	cmp	r3, #0
 8009324:	d006      	beq.n	8009334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <osThreadNew+0xa8>
        mem = 1;
 800932e:	2301      	movs	r3, #1
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e010      	b.n	8009356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10c      	bne.n	8009356 <osThreadNew+0xca>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d108      	bne.n	8009356 <osThreadNew+0xca>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <osThreadNew+0xca>
          mem = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e001      	b.n	8009356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d110      	bne.n	800937e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009364:	9202      	str	r2, [sp, #8]
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f001 fb9c 	bl	800aab0 <xTaskCreateStatic>
 8009378:	4603      	mov	r3, r0
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	e013      	b.n	80093a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d110      	bne.n	80093a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	b29a      	uxth	r2, r3
 8009388:	f107 0310 	add.w	r3, r7, #16
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f001 fbea 	bl	800ab70 <xTaskCreate>
 800939c:	4603      	mov	r3, r0
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d001      	beq.n	80093a6 <osThreadNew+0x11a>
            hTask = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093a6:	693b      	ldr	r3, [r7, #16]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3728      	adds	r7, #40	@ 0x28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093b8:	f3ef 8305 	mrs	r3, IPSR
 80093bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80093be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <osDelay+0x1c>
    stat = osErrorISR;
 80093c4:	f06f 0305 	mvn.w	r3, #5
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e007      	b.n	80093dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fd28 	bl	800ae2c <vTaskDelay>
    }
  }

  return (stat);
 80093dc:	68fb      	ldr	r3, [r7, #12]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b08a      	sub	sp, #40	@ 0x28
 80093ea:	af02      	add	r7, sp, #8
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093f6:	f3ef 8305 	mrs	r3, IPSR
 80093fa:	613b      	str	r3, [r7, #16]
  return(result);
 80093fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d175      	bne.n	80094ee <osSemaphoreNew+0x108>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d072      	beq.n	80094ee <osSemaphoreNew+0x108>
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	429a      	cmp	r2, r3
 800940e:	d86e      	bhi.n	80094ee <osSemaphoreNew+0x108>
    mem = -1;
 8009410:	f04f 33ff 	mov.w	r3, #4294967295
 8009414:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d015      	beq.n	8009448 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d006      	beq.n	8009432 <osSemaphoreNew+0x4c>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b4f      	cmp	r3, #79	@ 0x4f
 800942a:	d902      	bls.n	8009432 <osSemaphoreNew+0x4c>
        mem = 1;
 800942c:	2301      	movs	r3, #1
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	e00c      	b.n	800944c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d108      	bne.n	800944c <osSemaphoreNew+0x66>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <osSemaphoreNew+0x66>
          mem = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	e001      	b.n	800944c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d04c      	beq.n	80094ee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d128      	bne.n	80094ac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d10a      	bne.n	8009476 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2203      	movs	r2, #3
 8009466:	9200      	str	r2, [sp, #0]
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	2001      	movs	r0, #1
 800946e:	f000 fb5d 	bl	8009b2c <xQueueGenericCreateStatic>
 8009472:	61f8      	str	r0, [r7, #28]
 8009474:	e005      	b.n	8009482 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009476:	2203      	movs	r2, #3
 8009478:	2100      	movs	r1, #0
 800947a:	2001      	movs	r0, #1
 800947c:	f000 fbd3 	bl	8009c26 <xQueueGenericCreate>
 8009480:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d022      	beq.n	80094ce <osSemaphoreNew+0xe8>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d01f      	beq.n	80094ce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800948e:	2300      	movs	r3, #0
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	69f8      	ldr	r0, [r7, #28]
 8009496:	f000 fc93 	bl	8009dc0 <xQueueGenericSend>
 800949a:	4603      	mov	r3, r0
 800949c:	2b01      	cmp	r3, #1
 800949e:	d016      	beq.n	80094ce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80094a0:	69f8      	ldr	r0, [r7, #28]
 80094a2:	f001 f931 	bl	800a708 <vQueueDelete>
            hSemaphore = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
 80094aa:	e010      	b.n	80094ce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d108      	bne.n	80094c4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	461a      	mov	r2, r3
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fc11 	bl	8009ce2 <xQueueCreateCountingSemaphoreStatic>
 80094c0:	61f8      	str	r0, [r7, #28]
 80094c2:	e004      	b.n	80094ce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fc44 	bl	8009d54 <xQueueCreateCountingSemaphore>
 80094cc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e001      	b.n	80094e6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80094e6:	6979      	ldr	r1, [r7, #20]
 80094e8:	69f8      	ldr	r0, [r7, #28]
 80094ea:	f001 fa59 	bl	800a9a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80094ee:	69fb      	ldr	r3, [r7, #28]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009510:	f06f 0303 	mvn.w	r3, #3
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e039      	b.n	800958c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009518:	f3ef 8305 	mrs	r3, IPSR
 800951c:	60fb      	str	r3, [r7, #12]
  return(result);
 800951e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009520:	2b00      	cmp	r3, #0
 8009522:	d022      	beq.n	800956a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800952a:	f06f 0303 	mvn.w	r3, #3
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e02c      	b.n	800958c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009532:	2300      	movs	r3, #0
 8009534:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009536:	f107 0308 	add.w	r3, r7, #8
 800953a:	461a      	mov	r2, r3
 800953c:	2100      	movs	r1, #0
 800953e:	6938      	ldr	r0, [r7, #16]
 8009540:	f001 f860 	bl	800a604 <xQueueReceiveFromISR>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d003      	beq.n	8009552 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800954a:	f06f 0302 	mvn.w	r3, #2
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e01c      	b.n	800958c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d019      	beq.n	800958c <osSemaphoreAcquire+0x94>
 8009558:	4b0f      	ldr	r3, [pc, #60]	@ (8009598 <osSemaphoreAcquire+0xa0>)
 800955a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	e010      	b.n	800958c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6938      	ldr	r0, [r7, #16]
 800956e:	f000 ff39 	bl	800a3e4 <xQueueSemaphoreTake>
 8009572:	4603      	mov	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d009      	beq.n	800958c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800957e:	f06f 0301 	mvn.w	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e002      	b.n	800958c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009586:	f06f 0302 	mvn.w	r3, #2
 800958a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800958c:	697b      	ldr	r3, [r7, #20]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d103      	bne.n	80095ba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80095b2:	f06f 0303 	mvn.w	r3, #3
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	e02c      	b.n	8009614 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ba:	f3ef 8305 	mrs	r3, IPSR
 80095be:	60fb      	str	r3, [r7, #12]
  return(result);
 80095c0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01a      	beq.n	80095fc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4619      	mov	r1, r3
 80095d0:	6938      	ldr	r0, [r7, #16]
 80095d2:	f000 fd95 	bl	800a100 <xQueueGiveFromISR>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d003      	beq.n	80095e4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80095dc:	f06f 0302 	mvn.w	r3, #2
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	e017      	b.n	8009614 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d014      	beq.n	8009614 <osSemaphoreRelease+0x78>
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <osSemaphoreRelease+0x84>)
 80095ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	e00b      	b.n	8009614 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6938      	ldr	r0, [r7, #16]
 8009604:	f000 fbdc 	bl	8009dc0 <xQueueGenericSend>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d002      	beq.n	8009614 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800960e:	f06f 0302 	mvn.w	r3, #2
 8009612:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009614:	697b      	ldr	r3, [r7, #20]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	@ 0x28
 8009628:	af02      	add	r7, sp, #8
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009634:	f3ef 8305 	mrs	r3, IPSR
 8009638:	613b      	str	r3, [r7, #16]
  return(result);
 800963a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800963c:	2b00      	cmp	r3, #0
 800963e:	d15f      	bne.n	8009700 <osMessageQueueNew+0xdc>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d05c      	beq.n	8009700 <osMessageQueueNew+0xdc>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d059      	beq.n	8009700 <osMessageQueueNew+0xdc>
    mem = -1;
 800964c:	f04f 33ff 	mov.w	r3, #4294967295
 8009650:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d029      	beq.n	80096ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d012      	beq.n	8009686 <osMessageQueueNew+0x62>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b4f      	cmp	r3, #79	@ 0x4f
 8009666:	d90e      	bls.n	8009686 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695a      	ldr	r2, [r3, #20]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	fb01 f303 	mul.w	r3, r1, r3
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <osMessageQueueNew+0x62>
        mem = 1;
 8009680:	2301      	movs	r3, #1
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	e014      	b.n	80096b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d110      	bne.n	80096b0 <osMessageQueueNew+0x8c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10c      	bne.n	80096b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800969a:	2b00      	cmp	r3, #0
 800969c:	d108      	bne.n	80096b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	e001      	b.n	80096b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d10b      	bne.n	80096ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691a      	ldr	r2, [r3, #16]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2100      	movs	r1, #0
 80096c0:	9100      	str	r1, [sp, #0]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fa31 	bl	8009b2c <xQueueGenericCreateStatic>
 80096ca:	61f8      	str	r0, [r7, #28]
 80096cc:	e008      	b.n	80096e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80096d4:	2200      	movs	r2, #0
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 faa4 	bl	8009c26 <xQueueGenericCreate>
 80096de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e001      	b.n	80096f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80096f8:	6979      	ldr	r1, [r7, #20]
 80096fa:	69f8      	ldr	r0, [r7, #28]
 80096fc:	f001 f950 	bl	800a9a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009700:	69fb      	ldr	r3, [r7, #28]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3720      	adds	r7, #32
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4613      	mov	r3, r2
 800971a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009720:	2300      	movs	r3, #0
 8009722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009724:	f3ef 8305 	mrs	r3, IPSR
 8009728:	617b      	str	r3, [r7, #20]
  return(result);
 800972a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800972c:	2b00      	cmp	r3, #0
 800972e:	d028      	beq.n	8009782 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d005      	beq.n	8009742 <osMessageQueuePut+0x36>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <osMessageQueuePut+0x36>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009742:	f06f 0303 	mvn.w	r3, #3
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e038      	b.n	80097bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800974e:	f107 0210 	add.w	r2, r7, #16
 8009752:	2300      	movs	r3, #0
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	69b8      	ldr	r0, [r7, #24]
 8009758:	f000 fc34 	bl	8009fc4 <xQueueGenericSendFromISR>
 800975c:	4603      	mov	r3, r0
 800975e:	2b01      	cmp	r3, #1
 8009760:	d003      	beq.n	800976a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009762:	f06f 0302 	mvn.w	r3, #2
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	e028      	b.n	80097bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d025      	beq.n	80097bc <osMessageQueuePut+0xb0>
 8009770:	4b15      	ldr	r3, [pc, #84]	@ (80097c8 <osMessageQueuePut+0xbc>)
 8009772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	e01c      	b.n	80097bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <osMessageQueuePut+0x82>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800978e:	f06f 0303 	mvn.w	r3, #3
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	e012      	b.n	80097bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009796:	2300      	movs	r3, #0
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	69b8      	ldr	r0, [r7, #24]
 800979e:	f000 fb0f 	bl	8009dc0 <xQueueGenericSend>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d009      	beq.n	80097bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80097ae:	f06f 0301 	mvn.w	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e002      	b.n	80097bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80097b6:	f06f 0302 	mvn.w	r3, #2
 80097ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80097de:	2300      	movs	r3, #0
 80097e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e2:	f3ef 8305 	mrs	r3, IPSR
 80097e6:	617b      	str	r3, [r7, #20]
  return(result);
 80097e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d028      	beq.n	8009840 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <osMessageQueueGet+0x34>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <osMessageQueueGet+0x34>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009800:	f06f 0303 	mvn.w	r3, #3
 8009804:	61fb      	str	r3, [r7, #28]
 8009806:	e037      	b.n	8009878 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800980c:	f107 0310 	add.w	r3, r7, #16
 8009810:	461a      	mov	r2, r3
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	69b8      	ldr	r0, [r7, #24]
 8009816:	f000 fef5 	bl	800a604 <xQueueReceiveFromISR>
 800981a:	4603      	mov	r3, r0
 800981c:	2b01      	cmp	r3, #1
 800981e:	d003      	beq.n	8009828 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009820:	f06f 0302 	mvn.w	r3, #2
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	e027      	b.n	8009878 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d024      	beq.n	8009878 <osMessageQueueGet+0xac>
 800982e:	4b15      	ldr	r3, [pc, #84]	@ (8009884 <osMessageQueueGet+0xb8>)
 8009830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	e01b      	b.n	8009878 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <osMessageQueueGet+0x80>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800984c:	f06f 0303 	mvn.w	r3, #3
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	e011      	b.n	8009878 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	69b8      	ldr	r0, [r7, #24]
 800985a:	f000 fce1 	bl	800a220 <xQueueReceive>
 800985e:	4603      	mov	r3, r0
 8009860:	2b01      	cmp	r3, #1
 8009862:	d009      	beq.n	8009878 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800986a:	f06f 0301 	mvn.w	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	e002      	b.n	8009878 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009872:	f06f 0302 	mvn.w	r3, #2
 8009876:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009878:	69fb      	ldr	r3, [r7, #28]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4a07      	ldr	r2, [pc, #28]	@ (80098b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4a06      	ldr	r2, [pc, #24]	@ (80098b8 <vApplicationGetIdleTaskMemory+0x30>)
 800989e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2280      	movs	r2, #128	@ 0x80
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	20000a48 	.word	0x20000a48
 80098b8:	20000af0 	.word	0x20000af0

080098bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4a07      	ldr	r2, [pc, #28]	@ (80098e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80098cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4a06      	ldr	r2, [pc, #24]	@ (80098ec <vApplicationGetTimerTaskMemory+0x30>)
 80098d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098da:	601a      	str	r2, [r3, #0]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000cf0 	.word	0x20000cf0
 80098ec:	20000d98 	.word	0x20000d98

080098f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f103 0208 	add.w	r2, r3, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f103 0208 	add.w	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f103 0208 	add.w	r2, r3, #8
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800993e:	bf00      	nop
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800994a:	b480      	push	{r7}
 800994c:	b085      	sub	sp, #20
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d103      	bne.n	80099b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e00c      	b.n	80099cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3308      	adds	r3, #8
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	e002      	b.n	80099c0 <vListInsert+0x2e>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	60fb      	str	r3, [r7, #12]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d2f6      	bcs.n	80099ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
}
 80099f8:	bf00      	nop
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6892      	ldr	r2, [r2, #8]
 8009a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6852      	ldr	r2, [r2, #4]
 8009a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d103      	bne.n	8009a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689a      	ldr	r2, [r3, #8]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	1e5a      	subs	r2, r3, #1
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10b      	bne.n	8009a84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	e7fd      	b.n	8009a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a84:	f002 fcd8 	bl	800c438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a90:	68f9      	ldr	r1, [r7, #12]
 8009a92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	441a      	add	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	68f9      	ldr	r1, [r7, #12]
 8009ab8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	441a      	add	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	22ff      	movs	r2, #255	@ 0xff
 8009ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	22ff      	movs	r2, #255	@ 0xff
 8009ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d114      	bne.n	8009b04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01a      	beq.n	8009b18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3310      	adds	r3, #16
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fc74 	bl	800b3d4 <xTaskRemoveFromEventList>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d012      	beq.n	8009b18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009af2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b28 <xQueueGenericReset+0xd0>)
 8009af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	e009      	b.n	8009b18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3310      	adds	r3, #16
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fef1 	bl	80098f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3324      	adds	r3, #36	@ 0x24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff feec 	bl	80098f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b18:	f002 fcc0 	bl	800c49c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b1c:	2301      	movs	r3, #1
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08e      	sub	sp, #56	@ 0x38
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10b      	bne.n	8009b58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <xQueueGenericCreateStatic+0x56>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <xQueueGenericCreateStatic+0x5a>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <xQueueGenericCreateStatic+0x5c>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	623b      	str	r3, [r7, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <xQueueGenericCreateStatic+0x84>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <xQueueGenericCreateStatic+0x88>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e000      	b.n	8009bb6 <xQueueGenericCreateStatic+0x8a>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	61fb      	str	r3, [r7, #28]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bd2:	2350      	movs	r3, #80	@ 0x50
 8009bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b50      	cmp	r3, #80	@ 0x50
 8009bda:	d00b      	beq.n	8009bf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	61bb      	str	r3, [r7, #24]
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	e7fd      	b.n	8009bf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00d      	beq.n	8009c1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 f840 	bl	8009c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3730      	adds	r7, #48	@ 0x30
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b08a      	sub	sp, #40	@ 0x28
 8009c2a:	af02      	add	r7, sp, #8
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	4613      	mov	r3, r2
 8009c32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10b      	bne.n	8009c52 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	613b      	str	r3, [r7, #16]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	3350      	adds	r3, #80	@ 0x50
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 fd0b 	bl	800c67c <pvPortMalloc>
 8009c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d011      	beq.n	8009c92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	3350      	adds	r3, #80	@ 0x50
 8009c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c80:	79fa      	ldrb	r2, [r7, #7]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f805 	bl	8009c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c92:	69bb      	ldr	r3, [r7, #24]
	}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d103      	bne.n	8009cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cca:	2101      	movs	r1, #1
 8009ccc:	69b8      	ldr	r0, [r7, #24]
 8009cce:	f7ff fec3 	bl	8009a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	78fa      	ldrb	r2, [r7, #3]
 8009cd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b08a      	sub	sp, #40	@ 0x28
 8009ce6:	af02      	add	r7, sp, #8
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61bb      	str	r3, [r7, #24]
}
 8009d06:	bf00      	nop
 8009d08:	bf00      	nop
 8009d0a:	e7fd      	b.n	8009d08 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d90b      	bls.n	8009d2c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	617b      	str	r3, [r7, #20]
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	e7fd      	b.n	8009d28 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff fef8 	bl	8009b2c <xQueueGenericCreateStatic>
 8009d3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d4a:	69fb      	ldr	r3, [r7, #28]
	}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3720      	adds	r7, #32
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10b      	bne.n	8009d7c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	613b      	str	r3, [r7, #16]
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d90b      	bls.n	8009d9c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	60fb      	str	r3, [r7, #12]
}
 8009d96:	bf00      	nop
 8009d98:	bf00      	nop
 8009d9a:	e7fd      	b.n	8009d98 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff ff40 	bl	8009c26 <xQueueGenericCreate>
 8009da6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009db4:	697b      	ldr	r3, [r7, #20]
	}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	@ 0x38
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10b      	bne.n	8009df4 <xQueueGenericSend+0x34>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	e7fd      	b.n	8009df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <xQueueGenericSend+0x42>
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <xQueueGenericSend+0x46>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueGenericSend+0x48>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10b      	bne.n	8009e24 <xQueueGenericSend+0x64>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <xQueueGenericSend+0x72>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <xQueueGenericSend+0x76>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueGenericSend+0x78>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xQueueGenericSend+0x94>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	623b      	str	r3, [r7, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e54:	f001 fc84 	bl	800b760 <xTaskGetSchedulerState>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d102      	bne.n	8009e64 <xQueueGenericSend+0xa4>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <xQueueGenericSend+0xa8>
 8009e64:	2301      	movs	r3, #1
 8009e66:	e000      	b.n	8009e6a <xQueueGenericSend+0xaa>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10b      	bne.n	8009e86 <xQueueGenericSend+0xc6>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	61fb      	str	r3, [r7, #28]
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	e7fd      	b.n	8009e82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e86:	f002 fad7 	bl	800c438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d302      	bcc.n	8009e9c <xQueueGenericSend+0xdc>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d129      	bne.n	8009ef0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ea2:	f000 fc6d 	bl	800a780 <prvCopyDataToQueue>
 8009ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d010      	beq.n	8009ed2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	3324      	adds	r3, #36	@ 0x24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 fa8d 	bl	800b3d4 <xTaskRemoveFromEventList>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d013      	beq.n	8009ee8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e00a      	b.n	8009ee8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ed8:	4b39      	ldr	r3, [pc, #228]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ee8:	f002 fad8 	bl	800c49c <vPortExitCritical>
				return pdPASS;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e063      	b.n	8009fb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d103      	bne.n	8009efe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ef6:	f002 fad1 	bl	800c49c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e05c      	b.n	8009fb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f001 fac7 	bl	800b49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f12:	f002 fac3 	bl	800c49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f16:	f001 f82f 	bl	800af78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f1a:	f002 fa8d 	bl	800c438 <vPortEnterCritical>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericSend+0x174>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f3a:	b25b      	sxtb	r3, r3
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d103      	bne.n	8009f4a <xQueueGenericSend+0x18a>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f4a:	f002 faa7 	bl	800c49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f4e:	1d3a      	adds	r2, r7, #4
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 fab6 	bl	800b4c8 <xTaskCheckForTimeOut>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d124      	bne.n	8009fac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f64:	f000 fd04 	bl	800a970 <prvIsQueueFull>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d018      	beq.n	8009fa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	3310      	adds	r3, #16
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 f9da 	bl	800b330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f7e:	f000 fc8f 	bl	800a8a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f82:	f001 f807 	bl	800af94 <xTaskResumeAll>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f af7c 	bne.w	8009e86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc0 <xQueueGenericSend+0x200>)
 8009f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	e772      	b.n	8009e86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa2:	f000 fc7d 	bl	800a8a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fa6:	f000 fff5 	bl	800af94 <xTaskResumeAll>
 8009faa:	e76c      	b.n	8009e86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fae:	f000 fc77 	bl	800a8a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fb2:	f000 ffef 	bl	800af94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3738      	adds	r7, #56	@ 0x38
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b090      	sub	sp, #64	@ 0x40
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xQueueGenericSendFromISR+0x3e>
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueGenericSendFromISR+0x42>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <xQueueGenericSendFromISR+0x44>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10b      	bne.n	800a024 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a01e:	bf00      	nop
 800a020:	bf00      	nop
 800a022:	e7fd      	b.n	800a020 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d103      	bne.n	800a032 <xQueueGenericSendFromISR+0x6e>
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <xQueueGenericSendFromISR+0x72>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <xQueueGenericSendFromISR+0x74>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10b      	bne.n	800a054 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	623b      	str	r3, [r7, #32]
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	e7fd      	b.n	800a050 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a054:	f002 fad0 	bl	800c5f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a058:	f3ef 8211 	mrs	r2, BASEPRI
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61fa      	str	r2, [r7, #28]
 800a06e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a070:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d302      	bcc.n	800a086 <xQueueGenericSendFromISR+0xc2>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d12f      	bne.n	800a0e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a08c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a09c:	f000 fb70 	bl	800a780 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a8:	d112      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d016      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	3324      	adds	r3, #36	@ 0x24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 f98c 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00e      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00b      	beq.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e007      	b.n	800a0e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	b25a      	sxtb	r2, r3
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a0e4:	e001      	b.n	800a0ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3740      	adds	r7, #64	@ 0x40
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10b      	bne.n	800a12c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	623b      	str	r3, [r7, #32]
}
 800a126:	bf00      	nop
 800a128:	bf00      	nop
 800a12a:	e7fd      	b.n	800a128 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	61fb      	str	r3, [r7, #28]
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d103      	bne.n	800a15c <xQueueGiveFromISR+0x5c>
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <xQueueGiveFromISR+0x60>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e000      	b.n	800a162 <xQueueGiveFromISR+0x62>
 800a160:	2300      	movs	r3, #0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	61bb      	str	r3, [r7, #24]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a17e:	f002 fa3b 	bl	800c5f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a182:	f3ef 8211 	mrs	r2, BASEPRI
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	617a      	str	r2, [r7, #20]
 800a198:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a19a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d22b      	bcs.n	800a206 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d112      	bne.n	800a1f0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d016      	beq.n	800a200 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	3324      	adds	r3, #36	@ 0x24
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 f8fc 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00e      	beq.n	800a200 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	e007      	b.n	800a200 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	b25a      	sxtb	r2, r3
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a200:	2301      	movs	r3, #1
 800a202:	637b      	str	r3, [r7, #52]	@ 0x34
 800a204:	e001      	b.n	800a20a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f383 8811 	msr	BASEPRI, r3
}
 800a214:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3738      	adds	r7, #56	@ 0x38
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08c      	sub	sp, #48	@ 0x30
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10b      	bne.n	800a252 <xQueueReceive+0x32>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	623b      	str	r3, [r7, #32]
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d103      	bne.n	800a260 <xQueueReceive+0x40>
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d101      	bne.n	800a264 <xQueueReceive+0x44>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <xQueueReceive+0x46>
 800a264:	2300      	movs	r3, #0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10b      	bne.n	800a282 <xQueueReceive+0x62>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	61fb      	str	r3, [r7, #28]
}
 800a27c:	bf00      	nop
 800a27e:	bf00      	nop
 800a280:	e7fd      	b.n	800a27e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a282:	f001 fa6d 	bl	800b760 <xTaskGetSchedulerState>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <xQueueReceive+0x72>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <xQueueReceive+0x76>
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <xQueueReceive+0x78>
 800a296:	2300      	movs	r3, #0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10b      	bne.n	800a2b4 <xQueueReceive+0x94>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	61bb      	str	r3, [r7, #24]
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	e7fd      	b.n	800a2b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2b4:	f002 f8c0 	bl	800c438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01f      	beq.n	800a304 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c8:	f000 fac4 	bl	800a854 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	1e5a      	subs	r2, r3, #1
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00f      	beq.n	800a2fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	3310      	adds	r3, #16
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 f877 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2ec:	4b3c      	ldr	r3, [pc, #240]	@ (800a3e0 <xQueueReceive+0x1c0>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2fc:	f002 f8ce 	bl	800c49c <vPortExitCritical>
				return pdPASS;
 800a300:	2301      	movs	r3, #1
 800a302:	e069      	b.n	800a3d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d103      	bne.n	800a312 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a30a:	f002 f8c7 	bl	800c49c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a30e:	2300      	movs	r3, #0
 800a310:	e062      	b.n	800a3d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d106      	bne.n	800a326 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a318:	f107 0310 	add.w	r3, r7, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	f001 f8bd 	bl	800b49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a326:	f002 f8b9 	bl	800c49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a32a:	f000 fe25 	bl	800af78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a32e:	f002 f883 	bl	800c438 <vPortEnterCritical>
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a338:	b25b      	sxtb	r3, r3
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d103      	bne.n	800a348 <xQueueReceive+0x128>
 800a340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d103      	bne.n	800a35e <xQueueReceive+0x13e>
 800a356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a35e:	f002 f89d 	bl	800c49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a362:	1d3a      	adds	r2, r7, #4
 800a364:	f107 0310 	add.w	r3, r7, #16
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f001 f8ac 	bl	800b4c8 <xTaskCheckForTimeOut>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d123      	bne.n	800a3be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a378:	f000 fae4 	bl	800a944 <prvIsQueueEmpty>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d017      	beq.n	800a3b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	3324      	adds	r3, #36	@ 0x24
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 ffd0 	bl	800b330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a392:	f000 fa85 	bl	800a8a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a396:	f000 fdfd 	bl	800af94 <xTaskResumeAll>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d189      	bne.n	800a2b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e0 <xQueueReceive+0x1c0>)
 800a3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	e780      	b.n	800a2b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3b4:	f000 fa74 	bl	800a8a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b8:	f000 fdec 	bl	800af94 <xTaskResumeAll>
 800a3bc:	e77a      	b.n	800a2b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c0:	f000 fa6e 	bl	800a8a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3c4:	f000 fde6 	bl	800af94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ca:	f000 fabb 	bl	800a944 <prvIsQueueEmpty>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f43f af6f 	beq.w	800a2b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3730      	adds	r7, #48	@ 0x30
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	@ 0x38
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10b      	bne.n	800a418 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	623b      	str	r3, [r7, #32]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	61fb      	str	r3, [r7, #28]
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a438:	f001 f992 	bl	800b760 <xTaskGetSchedulerState>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <xQueueSemaphoreTake+0x64>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <xQueueSemaphoreTake+0x68>
 800a448:	2301      	movs	r3, #1
 800a44a:	e000      	b.n	800a44e <xQueueSemaphoreTake+0x6a>
 800a44c:	2300      	movs	r3, #0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10b      	bne.n	800a46a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	61bb      	str	r3, [r7, #24]
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	e7fd      	b.n	800a466 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a46a:	f001 ffe5 	bl	800c438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a472:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a476:	2b00      	cmp	r3, #0
 800a478:	d024      	beq.n	800a4c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	1e5a      	subs	r2, r3, #1
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d104      	bne.n	800a494 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a48a:	f001 fae3 	bl	800ba54 <pvTaskIncrementMutexHeldCount>
 800a48e:	4602      	mov	r2, r0
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a492:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49e:	3310      	adds	r3, #16
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 ff97 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4ac:	4b54      	ldr	r3, [pc, #336]	@ (800a600 <xQueueSemaphoreTake+0x21c>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4bc:	f001 ffee 	bl	800c49c <vPortExitCritical>
				return pdPASS;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e098      	b.n	800a5f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d112      	bne.n	800a4f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	617b      	str	r3, [r7, #20]
}
 800a4e2:	bf00      	nop
 800a4e4:	bf00      	nop
 800a4e6:	e7fd      	b.n	800a4e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a4e8:	f001 ffd8 	bl	800c49c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e082      	b.n	800a5f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4f6:	f107 030c 	add.w	r3, r7, #12
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 ffce 	bl	800b49c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a504:	f001 ffca 	bl	800c49c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a508:	f000 fd36 	bl	800af78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a50c:	f001 ff94 	bl	800c438 <vPortEnterCritical>
 800a510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a512:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a516:	b25b      	sxtb	r3, r3
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51c:	d103      	bne.n	800a526 <xQueueSemaphoreTake+0x142>
 800a51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a52c:	b25b      	sxtb	r3, r3
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d103      	bne.n	800a53c <xQueueSemaphoreTake+0x158>
 800a534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a53c:	f001 ffae 	bl	800c49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a540:	463a      	mov	r2, r7
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 ffbd 	bl	800b4c8 <xTaskCheckForTimeOut>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d132      	bne.n	800a5ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a556:	f000 f9f5 	bl	800a944 <prvIsQueueEmpty>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d026      	beq.n	800a5ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d109      	bne.n	800a57c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a568:	f001 ff66 	bl	800c438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	4618      	mov	r0, r3
 800a572:	f001 f913 	bl	800b79c <xTaskPriorityInherit>
 800a576:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a578:	f001 ff90 	bl	800c49c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57e:	3324      	adds	r3, #36	@ 0x24
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fed3 	bl	800b330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a58a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a58c:	f000 f988 	bl	800a8a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a590:	f000 fd00 	bl	800af94 <xTaskResumeAll>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	f47f af67 	bne.w	800a46a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a59c:	4b18      	ldr	r3, [pc, #96]	@ (800a600 <xQueueSemaphoreTake+0x21c>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	e75d      	b.n	800a46a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a5ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5b0:	f000 f976 	bl	800a8a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5b4:	f000 fcee 	bl	800af94 <xTaskResumeAll>
 800a5b8:	e757      	b.n	800a46a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a5ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5bc:	f000 f970 	bl	800a8a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5c0:	f000 fce8 	bl	800af94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5c6:	f000 f9bd 	bl	800a944 <prvIsQueueEmpty>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f43f af4c 	beq.w	800a46a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00d      	beq.n	800a5f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a5d8:	f001 ff2e 	bl	800c438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a5dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5de:	f000 f8b7 	bl	800a750 <prvGetDisinheritPriorityAfterTimeout>
 800a5e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 f9ae 	bl	800b94c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a5f0:	f001 ff54 	bl	800c49c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3738      	adds	r7, #56	@ 0x38
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08e      	sub	sp, #56	@ 0x38
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	623b      	str	r3, [r7, #32]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <xQueueReceiveFromISR+0x3c>
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <xQueueReceiveFromISR+0x40>
 800a640:	2301      	movs	r3, #1
 800a642:	e000      	b.n	800a646 <xQueueReceiveFromISR+0x42>
 800a644:	2300      	movs	r3, #0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	61fb      	str	r3, [r7, #28]
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	e7fd      	b.n	800a65e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a662:	f001 ffc9 	bl	800c5f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a666:	f3ef 8211 	mrs	r2, BASEPRI
 800a66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	61ba      	str	r2, [r7, #24]
 800a67c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a67e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d02f      	beq.n	800a6ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a69c:	f000 f8da 	bl	800a854 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	1e5a      	subs	r2, r3, #1
 800a6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d112      	bne.n	800a6d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d016      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fe88 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00e      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e007      	b.n	800a6e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6dc:	3301      	adds	r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	b25a      	sxtb	r2, r3
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ec:	e001      	b.n	800a6f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f383 8811 	msr	BASEPRI, r3
}
 800a6fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a700:	4618      	mov	r0, r3
 800a702:	3738      	adds	r7, #56	@ 0x38
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10b      	bne.n	800a732 <vQueueDelete+0x2a>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60bb      	str	r3, [r7, #8]
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	e7fd      	b.n	800a72e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f95e 	bl	800a9f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f002 f868 	bl	800c818 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a748:	bf00      	nop
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d006      	beq.n	800a76e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e001      	b.n	800a772 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a772:	68fb      	ldr	r3, [r7, #12]
	}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10d      	bne.n	800a7ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d14d      	bne.n	800a842 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 f85e 	bl	800b86c <xTaskPriorityDisinherit>
 800a7b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	609a      	str	r2, [r3, #8]
 800a7b8:	e043      	b.n	800a842 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d119      	bne.n	800a7f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6858      	ldr	r0, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	f003 fd2c 	bl	800e228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d8:	441a      	add	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d32b      	bcc.n	800a842 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	605a      	str	r2, [r3, #4]
 800a7f2:	e026      	b.n	800a842 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68d8      	ldr	r0, [r3, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	f003 fd12 	bl	800e228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80c:	425b      	negs	r3, r3
 800a80e:	441a      	add	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d207      	bcs.n	800a830 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a828:	425b      	negs	r3, r3
 800a82a:	441a      	add	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d105      	bne.n	800a842 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	3b01      	subs	r3, #1
 800a840:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a84a:	697b      	ldr	r3, [r7, #20]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d018      	beq.n	800a898 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86e:	441a      	add	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d303      	bcc.n	800a888 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68d9      	ldr	r1, [r3, #12]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a890:	461a      	mov	r2, r3
 800a892:	6838      	ldr	r0, [r7, #0]
 800a894:	f003 fcc8 	bl	800e228 <memcpy>
	}
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8a8:	f001 fdc6 	bl	800c438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8b4:	e011      	b.n	800a8da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d012      	beq.n	800a8e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	3324      	adds	r3, #36	@ 0x24
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fd86 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8ce:	f000 fe5f 	bl	800b590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dce9      	bgt.n	800a8b6 <prvUnlockQueue+0x16>
 800a8e2:	e000      	b.n	800a8e6 <prvUnlockQueue+0x46>
					break;
 800a8e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22ff      	movs	r2, #255	@ 0xff
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a8ee:	f001 fdd5 	bl	800c49c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8f2:	f001 fda1 	bl	800c438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8fe:	e011      	b.n	800a924 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d012      	beq.n	800a92e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3310      	adds	r3, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fd61 	bl	800b3d4 <xTaskRemoveFromEventList>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a918:	f000 fe3a 	bl	800b590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	3b01      	subs	r3, #1
 800a920:	b2db      	uxtb	r3, r3
 800a922:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dce9      	bgt.n	800a900 <prvUnlockQueue+0x60>
 800a92c:	e000      	b.n	800a930 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a92e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	22ff      	movs	r2, #255	@ 0xff
 800a934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a938:	f001 fdb0 	bl	800c49c <vPortExitCritical>
}
 800a93c:	bf00      	nop
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a94c:	f001 fd74 	bl	800c438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a958:	2301      	movs	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	e001      	b.n	800a962 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a962:	f001 fd9b 	bl	800c49c <vPortExitCritical>

	return xReturn;
 800a966:	68fb      	ldr	r3, [r7, #12]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a978:	f001 fd5e 	bl	800c438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a984:	429a      	cmp	r2, r3
 800a986:	d102      	bne.n	800a98e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a988:	2301      	movs	r3, #1
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	e001      	b.n	800a992 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a992:	f001 fd83 	bl	800c49c <vPortExitCritical>

	return xReturn;
 800a996:	68fb      	ldr	r3, [r7, #12]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e014      	b.n	800a9da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9b0:	4a0f      	ldr	r2, [pc, #60]	@ (800a9f0 <vQueueAddToRegistry+0x50>)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9bc:	490c      	ldr	r1, [pc, #48]	@ (800a9f0 <vQueueAddToRegistry+0x50>)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9c6:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f0 <vQueueAddToRegistry+0x50>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	4413      	add	r3, r2
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9d2:	e006      	b.n	800a9e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b07      	cmp	r3, #7
 800a9de:	d9e7      	bls.n	800a9b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	20001198 	.word	0x20001198

0800a9f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e016      	b.n	800aa30 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa02:	4a10      	ldr	r2, [pc, #64]	@ (800aa44 <vQueueUnregisterQueue+0x50>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	4413      	add	r3, r2
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d10b      	bne.n	800aa2a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa12:	4a0c      	ldr	r2, [pc, #48]	@ (800aa44 <vQueueUnregisterQueue+0x50>)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2100      	movs	r1, #0
 800aa18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa1c:	4a09      	ldr	r2, [pc, #36]	@ (800aa44 <vQueueUnregisterQueue+0x50>)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4413      	add	r3, r2
 800aa24:	2200      	movs	r2, #0
 800aa26:	605a      	str	r2, [r3, #4]
				break;
 800aa28:	e006      	b.n	800aa38 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b07      	cmp	r3, #7
 800aa34:	d9e5      	bls.n	800aa02 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	20001198 	.word	0x20001198

0800aa48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa58:	f001 fcee 	bl	800c438 <vPortEnterCritical>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa62:	b25b      	sxtb	r3, r3
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d103      	bne.n	800aa72 <vQueueWaitForMessageRestricted+0x2a>
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa78:	b25b      	sxtb	r3, r3
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d103      	bne.n	800aa88 <vQueueWaitForMessageRestricted+0x40>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa88:	f001 fd08 	bl	800c49c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	3324      	adds	r3, #36	@ 0x24
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fc6d 	bl	800b37c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaa2:	6978      	ldr	r0, [r7, #20]
 800aaa4:	f7ff fefc 	bl	800a8a0 <prvUnlockQueue>
	}
 800aaa8:	bf00      	nop
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08e      	sub	sp, #56	@ 0x38
 800aab4:	af04      	add	r7, sp, #16
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10b      	bne.n	800aadc <xTaskCreateStatic+0x2c>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	623b      	str	r3, [r7, #32]
}
 800aad6:	bf00      	nop
 800aad8:	bf00      	nop
 800aada:	e7fd      	b.n	800aad8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10b      	bne.n	800aafa <xTaskCreateStatic+0x4a>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	61fb      	str	r3, [r7, #28]
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop
 800aaf8:	e7fd      	b.n	800aaf6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aafa:	23a8      	movs	r3, #168	@ 0xa8
 800aafc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	2ba8      	cmp	r3, #168	@ 0xa8
 800ab02:	d00b      	beq.n	800ab1c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	61bb      	str	r3, [r7, #24]
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01e      	beq.n	800ab62 <xTaskCreateStatic+0xb2>
 800ab24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d01b      	beq.n	800ab62 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab32:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9303      	str	r3, [sp, #12]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	f107 0314 	add.w	r3, r7, #20
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f851 	bl	800abfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab5c:	f000 f8f6 	bl	800ad4c <prvAddNewTaskToReadyList>
 800ab60:	e001      	b.n	800ab66 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab66:	697b      	ldr	r3, [r7, #20]
	}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3728      	adds	r7, #40	@ 0x28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08c      	sub	sp, #48	@ 0x30
 800ab74:	af04      	add	r7, sp, #16
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab80:	88fb      	ldrh	r3, [r7, #6]
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 fd79 	bl	800c67c <pvPortMalloc>
 800ab8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00e      	beq.n	800abb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab92:	20a8      	movs	r0, #168	@ 0xa8
 800ab94:	f001 fd72 	bl	800c67c <pvPortMalloc>
 800ab98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	631a      	str	r2, [r3, #48]	@ 0x30
 800aba6:	e005      	b.n	800abb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aba8:	6978      	ldr	r0, [r7, #20]
 800abaa:	f001 fe35 	bl	800c818 <vPortFree>
 800abae:	e001      	b.n	800abb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d017      	beq.n	800abea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abc2:	88fa      	ldrh	r2, [r7, #6]
 800abc4:	2300      	movs	r3, #0
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	9302      	str	r3, [sp, #8]
 800abcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 f80f 	bl	800abfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abde:	69f8      	ldr	r0, [r7, #28]
 800abe0:	f000 f8b4 	bl	800ad4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abe4:	2301      	movs	r3, #1
 800abe6:	61bb      	str	r3, [r7, #24]
 800abe8:	e002      	b.n	800abf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abea:	f04f 33ff 	mov.w	r3, #4294967295
 800abee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abf0:	69bb      	ldr	r3, [r7, #24]
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3720      	adds	r7, #32
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	461a      	mov	r2, r3
 800ac14:	21a5      	movs	r1, #165	@ 0xa5
 800ac16:	f003 fa65 	bl	800e0e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac24:	3b01      	subs	r3, #1
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	617b      	str	r3, [r7, #20]
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	e7fd      	b.n	800ac52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01f      	beq.n	800ac9c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	e012      	b.n	800ac88 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	4413      	add	r3, r2
 800ac68:	7819      	ldrb	r1, [r3, #0]
 800ac6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	4413      	add	r3, r2
 800ac70:	3334      	adds	r3, #52	@ 0x34
 800ac72:	460a      	mov	r2, r1
 800ac74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d006      	beq.n	800ac90 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	3301      	adds	r3, #1
 800ac86:	61fb      	str	r3, [r7, #28]
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	2b0f      	cmp	r3, #15
 800ac8c:	d9e9      	bls.n	800ac62 <prvInitialiseNewTask+0x66>
 800ac8e:	e000      	b.n	800ac92 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac9a:	e003      	b.n	800aca4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	2b37      	cmp	r3, #55	@ 0x37
 800aca8:	d901      	bls.n	800acae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acaa:	2337      	movs	r3, #55	@ 0x37
 800acac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acb8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbc:	2200      	movs	r2, #0
 800acbe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc2:	3304      	adds	r3, #4
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe fe33 	bl	8009930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	3318      	adds	r3, #24
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fe2e 	bl	8009930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ace4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ace8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	2200      	movs	r2, #0
 800acee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	3354      	adds	r3, #84	@ 0x54
 800acfe:	224c      	movs	r2, #76	@ 0x4c
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f003 f9ee 	bl	800e0e4 <memset>
 800ad08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0a:	4a0d      	ldr	r2, [pc, #52]	@ (800ad40 <prvInitialiseNewTask+0x144>)
 800ad0c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	4a0c      	ldr	r2, [pc, #48]	@ (800ad44 <prvInitialiseNewTask+0x148>)
 800ad12:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	4a0c      	ldr	r2, [pc, #48]	@ (800ad48 <prvInitialiseNewTask+0x14c>)
 800ad18:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	68f9      	ldr	r1, [r7, #12]
 800ad1e:	69b8      	ldr	r0, [r7, #24]
 800ad20:	f001 fa5a 	bl	800c1d8 <pxPortInitialiseStack>
 800ad24:	4602      	mov	r2, r0
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad36:	bf00      	nop
 800ad38:	3720      	adds	r7, #32
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20005434 	.word	0x20005434
 800ad44:	2000549c 	.word	0x2000549c
 800ad48:	20005504 	.word	0x20005504

0800ad4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad54:	f001 fb70 	bl	800c438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad58:	4b2d      	ldr	r3, [pc, #180]	@ (800ae10 <prvAddNewTaskToReadyList+0xc4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	4a2c      	ldr	r2, [pc, #176]	@ (800ae10 <prvAddNewTaskToReadyList+0xc4>)
 800ad60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad62:	4b2c      	ldr	r3, [pc, #176]	@ (800ae14 <prvAddNewTaskToReadyList+0xc8>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae14 <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad70:	4b27      	ldr	r3, [pc, #156]	@ (800ae10 <prvAddNewTaskToReadyList+0xc4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d110      	bne.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad78:	f000 fc2e 	bl	800b5d8 <prvInitialiseTaskLists>
 800ad7c:	e00d      	b.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad7e:	4b26      	ldr	r3, [pc, #152]	@ (800ae18 <prvAddNewTaskToReadyList+0xcc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad86:	4b23      	ldr	r3, [pc, #140]	@ (800ae14 <prvAddNewTaskToReadyList+0xc8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d802      	bhi.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad94:	4a1f      	ldr	r2, [pc, #124]	@ (800ae14 <prvAddNewTaskToReadyList+0xc8>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad9a:	4b20      	ldr	r3, [pc, #128]	@ (800ae1c <prvAddNewTaskToReadyList+0xd0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae1c <prvAddNewTaskToReadyList+0xd0>)
 800ada2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ada4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae1c <prvAddNewTaskToReadyList+0xd0>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb0:	4b1b      	ldr	r3, [pc, #108]	@ (800ae20 <prvAddNewTaskToReadyList+0xd4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d903      	bls.n	800adc0 <prvAddNewTaskToReadyList+0x74>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbc:	4a18      	ldr	r2, [pc, #96]	@ (800ae20 <prvAddNewTaskToReadyList+0xd4>)
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc4:	4613      	mov	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4a15      	ldr	r2, [pc, #84]	@ (800ae24 <prvAddNewTaskToReadyList+0xd8>)
 800adce:	441a      	add	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3304      	adds	r3, #4
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7fe fdb7 	bl	800994a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800addc:	f001 fb5e 	bl	800c49c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ade0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae18 <prvAddNewTaskToReadyList+0xcc>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00e      	beq.n	800ae06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ade8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae14 <prvAddNewTaskToReadyList+0xc8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d207      	bcs.n	800ae06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae28 <prvAddNewTaskToReadyList+0xdc>)
 800adf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	200016ac 	.word	0x200016ac
 800ae14:	200011d8 	.word	0x200011d8
 800ae18:	200016b8 	.word	0x200016b8
 800ae1c:	200016c8 	.word	0x200016c8
 800ae20:	200016b4 	.word	0x200016b4
 800ae24:	200011dc 	.word	0x200011dc
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d018      	beq.n	800ae70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae3e:	4b14      	ldr	r3, [pc, #80]	@ (800ae90 <vTaskDelay+0x64>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00b      	beq.n	800ae5e <vTaskDelay+0x32>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	60bb      	str	r3, [r7, #8]
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	e7fd      	b.n	800ae5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae5e:	f000 f88b 	bl	800af78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae62:	2100      	movs	r1, #0
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fe09 	bl	800ba7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae6a:	f000 f893 	bl	800af94 <xTaskResumeAll>
 800ae6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d107      	bne.n	800ae86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae76:	4b07      	ldr	r3, [pc, #28]	@ (800ae94 <vTaskDelay+0x68>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200016d4 	.word	0x200016d4
 800ae94:	e000ed04 	.word	0xe000ed04

0800ae98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	@ 0x28
 800ae9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aea6:	463a      	mov	r2, r7
 800aea8:	1d39      	adds	r1, r7, #4
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe fcea 	bl	8009888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	9202      	str	r2, [sp, #8]
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	2300      	movs	r3, #0
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	2300      	movs	r3, #0
 800aec4:	460a      	mov	r2, r1
 800aec6:	4924      	ldr	r1, [pc, #144]	@ (800af58 <vTaskStartScheduler+0xc0>)
 800aec8:	4824      	ldr	r0, [pc, #144]	@ (800af5c <vTaskStartScheduler+0xc4>)
 800aeca:	f7ff fdf1 	bl	800aab0 <xTaskCreateStatic>
 800aece:	4603      	mov	r3, r0
 800aed0:	4a23      	ldr	r2, [pc, #140]	@ (800af60 <vTaskStartScheduler+0xc8>)
 800aed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aed4:	4b22      	ldr	r3, [pc, #136]	@ (800af60 <vTaskStartScheduler+0xc8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aedc:	2301      	movs	r3, #1
 800aede:	617b      	str	r3, [r7, #20]
 800aee0:	e001      	b.n	800aee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d102      	bne.n	800aef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aeec:	f000 fe1a 	bl	800bb24 <xTimerCreateTimerTask>
 800aef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d11b      	bne.n	800af30 <vTaskStartScheduler+0x98>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	613b      	str	r3, [r7, #16]
}
 800af0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af0c:	4b15      	ldr	r3, [pc, #84]	@ (800af64 <vTaskStartScheduler+0xcc>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3354      	adds	r3, #84	@ 0x54
 800af12:	4a15      	ldr	r2, [pc, #84]	@ (800af68 <vTaskStartScheduler+0xd0>)
 800af14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af16:	4b15      	ldr	r3, [pc, #84]	@ (800af6c <vTaskStartScheduler+0xd4>)
 800af18:	f04f 32ff 	mov.w	r2, #4294967295
 800af1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af1e:	4b14      	ldr	r3, [pc, #80]	@ (800af70 <vTaskStartScheduler+0xd8>)
 800af20:	2201      	movs	r2, #1
 800af22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af24:	4b13      	ldr	r3, [pc, #76]	@ (800af74 <vTaskStartScheduler+0xdc>)
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af2a:	f001 f9e1 	bl	800c2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af2e:	e00f      	b.n	800af50 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af36:	d10b      	bne.n	800af50 <vTaskStartScheduler+0xb8>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60fb      	str	r3, [r7, #12]
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	e7fd      	b.n	800af4c <vTaskStartScheduler+0xb4>
}
 800af50:	bf00      	nop
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	0800ea50 	.word	0x0800ea50
 800af5c:	0800b5a9 	.word	0x0800b5a9
 800af60:	200016d0 	.word	0x200016d0
 800af64:	200011d8 	.word	0x200011d8
 800af68:	20000038 	.word	0x20000038
 800af6c:	200016cc 	.word	0x200016cc
 800af70:	200016b8 	.word	0x200016b8
 800af74:	200016b0 	.word	0x200016b0

0800af78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af7c:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <vTaskSuspendAll+0x18>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3301      	adds	r3, #1
 800af82:	4a03      	ldr	r2, [pc, #12]	@ (800af90 <vTaskSuspendAll+0x18>)
 800af84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af86:	bf00      	nop
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	200016d4 	.word	0x200016d4

0800af94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afa2:	4b42      	ldr	r3, [pc, #264]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10b      	bne.n	800afc2 <xTaskResumeAll+0x2e>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	603b      	str	r3, [r7, #0]
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	e7fd      	b.n	800afbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afc2:	f001 fa39 	bl	800c438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afc6:	4b39      	ldr	r3, [pc, #228]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a37      	ldr	r2, [pc, #220]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd0:	4b36      	ldr	r3, [pc, #216]	@ (800b0ac <xTaskResumeAll+0x118>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d162      	bne.n	800b09e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afd8:	4b35      	ldr	r3, [pc, #212]	@ (800b0b0 <xTaskResumeAll+0x11c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d05e      	beq.n	800b09e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afe0:	e02f      	b.n	800b042 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe2:	4b34      	ldr	r3, [pc, #208]	@ (800b0b4 <xTaskResumeAll+0x120>)
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3318      	adds	r3, #24
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe fd08 	bl	8009a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3304      	adds	r3, #4
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fd03 	bl	8009a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b002:	4b2d      	ldr	r3, [pc, #180]	@ (800b0b8 <xTaskResumeAll+0x124>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d903      	bls.n	800b012 <xTaskResumeAll+0x7e>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b8 <xTaskResumeAll+0x124>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4a27      	ldr	r2, [pc, #156]	@ (800b0bc <xTaskResumeAll+0x128>)
 800b020:	441a      	add	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3304      	adds	r3, #4
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fe fc8e 	bl	800994a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b032:	4b23      	ldr	r3, [pc, #140]	@ (800b0c0 <xTaskResumeAll+0x12c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	429a      	cmp	r2, r3
 800b03a:	d302      	bcc.n	800b042 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b03c:	4b21      	ldr	r3, [pc, #132]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b042:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b4 <xTaskResumeAll+0x120>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1cb      	bne.n	800afe2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b050:	f000 fb66 	bl	800b720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b054:	4b1c      	ldr	r3, [pc, #112]	@ (800b0c8 <xTaskResumeAll+0x134>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b060:	f000 f846 	bl	800b0f0 <xTaskIncrementTick>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b06a:	4b16      	ldr	r3, [pc, #88]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3b01      	subs	r3, #1
 800b074:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f1      	bne.n	800b060 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b07c:	4b12      	ldr	r3, [pc, #72]	@ (800b0c8 <xTaskResumeAll+0x134>)
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <xTaskResumeAll+0x130>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b08a:	2301      	movs	r3, #1
 800b08c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b08e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0cc <xTaskResumeAll+0x138>)
 800b090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b09e:	f001 f9fd 	bl	800c49c <vPortExitCritical>

	return xAlreadyYielded;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	200016d4 	.word	0x200016d4
 800b0b0:	200016ac 	.word	0x200016ac
 800b0b4:	2000166c 	.word	0x2000166c
 800b0b8:	200016b4 	.word	0x200016b4
 800b0bc:	200011dc 	.word	0x200011dc
 800b0c0:	200011d8 	.word	0x200011d8
 800b0c4:	200016c0 	.word	0x200016c0
 800b0c8:	200016bc 	.word	0x200016bc
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0d6:	4b05      	ldr	r3, [pc, #20]	@ (800b0ec <xTaskGetTickCount+0x1c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0dc:	687b      	ldr	r3, [r7, #4]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	200016b0 	.word	0x200016b0

0800b0f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b238 <xTaskIncrementTick+0x148>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 8090 	bne.w	800b224 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b104:	4b4d      	ldr	r3, [pc, #308]	@ (800b23c <xTaskIncrementTick+0x14c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b10c:	4a4b      	ldr	r2, [pc, #300]	@ (800b23c <xTaskIncrementTick+0x14c>)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d121      	bne.n	800b15c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b118:	4b49      	ldr	r3, [pc, #292]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	603b      	str	r3, [r7, #0]
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	e7fd      	b.n	800b136 <xTaskIncrementTick+0x46>
 800b13a:	4b41      	ldr	r3, [pc, #260]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	4b40      	ldr	r3, [pc, #256]	@ (800b244 <xTaskIncrementTick+0x154>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a3e      	ldr	r2, [pc, #248]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	4a3e      	ldr	r2, [pc, #248]	@ (800b244 <xTaskIncrementTick+0x154>)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	4b3e      	ldr	r3, [pc, #248]	@ (800b248 <xTaskIncrementTick+0x158>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a3c      	ldr	r2, [pc, #240]	@ (800b248 <xTaskIncrementTick+0x158>)
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	f000 fae2 	bl	800b720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b15c:	4b3b      	ldr	r3, [pc, #236]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	429a      	cmp	r2, r3
 800b164:	d349      	bcc.n	800b1fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b166:	4b36      	ldr	r3, [pc, #216]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b170:	4b36      	ldr	r3, [pc, #216]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b172:	f04f 32ff 	mov.w	r2, #4294967295
 800b176:	601a      	str	r2, [r3, #0]
					break;
 800b178:	e03f      	b.n	800b1fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17a:	4b31      	ldr	r3, [pc, #196]	@ (800b240 <xTaskIncrementTick+0x150>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d203      	bcs.n	800b19a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b192:	4a2e      	ldr	r2, [pc, #184]	@ (800b24c <xTaskIncrementTick+0x15c>)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b198:	e02f      	b.n	800b1fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fc30 	bl	8009a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d004      	beq.n	800b1b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	3318      	adds	r3, #24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fc27 	bl	8009a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ba:	4b25      	ldr	r3, [pc, #148]	@ (800b250 <xTaskIncrementTick+0x160>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d903      	bls.n	800b1ca <xTaskIncrementTick+0xda>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	4a22      	ldr	r2, [pc, #136]	@ (800b250 <xTaskIncrementTick+0x160>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b254 <xTaskIncrementTick+0x164>)
 800b1d8:	441a      	add	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f7fe fbb2 	bl	800994a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b258 <xTaskIncrementTick+0x168>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d3b8      	bcc.n	800b166 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f8:	e7b5      	b.n	800b166 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1fa:	4b17      	ldr	r3, [pc, #92]	@ (800b258 <xTaskIncrementTick+0x168>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b200:	4914      	ldr	r1, [pc, #80]	@ (800b254 <xTaskIncrementTick+0x164>)
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d901      	bls.n	800b216 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b216:	4b11      	ldr	r3, [pc, #68]	@ (800b25c <xTaskIncrementTick+0x16c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d007      	beq.n	800b22e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	e004      	b.n	800b22e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b224:	4b0e      	ldr	r3, [pc, #56]	@ (800b260 <xTaskIncrementTick+0x170>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3301      	adds	r3, #1
 800b22a:	4a0d      	ldr	r2, [pc, #52]	@ (800b260 <xTaskIncrementTick+0x170>)
 800b22c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200016d4 	.word	0x200016d4
 800b23c:	200016b0 	.word	0x200016b0
 800b240:	20001664 	.word	0x20001664
 800b244:	20001668 	.word	0x20001668
 800b248:	200016c4 	.word	0x200016c4
 800b24c:	200016cc 	.word	0x200016cc
 800b250:	200016b4 	.word	0x200016b4
 800b254:	200011dc 	.word	0x200011dc
 800b258:	200011d8 	.word	0x200011d8
 800b25c:	200016c0 	.word	0x200016c0
 800b260:	200016bc 	.word	0x200016bc

0800b264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b26a:	4b2b      	ldr	r3, [pc, #172]	@ (800b318 <vTaskSwitchContext+0xb4>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b272:	4b2a      	ldr	r3, [pc, #168]	@ (800b31c <vTaskSwitchContext+0xb8>)
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b278:	e047      	b.n	800b30a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b27a:	4b28      	ldr	r3, [pc, #160]	@ (800b31c <vTaskSwitchContext+0xb8>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b280:	4b27      	ldr	r3, [pc, #156]	@ (800b320 <vTaskSwitchContext+0xbc>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	e011      	b.n	800b2ac <vTaskSwitchContext+0x48>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	607b      	str	r3, [r7, #4]
}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	e7fd      	b.n	800b2a2 <vTaskSwitchContext+0x3e>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	491d      	ldr	r1, [pc, #116]	@ (800b324 <vTaskSwitchContext+0xc0>)
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0e3      	beq.n	800b288 <vTaskSwitchContext+0x24>
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4a16      	ldr	r2, [pc, #88]	@ (800b324 <vTaskSwitchContext+0xc0>)
 800b2cc:	4413      	add	r3, r2
 800b2ce:	60bb      	str	r3, [r7, #8]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d104      	bne.n	800b2f0 <vTaskSwitchContext+0x8c>
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	4a0c      	ldr	r2, [pc, #48]	@ (800b328 <vTaskSwitchContext+0xc4>)
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	4a09      	ldr	r2, [pc, #36]	@ (800b320 <vTaskSwitchContext+0xbc>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b300:	4b09      	ldr	r3, [pc, #36]	@ (800b328 <vTaskSwitchContext+0xc4>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3354      	adds	r3, #84	@ 0x54
 800b306:	4a09      	ldr	r2, [pc, #36]	@ (800b32c <vTaskSwitchContext+0xc8>)
 800b308:	6013      	str	r3, [r2, #0]
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	200016d4 	.word	0x200016d4
 800b31c:	200016c0 	.word	0x200016c0
 800b320:	200016b4 	.word	0x200016b4
 800b324:	200011dc 	.word	0x200011dc
 800b328:	200011d8 	.word	0x200011d8
 800b32c:	20000038 	.word	0x20000038

0800b330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10b      	bne.n	800b358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b358:	4b07      	ldr	r3, [pc, #28]	@ (800b378 <vTaskPlaceOnEventList+0x48>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3318      	adds	r3, #24
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7fe fb16 	bl	8009992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b366:	2101      	movs	r1, #1
 800b368:	6838      	ldr	r0, [r7, #0]
 800b36a:	f000 fb87 	bl	800ba7c <prvAddCurrentTaskToDelayedList>
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200011d8 	.word	0x200011d8

0800b37c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10b      	bne.n	800b3a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	617b      	str	r3, [r7, #20]
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop
 800b3a4:	e7fd      	b.n	800b3a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7fe facb 	bl	800994a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b3be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	68b8      	ldr	r0, [r7, #8]
 800b3c4:	f000 fb5a 	bl	800ba7c <prvAddCurrentTaskToDelayedList>
	}
 800b3c8:	bf00      	nop
 800b3ca:	3718      	adds	r7, #24
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	200011d8 	.word	0x200011d8

0800b3d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	60fb      	str	r3, [r7, #12]
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	e7fd      	b.n	800b3fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3318      	adds	r3, #24
 800b406:	4618      	mov	r0, r3
 800b408:	f7fe fafc 	bl	8009a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b40c:	4b1d      	ldr	r3, [pc, #116]	@ (800b484 <xTaskRemoveFromEventList+0xb0>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d11d      	bne.n	800b450 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	3304      	adds	r3, #4
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe faf3 	bl	8009a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b422:	4b19      	ldr	r3, [pc, #100]	@ (800b488 <xTaskRemoveFromEventList+0xb4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d903      	bls.n	800b432 <xTaskRemoveFromEventList+0x5e>
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42e:	4a16      	ldr	r2, [pc, #88]	@ (800b488 <xTaskRemoveFromEventList+0xb4>)
 800b430:	6013      	str	r3, [r2, #0]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4a13      	ldr	r2, [pc, #76]	@ (800b48c <xTaskRemoveFromEventList+0xb8>)
 800b440:	441a      	add	r2, r3
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	3304      	adds	r3, #4
 800b446:	4619      	mov	r1, r3
 800b448:	4610      	mov	r0, r2
 800b44a:	f7fe fa7e 	bl	800994a <vListInsertEnd>
 800b44e:	e005      	b.n	800b45c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3318      	adds	r3, #24
 800b454:	4619      	mov	r1, r3
 800b456:	480e      	ldr	r0, [pc, #56]	@ (800b490 <xTaskRemoveFromEventList+0xbc>)
 800b458:	f7fe fa77 	bl	800994a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b460:	4b0c      	ldr	r3, [pc, #48]	@ (800b494 <xTaskRemoveFromEventList+0xc0>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b466:	429a      	cmp	r2, r3
 800b468:	d905      	bls.n	800b476 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b46a:	2301      	movs	r3, #1
 800b46c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b46e:	4b0a      	ldr	r3, [pc, #40]	@ (800b498 <xTaskRemoveFromEventList+0xc4>)
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e001      	b.n	800b47a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b47a:	697b      	ldr	r3, [r7, #20]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	200016d4 	.word	0x200016d4
 800b488:	200016b4 	.word	0x200016b4
 800b48c:	200011dc 	.word	0x200011dc
 800b490:	2000166c 	.word	0x2000166c
 800b494:	200011d8 	.word	0x200011d8
 800b498:	200016c0 	.word	0x200016c0

0800b49c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4a4:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <vTaskInternalSetTimeOutState+0x24>)
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4ac:	4b05      	ldr	r3, [pc, #20]	@ (800b4c4 <vTaskInternalSetTimeOutState+0x28>)
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	605a      	str	r2, [r3, #4]
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	200016c4 	.word	0x200016c4
 800b4c4:	200016b0 	.word	0x200016b0

0800b4c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10b      	bne.n	800b50e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b50e:	f000 ff93 	bl	800c438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b512:	4b1d      	ldr	r3, [pc, #116]	@ (800b588 <xTaskCheckForTimeOut+0xc0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d102      	bne.n	800b532 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	61fb      	str	r3, [r7, #28]
 800b530:	e023      	b.n	800b57a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	4b15      	ldr	r3, [pc, #84]	@ (800b58c <xTaskCheckForTimeOut+0xc4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d007      	beq.n	800b54e <xTaskCheckForTimeOut+0x86>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	69ba      	ldr	r2, [r7, #24]
 800b544:	429a      	cmp	r2, r3
 800b546:	d302      	bcc.n	800b54e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b548:	2301      	movs	r3, #1
 800b54a:	61fb      	str	r3, [r7, #28]
 800b54c:	e015      	b.n	800b57a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	429a      	cmp	r2, r3
 800b556:	d20b      	bcs.n	800b570 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff ff99 	bl	800b49c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
 800b56e:	e004      	b.n	800b57a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b576:	2301      	movs	r3, #1
 800b578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b57a:	f000 ff8f 	bl	800c49c <vPortExitCritical>

	return xReturn;
 800b57e:	69fb      	ldr	r3, [r7, #28]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3720      	adds	r7, #32
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	200016b0 	.word	0x200016b0
 800b58c:	200016c4 	.word	0x200016c4

0800b590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b594:	4b03      	ldr	r3, [pc, #12]	@ (800b5a4 <vTaskMissedYield+0x14>)
 800b596:	2201      	movs	r2, #1
 800b598:	601a      	str	r2, [r3, #0]
}
 800b59a:	bf00      	nop
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	200016c0 	.word	0x200016c0

0800b5a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5b0:	f000 f852 	bl	800b658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5b4:	4b06      	ldr	r3, [pc, #24]	@ (800b5d0 <prvIdleTask+0x28>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d9f9      	bls.n	800b5b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5bc:	4b05      	ldr	r3, [pc, #20]	@ (800b5d4 <prvIdleTask+0x2c>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5cc:	e7f0      	b.n	800b5b0 <prvIdleTask+0x8>
 800b5ce:	bf00      	nop
 800b5d0:	200011dc 	.word	0x200011dc
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5de:	2300      	movs	r3, #0
 800b5e0:	607b      	str	r3, [r7, #4]
 800b5e2:	e00c      	b.n	800b5fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4a12      	ldr	r2, [pc, #72]	@ (800b638 <prvInitialiseTaskLists+0x60>)
 800b5f0:	4413      	add	r3, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe f97c 	bl	80098f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	607b      	str	r3, [r7, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b37      	cmp	r3, #55	@ 0x37
 800b602:	d9ef      	bls.n	800b5e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b604:	480d      	ldr	r0, [pc, #52]	@ (800b63c <prvInitialiseTaskLists+0x64>)
 800b606:	f7fe f973 	bl	80098f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b60a:	480d      	ldr	r0, [pc, #52]	@ (800b640 <prvInitialiseTaskLists+0x68>)
 800b60c:	f7fe f970 	bl	80098f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b610:	480c      	ldr	r0, [pc, #48]	@ (800b644 <prvInitialiseTaskLists+0x6c>)
 800b612:	f7fe f96d 	bl	80098f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b616:	480c      	ldr	r0, [pc, #48]	@ (800b648 <prvInitialiseTaskLists+0x70>)
 800b618:	f7fe f96a 	bl	80098f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b61c:	480b      	ldr	r0, [pc, #44]	@ (800b64c <prvInitialiseTaskLists+0x74>)
 800b61e:	f7fe f967 	bl	80098f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b622:	4b0b      	ldr	r3, [pc, #44]	@ (800b650 <prvInitialiseTaskLists+0x78>)
 800b624:	4a05      	ldr	r2, [pc, #20]	@ (800b63c <prvInitialiseTaskLists+0x64>)
 800b626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <prvInitialiseTaskLists+0x7c>)
 800b62a:	4a05      	ldr	r2, [pc, #20]	@ (800b640 <prvInitialiseTaskLists+0x68>)
 800b62c:	601a      	str	r2, [r3, #0]
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	200011dc 	.word	0x200011dc
 800b63c:	2000163c 	.word	0x2000163c
 800b640:	20001650 	.word	0x20001650
 800b644:	2000166c 	.word	0x2000166c
 800b648:	20001680 	.word	0x20001680
 800b64c:	20001698 	.word	0x20001698
 800b650:	20001664 	.word	0x20001664
 800b654:	20001668 	.word	0x20001668

0800b658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b65e:	e019      	b.n	800b694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b660:	f000 feea 	bl	800c438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b664:	4b10      	ldr	r3, [pc, #64]	@ (800b6a8 <prvCheckTasksWaitingTermination+0x50>)
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3304      	adds	r3, #4
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe f9c7 	bl	8009a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b676:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ac <prvCheckTasksWaitingTermination+0x54>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a0b      	ldr	r2, [pc, #44]	@ (800b6ac <prvCheckTasksWaitingTermination+0x54>)
 800b67e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b680:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b0 <prvCheckTasksWaitingTermination+0x58>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3b01      	subs	r3, #1
 800b686:	4a0a      	ldr	r2, [pc, #40]	@ (800b6b0 <prvCheckTasksWaitingTermination+0x58>)
 800b688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b68a:	f000 ff07 	bl	800c49c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f810 	bl	800b6b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b694:	4b06      	ldr	r3, [pc, #24]	@ (800b6b0 <prvCheckTasksWaitingTermination+0x58>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e1      	bne.n	800b660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20001680 	.word	0x20001680
 800b6ac:	200016ac 	.word	0x200016ac
 800b6b0:	20001694 	.word	0x20001694

0800b6b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3354      	adds	r3, #84	@ 0x54
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f002 fd17 	bl	800e0f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d108      	bne.n	800b6e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f001 f89f 	bl	800c818 <vPortFree>
				vPortFree( pxTCB );
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 f89c 	bl	800c818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6e0:	e019      	b.n	800b716 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d103      	bne.n	800b6f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 f893 	bl	800c818 <vPortFree>
	}
 800b6f2:	e010      	b.n	800b716 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d00b      	beq.n	800b716 <prvDeleteTCB+0x62>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	60fb      	str	r3, [r7, #12]
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	e7fd      	b.n	800b712 <prvDeleteTCB+0x5e>
	}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b726:	4b0c      	ldr	r3, [pc, #48]	@ (800b758 <prvResetNextTaskUnblockTime+0x38>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d104      	bne.n	800b73a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b730:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <prvResetNextTaskUnblockTime+0x3c>)
 800b732:	f04f 32ff 	mov.w	r2, #4294967295
 800b736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b738:	e008      	b.n	800b74c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73a:	4b07      	ldr	r3, [pc, #28]	@ (800b758 <prvResetNextTaskUnblockTime+0x38>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	4a04      	ldr	r2, [pc, #16]	@ (800b75c <prvResetNextTaskUnblockTime+0x3c>)
 800b74a:	6013      	str	r3, [r2, #0]
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	20001664 	.word	0x20001664
 800b75c:	200016cc 	.word	0x200016cc

0800b760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b766:	4b0b      	ldr	r3, [pc, #44]	@ (800b794 <xTaskGetSchedulerState+0x34>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b76e:	2301      	movs	r3, #1
 800b770:	607b      	str	r3, [r7, #4]
 800b772:	e008      	b.n	800b786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b774:	4b08      	ldr	r3, [pc, #32]	@ (800b798 <xTaskGetSchedulerState+0x38>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b77c:	2302      	movs	r3, #2
 800b77e:	607b      	str	r3, [r7, #4]
 800b780:	e001      	b.n	800b786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b782:	2300      	movs	r3, #0
 800b784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b786:	687b      	ldr	r3, [r7, #4]
	}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	200016b8 	.word	0x200016b8
 800b798:	200016d4 	.word	0x200016d4

0800b79c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d051      	beq.n	800b856 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b6:	4b2a      	ldr	r3, [pc, #168]	@ (800b860 <xTaskPriorityInherit+0xc4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d241      	bcs.n	800b844 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	db06      	blt.n	800b7d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7c8:	4b25      	ldr	r3, [pc, #148]	@ (800b860 <xTaskPriorityInherit+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	6959      	ldr	r1, [r3, #20]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b864 <xTaskPriorityInherit+0xc8>)
 800b7e8:	4413      	add	r3, r2
 800b7ea:	4299      	cmp	r1, r3
 800b7ec:	d122      	bne.n	800b834 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe f906 	bl	8009a04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7f8:	4b19      	ldr	r3, [pc, #100]	@ (800b860 <xTaskPriorityInherit+0xc4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b806:	4b18      	ldr	r3, [pc, #96]	@ (800b868 <xTaskPriorityInherit+0xcc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d903      	bls.n	800b816 <xTaskPriorityInherit+0x7a>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b812:	4a15      	ldr	r2, [pc, #84]	@ (800b868 <xTaskPriorityInherit+0xcc>)
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4a10      	ldr	r2, [pc, #64]	@ (800b864 <xTaskPriorityInherit+0xc8>)
 800b824:	441a      	add	r2, r3
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	3304      	adds	r3, #4
 800b82a:	4619      	mov	r1, r3
 800b82c:	4610      	mov	r0, r2
 800b82e:	f7fe f88c 	bl	800994a <vListInsertEnd>
 800b832:	e004      	b.n	800b83e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b834:	4b0a      	ldr	r3, [pc, #40]	@ (800b860 <xTaskPriorityInherit+0xc4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b83e:	2301      	movs	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e008      	b.n	800b856 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <xTaskPriorityInherit+0xc4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84e:	429a      	cmp	r2, r3
 800b850:	d201      	bcs.n	800b856 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b852:	2301      	movs	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b856:	68fb      	ldr	r3, [r7, #12]
	}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200011d8 	.word	0x200011d8
 800b864:	200011dc 	.word	0x200011dc
 800b868:	200016b4 	.word	0x200016b4

0800b86c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b878:	2300      	movs	r3, #0
 800b87a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d058      	beq.n	800b934 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b882:	4b2f      	ldr	r3, [pc, #188]	@ (800b940 <xTaskPriorityDisinherit+0xd4>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d00b      	beq.n	800b8a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	60fb      	str	r3, [r7, #12]
}
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
 800b8a2:	e7fd      	b.n	800b8a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10b      	bne.n	800b8c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	60bb      	str	r3, [r7, #8]
}
 800b8be:	bf00      	nop
 800b8c0:	bf00      	nop
 800b8c2:	e7fd      	b.n	800b8c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8c8:	1e5a      	subs	r2, r3, #1
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d02c      	beq.n	800b934 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d128      	bne.n	800b934 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe f88c 	bl	8009a04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b904:	4b0f      	ldr	r3, [pc, #60]	@ (800b944 <xTaskPriorityDisinherit+0xd8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d903      	bls.n	800b914 <xTaskPriorityDisinherit+0xa8>
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b910:	4a0c      	ldr	r2, [pc, #48]	@ (800b944 <xTaskPriorityDisinherit+0xd8>)
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4a09      	ldr	r2, [pc, #36]	@ (800b948 <xTaskPriorityDisinherit+0xdc>)
 800b922:	441a      	add	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	3304      	adds	r3, #4
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7fe f80d 	bl	800994a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b930:	2301      	movs	r3, #1
 800b932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b934:	697b      	ldr	r3, [r7, #20]
	}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	200011d8 	.word	0x200011d8
 800b944:	200016b4 	.word	0x200016b4
 800b948:	200011dc 	.word	0x200011dc

0800b94c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b95a:	2301      	movs	r3, #1
 800b95c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d06c      	beq.n	800ba3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	60fb      	str	r3, [r7, #12]
}
 800b97e:	bf00      	nop
 800b980:	bf00      	nop
 800b982:	e7fd      	b.n	800b980 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d902      	bls.n	800b994 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	61fb      	str	r3, [r7, #28]
 800b992:	e002      	b.n	800b99a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b998:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d04c      	beq.n	800ba3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d147      	bne.n	800ba3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9ae:	4b26      	ldr	r3, [pc, #152]	@ (800ba48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d10b      	bne.n	800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	60bb      	str	r3, [r7, #8]
}
 800b9ca:	bf00      	nop
 800b9cc:	bf00      	nop
 800b9ce:	e7fd      	b.n	800b9cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	69fa      	ldr	r2, [r7, #28]
 800b9da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	db04      	blt.n	800b9ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	6959      	ldr	r1, [r3, #20]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4a13      	ldr	r2, [pc, #76]	@ (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9fe:	4413      	add	r3, r2
 800ba00:	4299      	cmp	r1, r3
 800ba02:	d11c      	bne.n	800ba3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fd fffb 	bl	8009a04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba12:	4b0f      	ldr	r3, [pc, #60]	@ (800ba50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d903      	bls.n	800ba22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ba50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a07      	ldr	r2, [pc, #28]	@ (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba30:	441a      	add	r2, r3
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fd ff86 	bl	800994a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba3e:	bf00      	nop
 800ba40:	3720      	adds	r7, #32
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	200011d8 	.word	0x200011d8
 800ba4c:	200011dc 	.word	0x200011dc
 800ba50:	200016b4 	.word	0x200016b4

0800ba54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba54:	b480      	push	{r7}
 800ba56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba58:	4b07      	ldr	r3, [pc, #28]	@ (800ba78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba60:	4b05      	ldr	r3, [pc, #20]	@ (800ba78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba66:	3201      	adds	r2, #1
 800ba68:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ba6a:	4b03      	ldr	r3, [pc, #12]	@ (800ba78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
	}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	200011d8 	.word	0x200011d8

0800ba7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba86:	4b21      	ldr	r3, [pc, #132]	@ (800bb0c <prvAddCurrentTaskToDelayedList+0x90>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba8c:	4b20      	ldr	r3, [pc, #128]	@ (800bb10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd ffb6 	bl	8009a04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9e:	d10a      	bne.n	800bab6 <prvAddCurrentTaskToDelayedList+0x3a>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d007      	beq.n	800bab6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb10 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4819      	ldr	r0, [pc, #100]	@ (800bb14 <prvAddCurrentTaskToDelayedList+0x98>)
 800bab0:	f7fd ff4b 	bl	800994a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bab4:	e026      	b.n	800bb04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4413      	add	r3, r2
 800babc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800babe:	4b14      	ldr	r3, [pc, #80]	@ (800bb10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d209      	bcs.n	800bae2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bace:	4b12      	ldr	r3, [pc, #72]	@ (800bb18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b0f      	ldr	r3, [pc, #60]	@ (800bb10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7fd ff59 	bl	8009992 <vListInsert>
}
 800bae0:	e010      	b.n	800bb04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae2:	4b0e      	ldr	r3, [pc, #56]	@ (800bb1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3304      	adds	r3, #4
 800baec:	4619      	mov	r1, r3
 800baee:	4610      	mov	r0, r2
 800baf0:	f7fd ff4f 	bl	8009992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baf4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d202      	bcs.n	800bb04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bafe:	4a08      	ldr	r2, [pc, #32]	@ (800bb20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6013      	str	r3, [r2, #0]
}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	200016b0 	.word	0x200016b0
 800bb10:	200011d8 	.word	0x200011d8
 800bb14:	20001698 	.word	0x20001698
 800bb18:	20001668 	.word	0x20001668
 800bb1c:	20001664 	.word	0x20001664
 800bb20:	200016cc 	.word	0x200016cc

0800bb24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08a      	sub	sp, #40	@ 0x28
 800bb28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb2e:	f000 fb13 	bl	800c158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb32:	4b1d      	ldr	r3, [pc, #116]	@ (800bba8 <xTimerCreateTimerTask+0x84>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d021      	beq.n	800bb7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb42:	1d3a      	adds	r2, r7, #4
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	f107 030c 	add.w	r3, r7, #12
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fd feb5 	bl	80098bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	9202      	str	r2, [sp, #8]
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	2300      	movs	r3, #0
 800bb62:	460a      	mov	r2, r1
 800bb64:	4911      	ldr	r1, [pc, #68]	@ (800bbac <xTimerCreateTimerTask+0x88>)
 800bb66:	4812      	ldr	r0, [pc, #72]	@ (800bbb0 <xTimerCreateTimerTask+0x8c>)
 800bb68:	f7fe ffa2 	bl	800aab0 <xTaskCreateStatic>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	4a11      	ldr	r2, [pc, #68]	@ (800bbb4 <xTimerCreateTimerTask+0x90>)
 800bb70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb72:	4b10      	ldr	r3, [pc, #64]	@ (800bbb4 <xTimerCreateTimerTask+0x90>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10b      	bne.n	800bb9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	613b      	str	r3, [r7, #16]
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb9c:	697b      	ldr	r3, [r7, #20]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20001708 	.word	0x20001708
 800bbac:	0800ea58 	.word	0x0800ea58
 800bbb0:	0800bcf1 	.word	0x0800bcf1
 800bbb4:	2000170c 	.word	0x2000170c

0800bbb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08a      	sub	sp, #40	@ 0x28
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10b      	bne.n	800bbe8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	623b      	str	r3, [r7, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	e7fd      	b.n	800bbe4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbe8:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <xTimerGenericCommand+0x98>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d02a      	beq.n	800bc46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b05      	cmp	r3, #5
 800bc00:	dc18      	bgt.n	800bc34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc02:	f7ff fdad 	bl	800b760 <xTaskGetSchedulerState>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d109      	bne.n	800bc20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc0c:	4b10      	ldr	r3, [pc, #64]	@ (800bc50 <xTimerGenericCommand+0x98>)
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	f107 0110 	add.w	r1, r7, #16
 800bc14:	2300      	movs	r3, #0
 800bc16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc18:	f7fe f8d2 	bl	8009dc0 <xQueueGenericSend>
 800bc1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc1e:	e012      	b.n	800bc46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc20:	4b0b      	ldr	r3, [pc, #44]	@ (800bc50 <xTimerGenericCommand+0x98>)
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	f107 0110 	add.w	r1, r7, #16
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f7fe f8c8 	bl	8009dc0 <xQueueGenericSend>
 800bc30:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc32:	e008      	b.n	800bc46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc34:	4b06      	ldr	r3, [pc, #24]	@ (800bc50 <xTimerGenericCommand+0x98>)
 800bc36:	6818      	ldr	r0, [r3, #0]
 800bc38:	f107 0110 	add.w	r1, r7, #16
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	f7fe f9c0 	bl	8009fc4 <xQueueGenericSendFromISR>
 800bc44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3728      	adds	r7, #40	@ 0x28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20001708 	.word	0x20001708

0800bc54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5e:	4b23      	ldr	r3, [pc, #140]	@ (800bcec <prvProcessExpiredTimer+0x98>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fd fec9 	bl	8009a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc78:	f003 0304 	and.w	r3, r3, #4
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d023      	beq.n	800bcc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	18d1      	adds	r1, r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	6978      	ldr	r0, [r7, #20]
 800bc8e:	f000 f8d5 	bl	800be3c <prvInsertTimerInActiveList>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d020      	beq.n	800bcda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc98:	2300      	movs	r3, #0
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	2100      	movs	r1, #0
 800bca2:	6978      	ldr	r0, [r7, #20]
 800bca4:	f7ff ff88 	bl	800bbb8 <xTimerGenericCommand>
 800bca8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d114      	bne.n	800bcda <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	60fb      	str	r3, [r7, #12]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcce:	f023 0301 	bic.w	r3, r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	4798      	blx	r3
}
 800bce2:	bf00      	nop
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20001700 	.word	0x20001700

0800bcf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 f859 	bl	800bdb4 <prvGetNextExpireTime>
 800bd02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4619      	mov	r1, r3
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f805 	bl	800bd18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd0e:	f000 f8d7 	bl	800bec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd12:	bf00      	nop
 800bd14:	e7f0      	b.n	800bcf8 <prvTimerTask+0x8>
	...

0800bd18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd22:	f7ff f929 	bl	800af78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f866 	bl	800bdfc <prvSampleTimeNow>
 800bd30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d130      	bne.n	800bd9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10a      	bne.n	800bd54 <prvProcessTimerOrBlockTask+0x3c>
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d806      	bhi.n	800bd54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd46:	f7ff f925 	bl	800af94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd4a:	68f9      	ldr	r1, [r7, #12]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff ff81 	bl	800bc54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd52:	e024      	b.n	800bd9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd5a:	4b13      	ldr	r3, [pc, #76]	@ (800bda8 <prvProcessTimerOrBlockTask+0x90>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <prvProcessTimerOrBlockTask+0x50>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e000      	b.n	800bd6a <prvProcessTimerOrBlockTask+0x52>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <prvProcessTimerOrBlockTask+0x94>)
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f7fe fe65 	bl	800aa48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd7e:	f7ff f909 	bl	800af94 <xTaskResumeAll>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10a      	bne.n	800bd9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd88:	4b09      	ldr	r3, [pc, #36]	@ (800bdb0 <prvProcessTimerOrBlockTask+0x98>)
 800bd8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	f3bf 8f6f 	isb	sy
}
 800bd98:	e001      	b.n	800bd9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd9a:	f7ff f8fb 	bl	800af94 <xTaskResumeAll>
}
 800bd9e:	bf00      	nop
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20001704 	.word	0x20001704
 800bdac:	20001708 	.word	0x20001708
 800bdb0:	e000ed04 	.word	0xe000ed04

0800bdb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdbc:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf8 <prvGetNextExpireTime+0x44>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <prvGetNextExpireTime+0x16>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	e000      	b.n	800bdcc <prvGetNextExpireTime+0x18>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d105      	bne.n	800bde4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdd8:	4b07      	ldr	r3, [pc, #28]	@ (800bdf8 <prvGetNextExpireTime+0x44>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e001      	b.n	800bde8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20001700 	.word	0x20001700

0800bdfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be04:	f7ff f964 	bl	800b0d0 <xTaskGetTickCount>
 800be08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be0a:	4b0b      	ldr	r3, [pc, #44]	@ (800be38 <prvSampleTimeNow+0x3c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d205      	bcs.n	800be20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be14:	f000 f93a 	bl	800c08c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	e002      	b.n	800be26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be26:	4a04      	ldr	r2, [pc, #16]	@ (800be38 <prvSampleTimeNow+0x3c>)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be2c:	68fb      	ldr	r3, [r7, #12]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20001710 	.word	0x20001710

0800be3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d812      	bhi.n	800be88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	1ad2      	subs	r2, r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d302      	bcc.n	800be76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be70:	2301      	movs	r3, #1
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	e01b      	b.n	800beae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be76:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <prvInsertTimerInActiveList+0x7c>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3304      	adds	r3, #4
 800be7e:	4619      	mov	r1, r3
 800be80:	4610      	mov	r0, r2
 800be82:	f7fd fd86 	bl	8009992 <vListInsert>
 800be86:	e012      	b.n	800beae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d206      	bcs.n	800be9e <prvInsertTimerInActiveList+0x62>
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d302      	bcc.n	800be9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be98:	2301      	movs	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e007      	b.n	800beae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be9e:	4b07      	ldr	r3, [pc, #28]	@ (800bebc <prvInsertTimerInActiveList+0x80>)
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7fd fd72 	bl	8009992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beae:	697b      	ldr	r3, [r7, #20]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	20001704 	.word	0x20001704
 800bebc:	20001700 	.word	0x20001700

0800bec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b08e      	sub	sp, #56	@ 0x38
 800bec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bec6:	e0ce      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	da19      	bge.n	800bf02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bece:	1d3b      	adds	r3, r7, #4
 800bed0:	3304      	adds	r3, #4
 800bed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	61fb      	str	r3, [r7, #28]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bef8:	6850      	ldr	r0, [r2, #4]
 800befa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800befc:	6892      	ldr	r2, [r2, #8]
 800befe:	4611      	mov	r1, r2
 800bf00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f2c0 80ae 	blt.w	800c066 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d004      	beq.n	800bf20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	3304      	adds	r3, #4
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fd fd72 	bl	8009a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf20:	463b      	mov	r3, r7
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff ff6a 	bl	800bdfc <prvSampleTimeNow>
 800bf28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b09      	cmp	r3, #9
 800bf2e:	f200 8097 	bhi.w	800c060 <prvProcessReceivedCommands+0x1a0>
 800bf32:	a201      	add	r2, pc, #4	@ (adr r2, 800bf38 <prvProcessReceivedCommands+0x78>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800bf61 	.word	0x0800bf61
 800bf3c:	0800bf61 	.word	0x0800bf61
 800bf40:	0800bf61 	.word	0x0800bf61
 800bf44:	0800bfd7 	.word	0x0800bfd7
 800bf48:	0800bfeb 	.word	0x0800bfeb
 800bf4c:	0800c037 	.word	0x0800c037
 800bf50:	0800bf61 	.word	0x0800bf61
 800bf54:	0800bf61 	.word	0x0800bf61
 800bf58:	0800bfd7 	.word	0x0800bfd7
 800bf5c:	0800bfeb 	.word	0x0800bfeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf66:	f043 0301 	orr.w	r3, r3, #1
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	18d1      	adds	r1, r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf80:	f7ff ff5c 	bl	800be3c <prvInsertTimerInActiveList>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d06c      	beq.n	800c064 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d061      	beq.n	800c064 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	441a      	add	r2, r3
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	2300      	movs	r3, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfb2:	f7ff fe01 	bl	800bbb8 <xTimerGenericCommand>
 800bfb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d152      	bne.n	800c064 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	61bb      	str	r3, [r7, #24]
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	e7fd      	b.n	800bfd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfdc:	f023 0301 	bic.w	r3, r3, #1
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfe8:	e03d      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bff0:	f043 0301 	orr.w	r3, r3, #1
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c000:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	699b      	ldr	r3, [r3, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	617b      	str	r3, [r7, #20]
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	e7fd      	b.n	800c01e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	699a      	ldr	r2, [r3, #24]
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	18d1      	adds	r1, r2, r3
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c030:	f7ff ff04 	bl	800be3c <prvInsertTimerInActiveList>
					break;
 800c034:	e017      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c03c:	f003 0302 	and.w	r3, r3, #2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c046:	f000 fbe7 	bl	800c818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c04a:	e00c      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c052:	f023 0301 	bic.w	r3, r3, #1
 800c056:	b2da      	uxtb	r2, r3
 800c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c05e:	e002      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c060:	bf00      	nop
 800c062:	e000      	b.n	800c066 <prvProcessReceivedCommands+0x1a6>
					break;
 800c064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c066:	4b08      	ldr	r3, [pc, #32]	@ (800c088 <prvProcessReceivedCommands+0x1c8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	1d39      	adds	r1, r7, #4
 800c06c:	2200      	movs	r2, #0
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe f8d6 	bl	800a220 <xQueueReceive>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	f47f af26 	bne.w	800bec8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c07c:	bf00      	nop
 800c07e:	bf00      	nop
 800c080:	3730      	adds	r7, #48	@ 0x30
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20001708 	.word	0x20001708

0800c08c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c092:	e049      	b.n	800c128 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c094:	4b2e      	ldr	r3, [pc, #184]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09e:	4b2c      	ldr	r3, [pc, #176]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd fca9 	bl	8009a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a1b      	ldr	r3, [r3, #32]
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d02f      	beq.n	800c128 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d90e      	bls.n	800c0f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	f7fd fc4e 	bl	8009992 <vListInsert>
 800c0f6:	e017      	b.n	800c128 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff fd58 	bl	800bbb8 <xTimerGenericCommand>
 800c108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10b      	bne.n	800c128 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	603b      	str	r3, [r7, #0]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c128:	4b09      	ldr	r3, [pc, #36]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1b0      	bne.n	800c094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c132:	4b07      	ldr	r3, [pc, #28]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c138:	4b06      	ldr	r3, [pc, #24]	@ (800c154 <prvSwitchTimerLists+0xc8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a04      	ldr	r2, [pc, #16]	@ (800c150 <prvSwitchTimerLists+0xc4>)
 800c13e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c140:	4a04      	ldr	r2, [pc, #16]	@ (800c154 <prvSwitchTimerLists+0xc8>)
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6013      	str	r3, [r2, #0]
}
 800c146:	bf00      	nop
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	20001700 	.word	0x20001700
 800c154:	20001704 	.word	0x20001704

0800c158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c15e:	f000 f96b 	bl	800c438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c162:	4b15      	ldr	r3, [pc, #84]	@ (800c1b8 <prvCheckForValidListAndQueue+0x60>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d120      	bne.n	800c1ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c16a:	4814      	ldr	r0, [pc, #80]	@ (800c1bc <prvCheckForValidListAndQueue+0x64>)
 800c16c:	f7fd fbc0 	bl	80098f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c170:	4813      	ldr	r0, [pc, #76]	@ (800c1c0 <prvCheckForValidListAndQueue+0x68>)
 800c172:	f7fd fbbd 	bl	80098f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c176:	4b13      	ldr	r3, [pc, #76]	@ (800c1c4 <prvCheckForValidListAndQueue+0x6c>)
 800c178:	4a10      	ldr	r2, [pc, #64]	@ (800c1bc <prvCheckForValidListAndQueue+0x64>)
 800c17a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c17c:	4b12      	ldr	r3, [pc, #72]	@ (800c1c8 <prvCheckForValidListAndQueue+0x70>)
 800c17e:	4a10      	ldr	r2, [pc, #64]	@ (800c1c0 <prvCheckForValidListAndQueue+0x68>)
 800c180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c182:	2300      	movs	r3, #0
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	4b11      	ldr	r3, [pc, #68]	@ (800c1cc <prvCheckForValidListAndQueue+0x74>)
 800c188:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <prvCheckForValidListAndQueue+0x78>)
 800c18a:	2110      	movs	r1, #16
 800c18c:	200a      	movs	r0, #10
 800c18e:	f7fd fccd 	bl	8009b2c <xQueueGenericCreateStatic>
 800c192:	4603      	mov	r3, r0
 800c194:	4a08      	ldr	r2, [pc, #32]	@ (800c1b8 <prvCheckForValidListAndQueue+0x60>)
 800c196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c198:	4b07      	ldr	r3, [pc, #28]	@ (800c1b8 <prvCheckForValidListAndQueue+0x60>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1a0:	4b05      	ldr	r3, [pc, #20]	@ (800c1b8 <prvCheckForValidListAndQueue+0x60>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	490b      	ldr	r1, [pc, #44]	@ (800c1d4 <prvCheckForValidListAndQueue+0x7c>)
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fbfa 	bl	800a9a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1ac:	f000 f976 	bl	800c49c <vPortExitCritical>
}
 800c1b0:	bf00      	nop
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20001708 	.word	0x20001708
 800c1bc:	200016d8 	.word	0x200016d8
 800c1c0:	200016ec 	.word	0x200016ec
 800c1c4:	20001700 	.word	0x20001700
 800c1c8:	20001704 	.word	0x20001704
 800c1cc:	200017b4 	.word	0x200017b4
 800c1d0:	20001714 	.word	0x20001714
 800c1d4:	0800ea60 	.word	0x0800ea60

0800c1d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3b04      	subs	r3, #4
 800c1e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b04      	subs	r3, #4
 800c1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	f023 0201 	bic.w	r2, r3, #1
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3b04      	subs	r3, #4
 800c206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c208:	4a0c      	ldr	r2, [pc, #48]	@ (800c23c <pxPortInitialiseStack+0x64>)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3b14      	subs	r3, #20
 800c212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3b04      	subs	r3, #4
 800c21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f06f 0202 	mvn.w	r2, #2
 800c226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3b20      	subs	r3, #32
 800c22c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c22e:	68fb      	ldr	r3, [r7, #12]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	0800c241 	.word	0x0800c241

0800c240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c24a:	4b13      	ldr	r3, [pc, #76]	@ (800c298 <prvTaskExitError+0x58>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c252:	d00b      	beq.n	800c26c <prvTaskExitError+0x2c>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	60fb      	str	r3, [r7, #12]
}
 800c266:	bf00      	nop
 800c268:	bf00      	nop
 800c26a:	e7fd      	b.n	800c268 <prvTaskExitError+0x28>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	60bb      	str	r3, [r7, #8]
}
 800c27e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c280:	bf00      	nop
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0fc      	beq.n	800c282 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	3714      	adds	r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	20000034 	.word	0x20000034
 800c29c:	00000000 	.word	0x00000000

0800c2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2a0:	4b07      	ldr	r3, [pc, #28]	@ (800c2c0 <pxCurrentTCBConst2>)
 800c2a2:	6819      	ldr	r1, [r3, #0]
 800c2a4:	6808      	ldr	r0, [r1, #0]
 800c2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	f380 8809 	msr	PSP, r0
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8811 	msr	BASEPRI, r0
 800c2ba:	4770      	bx	lr
 800c2bc:	f3af 8000 	nop.w

0800c2c0 <pxCurrentTCBConst2>:
 800c2c0:	200011d8 	.word	0x200011d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop

0800c2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2c8:	4808      	ldr	r0, [pc, #32]	@ (800c2ec <prvPortStartFirstTask+0x24>)
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	6800      	ldr	r0, [r0, #0]
 800c2ce:	f380 8808 	msr	MSP, r0
 800c2d2:	f04f 0000 	mov.w	r0, #0
 800c2d6:	f380 8814 	msr	CONTROL, r0
 800c2da:	b662      	cpsie	i
 800c2dc:	b661      	cpsie	f
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	df00      	svc	0
 800c2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ea:	bf00      	nop
 800c2ec:	e000ed08 	.word	0xe000ed08

0800c2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2f6:	4b47      	ldr	r3, [pc, #284]	@ (800c414 <xPortStartScheduler+0x124>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a47      	ldr	r2, [pc, #284]	@ (800c418 <xPortStartScheduler+0x128>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d10b      	bne.n	800c318 <xPortStartScheduler+0x28>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	60fb      	str	r3, [r7, #12]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c318:	4b3e      	ldr	r3, [pc, #248]	@ (800c414 <xPortStartScheduler+0x124>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a3f      	ldr	r2, [pc, #252]	@ (800c41c <xPortStartScheduler+0x12c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d10b      	bne.n	800c33a <xPortStartScheduler+0x4a>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	613b      	str	r3, [r7, #16]
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop
 800c338:	e7fd      	b.n	800c336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c33a:	4b39      	ldr	r3, [pc, #228]	@ (800c420 <xPortStartScheduler+0x130>)
 800c33c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	22ff      	movs	r2, #255	@ 0xff
 800c34a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	4b31      	ldr	r3, [pc, #196]	@ (800c424 <xPortStartScheduler+0x134>)
 800c360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c362:	4b31      	ldr	r3, [pc, #196]	@ (800c428 <xPortStartScheduler+0x138>)
 800c364:	2207      	movs	r2, #7
 800c366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c368:	e009      	b.n	800c37e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c36a:	4b2f      	ldr	r3, [pc, #188]	@ (800c428 <xPortStartScheduler+0x138>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3b01      	subs	r3, #1
 800c370:	4a2d      	ldr	r2, [pc, #180]	@ (800c428 <xPortStartScheduler+0x138>)
 800c372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c374:	78fb      	ldrb	r3, [r7, #3]
 800c376:	b2db      	uxtb	r3, r3
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c37e:	78fb      	ldrb	r3, [r7, #3]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c386:	2b80      	cmp	r3, #128	@ 0x80
 800c388:	d0ef      	beq.n	800c36a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c38a:	4b27      	ldr	r3, [pc, #156]	@ (800c428 <xPortStartScheduler+0x138>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f1c3 0307 	rsb	r3, r3, #7
 800c392:	2b04      	cmp	r3, #4
 800c394:	d00b      	beq.n	800c3ae <xPortStartScheduler+0xbe>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	60bb      	str	r3, [r7, #8]
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	e7fd      	b.n	800c3aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c428 <xPortStartScheduler+0x138>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	021b      	lsls	r3, r3, #8
 800c3b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c428 <xPortStartScheduler+0x138>)
 800c3b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c428 <xPortStartScheduler+0x138>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3c0:	4a19      	ldr	r2, [pc, #100]	@ (800c428 <xPortStartScheduler+0x138>)
 800c3c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3cc:	4b17      	ldr	r3, [pc, #92]	@ (800c42c <xPortStartScheduler+0x13c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a16      	ldr	r2, [pc, #88]	@ (800c42c <xPortStartScheduler+0x13c>)
 800c3d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3d8:	4b14      	ldr	r3, [pc, #80]	@ (800c42c <xPortStartScheduler+0x13c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a13      	ldr	r2, [pc, #76]	@ (800c42c <xPortStartScheduler+0x13c>)
 800c3de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3e4:	f000 f8da 	bl	800c59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3e8:	4b11      	ldr	r3, [pc, #68]	@ (800c430 <xPortStartScheduler+0x140>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3ee:	f000 f8f9 	bl	800c5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3f2:	4b10      	ldr	r3, [pc, #64]	@ (800c434 <xPortStartScheduler+0x144>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c434 <xPortStartScheduler+0x144>)
 800c3f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3fe:	f7ff ff63 	bl	800c2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c402:	f7fe ff2f 	bl	800b264 <vTaskSwitchContext>
	prvTaskExitError();
 800c406:	f7ff ff1b 	bl	800c240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	e000ed00 	.word	0xe000ed00
 800c418:	410fc271 	.word	0x410fc271
 800c41c:	410fc270 	.word	0x410fc270
 800c420:	e000e400 	.word	0xe000e400
 800c424:	20001804 	.word	0x20001804
 800c428:	20001808 	.word	0x20001808
 800c42c:	e000ed20 	.word	0xe000ed20
 800c430:	20000034 	.word	0x20000034
 800c434:	e000ef34 	.word	0xe000ef34

0800c438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c452:	4b10      	ldr	r3, [pc, #64]	@ (800c494 <vPortEnterCritical+0x5c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3301      	adds	r3, #1
 800c458:	4a0e      	ldr	r2, [pc, #56]	@ (800c494 <vPortEnterCritical+0x5c>)
 800c45a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c45c:	4b0d      	ldr	r3, [pc, #52]	@ (800c494 <vPortEnterCritical+0x5c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d110      	bne.n	800c486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c464:	4b0c      	ldr	r3, [pc, #48]	@ (800c498 <vPortEnterCritical+0x60>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00b      	beq.n	800c486 <vPortEnterCritical+0x4e>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	603b      	str	r3, [r7, #0]
}
 800c480:	bf00      	nop
 800c482:	bf00      	nop
 800c484:	e7fd      	b.n	800c482 <vPortEnterCritical+0x4a>
	}
}
 800c486:	bf00      	nop
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	20000034 	.word	0x20000034
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4a2:	4b12      	ldr	r3, [pc, #72]	@ (800c4ec <vPortExitCritical+0x50>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10b      	bne.n	800c4c2 <vPortExitCritical+0x26>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	607b      	str	r3, [r7, #4]
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	e7fd      	b.n	800c4be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <vPortExitCritical+0x50>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	4a08      	ldr	r2, [pc, #32]	@ (800c4ec <vPortExitCritical+0x50>)
 800c4ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4cc:	4b07      	ldr	r3, [pc, #28]	@ (800c4ec <vPortExitCritical+0x50>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <vPortExitCritical+0x44>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	f383 8811 	msr	BASEPRI, r3
}
 800c4de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	20000034 	.word	0x20000034

0800c4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4f0:	f3ef 8009 	mrs	r0, PSP
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	4b15      	ldr	r3, [pc, #84]	@ (800c550 <pxCurrentTCBConst>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	f01e 0f10 	tst.w	lr, #16
 800c500:	bf08      	it	eq
 800c502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50a:	6010      	str	r0, [r2, #0]
 800c50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c514:	f380 8811 	msr	BASEPRI, r0
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f7fe fea0 	bl	800b264 <vTaskSwitchContext>
 800c524:	f04f 0000 	mov.w	r0, #0
 800c528:	f380 8811 	msr	BASEPRI, r0
 800c52c:	bc09      	pop	{r0, r3}
 800c52e:	6819      	ldr	r1, [r3, #0]
 800c530:	6808      	ldr	r0, [r1, #0]
 800c532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c536:	f01e 0f10 	tst.w	lr, #16
 800c53a:	bf08      	it	eq
 800c53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c540:	f380 8809 	msr	PSP, r0
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	f3af 8000 	nop.w

0800c550 <pxCurrentTCBConst>:
 800c550:	200011d8 	.word	0x200011d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop

0800c558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	607b      	str	r3, [r7, #4]
}
 800c570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c572:	f7fe fdbd 	bl	800b0f0 <xTaskIncrementTick>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d003      	beq.n	800c584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c57c:	4b06      	ldr	r3, [pc, #24]	@ (800c598 <xPortSysTickHandler+0x40>)
 800c57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	f383 8811 	msr	BASEPRI, r3
}
 800c58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c590:	bf00      	nop
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	e000ed04 	.word	0xe000ed04

0800c59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d0 <vPortSetupTimerInterrupt+0x34>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d4 <vPortSetupTimerInterrupt+0x38>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d8 <vPortSetupTimerInterrupt+0x3c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c5dc <vPortSetupTimerInterrupt+0x40>)
 800c5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5b6:	099b      	lsrs	r3, r3, #6
 800c5b8:	4a09      	ldr	r2, [pc, #36]	@ (800c5e0 <vPortSetupTimerInterrupt+0x44>)
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5be:	4b04      	ldr	r3, [pc, #16]	@ (800c5d0 <vPortSetupTimerInterrupt+0x34>)
 800c5c0:	2207      	movs	r2, #7
 800c5c2:	601a      	str	r2, [r3, #0]
}
 800c5c4:	bf00      	nop
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	e000e010 	.word	0xe000e010
 800c5d4:	e000e018 	.word	0xe000e018
 800c5d8:	20000028 	.word	0x20000028
 800c5dc:	10624dd3 	.word	0x10624dd3
 800c5e0:	e000e014 	.word	0xe000e014

0800c5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5f4 <vPortEnableVFP+0x10>
 800c5e8:	6801      	ldr	r1, [r0, #0]
 800c5ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5ee:	6001      	str	r1, [r0, #0]
 800c5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5f2:	bf00      	nop
 800c5f4:	e000ed88 	.word	0xe000ed88

0800c5f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5fe:	f3ef 8305 	mrs	r3, IPSR
 800c602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b0f      	cmp	r3, #15
 800c608:	d915      	bls.n	800c636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c60a:	4a18      	ldr	r2, [pc, #96]	@ (800c66c <vPortValidateInterruptPriority+0x74>)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c614:	4b16      	ldr	r3, [pc, #88]	@ (800c670 <vPortValidateInterruptPriority+0x78>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	7afa      	ldrb	r2, [r7, #11]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d20b      	bcs.n	800c636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	607b      	str	r3, [r7, #4]
}
 800c630:	bf00      	nop
 800c632:	bf00      	nop
 800c634:	e7fd      	b.n	800c632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c636:	4b0f      	ldr	r3, [pc, #60]	@ (800c674 <vPortValidateInterruptPriority+0x7c>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c63e:	4b0e      	ldr	r3, [pc, #56]	@ (800c678 <vPortValidateInterruptPriority+0x80>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d90b      	bls.n	800c65e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64a:	f383 8811 	msr	BASEPRI, r3
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f3bf 8f4f 	dsb	sy
 800c656:	603b      	str	r3, [r7, #0]
}
 800c658:	bf00      	nop
 800c65a:	bf00      	nop
 800c65c:	e7fd      	b.n	800c65a <vPortValidateInterruptPriority+0x62>
	}
 800c65e:	bf00      	nop
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	e000e3f0 	.word	0xe000e3f0
 800c670:	20001804 	.word	0x20001804
 800c674:	e000ed0c 	.word	0xe000ed0c
 800c678:	20001808 	.word	0x20001808

0800c67c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08a      	sub	sp, #40	@ 0x28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c688:	f7fe fc76 	bl	800af78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c68c:	4b5c      	ldr	r3, [pc, #368]	@ (800c800 <pvPortMalloc+0x184>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c694:	f000 f924 	bl	800c8e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c698:	4b5a      	ldr	r3, [pc, #360]	@ (800c804 <pvPortMalloc+0x188>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f040 8095 	bne.w	800c7d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d01e      	beq.n	800c6ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c6ac:	2208      	movs	r2, #8
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d015      	beq.n	800c6ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f023 0307 	bic.w	r3, r3, #7
 800c6c4:	3308      	adds	r3, #8
 800c6c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00b      	beq.n	800c6ea <pvPortMalloc+0x6e>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	617b      	str	r3, [r7, #20]
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	e7fd      	b.n	800c6e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d06f      	beq.n	800c7d0 <pvPortMalloc+0x154>
 800c6f0:	4b45      	ldr	r3, [pc, #276]	@ (800c808 <pvPortMalloc+0x18c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d86a      	bhi.n	800c7d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6fa:	4b44      	ldr	r3, [pc, #272]	@ (800c80c <pvPortMalloc+0x190>)
 800c6fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6fe:	4b43      	ldr	r3, [pc, #268]	@ (800c80c <pvPortMalloc+0x190>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c704:	e004      	b.n	800c710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	429a      	cmp	r2, r3
 800c718:	d903      	bls.n	800c722 <pvPortMalloc+0xa6>
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1f1      	bne.n	800c706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c722:	4b37      	ldr	r3, [pc, #220]	@ (800c800 <pvPortMalloc+0x184>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c728:	429a      	cmp	r2, r3
 800c72a:	d051      	beq.n	800c7d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2208      	movs	r2, #8
 800c732:	4413      	add	r3, r2
 800c734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	1ad2      	subs	r2, r2, r3
 800c746:	2308      	movs	r3, #8
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d920      	bls.n	800c790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4413      	add	r3, r2
 800c754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	f003 0307 	and.w	r3, r3, #7
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <pvPortMalloc+0xfc>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	613b      	str	r3, [r7, #16]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	1ad2      	subs	r2, r2, r3
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c78a:	69b8      	ldr	r0, [r7, #24]
 800c78c:	f000 f90a 	bl	800c9a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c790:	4b1d      	ldr	r3, [pc, #116]	@ (800c808 <pvPortMalloc+0x18c>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	4a1b      	ldr	r2, [pc, #108]	@ (800c808 <pvPortMalloc+0x18c>)
 800c79c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c79e:	4b1a      	ldr	r3, [pc, #104]	@ (800c808 <pvPortMalloc+0x18c>)
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c810 <pvPortMalloc+0x194>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d203      	bcs.n	800c7b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7aa:	4b17      	ldr	r3, [pc, #92]	@ (800c808 <pvPortMalloc+0x18c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a18      	ldr	r2, [pc, #96]	@ (800c810 <pvPortMalloc+0x194>)
 800c7b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	4b13      	ldr	r3, [pc, #76]	@ (800c804 <pvPortMalloc+0x188>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7c6:	4b13      	ldr	r3, [pc, #76]	@ (800c814 <pvPortMalloc+0x198>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	4a11      	ldr	r2, [pc, #68]	@ (800c814 <pvPortMalloc+0x198>)
 800c7ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7d0:	f7fe fbe0 	bl	800af94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00b      	beq.n	800c7f6 <pvPortMalloc+0x17a>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60fb      	str	r3, [r7, #12]
}
 800c7f0:	bf00      	nop
 800c7f2:	bf00      	nop
 800c7f4:	e7fd      	b.n	800c7f2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7f6:	69fb      	ldr	r3, [r7, #28]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3728      	adds	r7, #40	@ 0x28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20005414 	.word	0x20005414
 800c804:	20005428 	.word	0x20005428
 800c808:	20005418 	.word	0x20005418
 800c80c:	2000540c 	.word	0x2000540c
 800c810:	2000541c 	.word	0x2000541c
 800c814:	20005420 	.word	0x20005420

0800c818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d04f      	beq.n	800c8ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c82a:	2308      	movs	r3, #8
 800c82c:	425b      	negs	r3, r3
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	4413      	add	r3, r2
 800c832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	4b25      	ldr	r3, [pc, #148]	@ (800c8d4 <vPortFree+0xbc>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4013      	ands	r3, r2
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10b      	bne.n	800c85e <vPortFree+0x46>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60fb      	str	r3, [r7, #12]
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	e7fd      	b.n	800c85a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <vPortFree+0x66>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	60bb      	str	r3, [r7, #8]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b14      	ldr	r3, [pc, #80]	@ (800c8d4 <vPortFree+0xbc>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4013      	ands	r3, r2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01e      	beq.n	800c8ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d11a      	bne.n	800c8ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d4 <vPortFree+0xbc>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	43db      	mvns	r3, r3
 800c89e:	401a      	ands	r2, r3
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8a4:	f7fe fb68 	bl	800af78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <vPortFree+0xc0>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	4a09      	ldr	r2, [pc, #36]	@ (800c8d8 <vPortFree+0xc0>)
 800c8b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8b6:	6938      	ldr	r0, [r7, #16]
 800c8b8:	f000 f874 	bl	800c9a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c8bc:	4b07      	ldr	r3, [pc, #28]	@ (800c8dc <vPortFree+0xc4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	4a06      	ldr	r2, [pc, #24]	@ (800c8dc <vPortFree+0xc4>)
 800c8c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8c6:	f7fe fb65 	bl	800af94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8ca:	bf00      	nop
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20005428 	.word	0x20005428
 800c8d8:	20005418 	.word	0x20005418
 800c8dc:	20005424 	.word	0x20005424

0800c8e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c8ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8ec:	4b27      	ldr	r3, [pc, #156]	@ (800c98c <prvHeapInit+0xac>)
 800c8ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00c      	beq.n	800c914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3307      	adds	r3, #7
 800c8fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f023 0307 	bic.w	r3, r3, #7
 800c906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	4a1f      	ldr	r2, [pc, #124]	@ (800c98c <prvHeapInit+0xac>)
 800c910:	4413      	add	r3, r2
 800c912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c918:	4a1d      	ldr	r2, [pc, #116]	@ (800c990 <prvHeapInit+0xb0>)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c91e:	4b1c      	ldr	r3, [pc, #112]	@ (800c990 <prvHeapInit+0xb0>)
 800c920:	2200      	movs	r2, #0
 800c922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	4413      	add	r3, r2
 800c92a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c92c:	2208      	movs	r2, #8
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0307 	bic.w	r3, r3, #7
 800c93a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4a15      	ldr	r2, [pc, #84]	@ (800c994 <prvHeapInit+0xb4>)
 800c940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c942:	4b14      	ldr	r3, [pc, #80]	@ (800c994 <prvHeapInit+0xb4>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2200      	movs	r2, #0
 800c948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c94a:	4b12      	ldr	r3, [pc, #72]	@ (800c994 <prvHeapInit+0xb4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	1ad2      	subs	r2, r2, r3
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c960:	4b0c      	ldr	r3, [pc, #48]	@ (800c994 <prvHeapInit+0xb4>)
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	4a0a      	ldr	r2, [pc, #40]	@ (800c998 <prvHeapInit+0xb8>)
 800c96e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	4a09      	ldr	r2, [pc, #36]	@ (800c99c <prvHeapInit+0xbc>)
 800c976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c978:	4b09      	ldr	r3, [pc, #36]	@ (800c9a0 <prvHeapInit+0xc0>)
 800c97a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c97e:	601a      	str	r2, [r3, #0]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	2000180c 	.word	0x2000180c
 800c990:	2000540c 	.word	0x2000540c
 800c994:	20005414 	.word	0x20005414
 800c998:	2000541c 	.word	0x2000541c
 800c99c:	20005418 	.word	0x20005418
 800c9a0:	20005428 	.word	0x20005428

0800c9a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9ac:	4b28      	ldr	r3, [pc, #160]	@ (800ca50 <prvInsertBlockIntoFreeList+0xac>)
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	e002      	b.n	800c9b8 <prvInsertBlockIntoFreeList+0x14>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d8f7      	bhi.n	800c9b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d108      	bne.n	800c9e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	441a      	add	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d118      	bne.n	800ca2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	4b15      	ldr	r3, [pc, #84]	@ (800ca54 <prvInsertBlockIntoFreeList+0xb0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d00d      	beq.n	800ca22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	441a      	add	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	e008      	b.n	800ca34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca22:	4b0c      	ldr	r3, [pc, #48]	@ (800ca54 <prvInsertBlockIntoFreeList+0xb0>)
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e003      	b.n	800ca34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d002      	beq.n	800ca42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	2000540c 	.word	0x2000540c
 800ca54:	20005414 	.word	0x20005414

0800ca58 <AES_keyschedule_enc_LL>:
 800ca58:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca5c:	1092      	asrs	r2, r2, #2
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	b084      	sub	sp, #16
 800ca62:	dd06      	ble.n	800ca72 <AES_keyschedule_enc_LL+0x1a>
 800ca64:	0095      	lsls	r5, r2, #2
 800ca66:	2300      	movs	r3, #0
 800ca68:	58c4      	ldr	r4, [r0, r3]
 800ca6a:	50cc      	str	r4, [r1, r3]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	42ab      	cmp	r3, r5
 800ca70:	d1fa      	bne.n	800ca68 <AES_keyschedule_enc_LL+0x10>
 800ca72:	2a06      	cmp	r2, #6
 800ca74:	d007      	beq.n	800ca86 <AES_keyschedule_enc_LL+0x2e>
 800ca76:	2a08      	cmp	r2, #8
 800ca78:	d06c      	beq.n	800cb54 <AES_keyschedule_enc_LL+0xfc>
 800ca7a:	2a04      	cmp	r2, #4
 800ca7c:	d03a      	beq.n	800caf4 <AES_keyschedule_enc_LL+0x9c>
 800ca7e:	b004      	add	sp, #16
 800ca80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca84:	4770      	bx	lr
 800ca86:	f8df c190 	ldr.w	ip, [pc, #400]	@ 800cc18 <AES_keyschedule_enc_LL+0x1c0>
 800ca8a:	684c      	ldr	r4, [r1, #4]
 800ca8c:	688d      	ldr	r5, [r1, #8]
 800ca8e:	68c8      	ldr	r0, [r1, #12]
 800ca90:	680e      	ldr	r6, [r1, #0]
 800ca92:	4b60      	ldr	r3, [pc, #384]	@ (800cc14 <AES_keyschedule_enc_LL+0x1bc>)
 800ca94:	f101 08a8 	add.w	r8, r1, #168	@ 0xa8
 800ca98:	e005      	b.n	800caa6 <AES_keyschedule_enc_LL+0x4e>
 800ca9a:	690f      	ldr	r7, [r1, #16]
 800ca9c:	4047      	eors	r7, r0
 800ca9e:	407a      	eors	r2, r7
 800caa0:	62ca      	str	r2, [r1, #44]	@ 0x2c
 800caa2:	628f      	str	r7, [r1, #40]	@ 0x28
 800caa4:	3118      	adds	r1, #24
 800caa6:	694a      	ldr	r2, [r1, #20]
 800caa8:	f85c af04 	ldr.w	sl, [ip, #4]!
 800caac:	fa5f f982 	uxtb.w	r9, r2
 800cab0:	0e17      	lsrs	r7, r2, #24
 800cab2:	f813 9009 	ldrb.w	r9, [r3, r9]
 800cab6:	5ddf      	ldrb	r7, [r3, r7]
 800cab8:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 800cabc:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800cac0:	f3c2 2907 	ubfx	r9, r2, #8, #8
 800cac4:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800cac8:	f813 9009 	ldrb.w	r9, [r3, r9]
 800cacc:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 800cad0:	ea86 060a 	eor.w	r6, r6, sl
 800cad4:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800cad8:	407e      	eors	r6, r7
 800cada:	4074      	eors	r4, r6
 800cadc:	4065      	eors	r5, r4
 800cade:	4068      	eors	r0, r5
 800cae0:	4541      	cmp	r1, r8
 800cae2:	6248      	str	r0, [r1, #36]	@ 0x24
 800cae4:	620d      	str	r5, [r1, #32]
 800cae6:	61cc      	str	r4, [r1, #28]
 800cae8:	618e      	str	r6, [r1, #24]
 800caea:	d1d6      	bne.n	800ca9a <AES_keyschedule_enc_LL+0x42>
 800caec:	b004      	add	sp, #16
 800caee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800caf2:	4770      	bx	lr
 800caf4:	4608      	mov	r0, r1
 800caf6:	4f48      	ldr	r7, [pc, #288]	@ (800cc18 <AES_keyschedule_enc_LL+0x1c0>)
 800caf8:	f850 4b90 	ldr.w	r4, [r0], #144
 800cafc:	68ca      	ldr	r2, [r1, #12]
 800cafe:	684d      	ldr	r5, [r1, #4]
 800cb00:	688e      	ldr	r6, [r1, #8]
 800cb02:	4b44      	ldr	r3, [pc, #272]	@ (800cc14 <AES_keyschedule_enc_LL+0x1bc>)
 800cb04:	e000      	b.n	800cb08 <AES_keyschedule_enc_LL+0xb0>
 800cb06:	3110      	adds	r1, #16
 800cb08:	fa5f f982 	uxtb.w	r9, r2
 800cb0c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800cb10:	f3c2 4807 	ubfx	r8, r2, #16, #8
 800cb14:	f813 b009 	ldrb.w	fp, [r3, r9]
 800cb18:	f813 c00c 	ldrb.w	ip, [r3, ip]
 800cb1c:	f813 a008 	ldrb.w	sl, [r3, r8]
 800cb20:	f857 8f04 	ldr.w	r8, [r7, #4]!
 800cb24:	f3c2 2907 	ubfx	r9, r2, #8, #8
 800cb28:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 800cb2c:	f813 9009 	ldrb.w	r9, [r3, r9]
 800cb30:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 800cb34:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 800cb38:	ea84 0408 	eor.w	r4, r4, r8
 800cb3c:	ea84 040c 	eor.w	r4, r4, ip
 800cb40:	4065      	eors	r5, r4
 800cb42:	406e      	eors	r6, r5
 800cb44:	4072      	eors	r2, r6
 800cb46:	4281      	cmp	r1, r0
 800cb48:	61ca      	str	r2, [r1, #28]
 800cb4a:	618e      	str	r6, [r1, #24]
 800cb4c:	614d      	str	r5, [r1, #20]
 800cb4e:	610c      	str	r4, [r1, #16]
 800cb50:	d1d9      	bne.n	800cb06 <AES_keyschedule_enc_LL+0xae>
 800cb52:	e794      	b.n	800ca7e <AES_keyschedule_enc_LL+0x26>
 800cb54:	4b2f      	ldr	r3, [pc, #188]	@ (800cc14 <AES_keyschedule_enc_LL+0x1bc>)
 800cb56:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc18 <AES_keyschedule_enc_LL+0x1c0>
 800cb5a:	68ca      	ldr	r2, [r1, #12]
 800cb5c:	688c      	ldr	r4, [r1, #8]
 800cb5e:	684d      	ldr	r5, [r1, #4]
 800cb60:	f8d1 c000 	ldr.w	ip, [r1]
 800cb64:	f101 00c0 	add.w	r0, r1, #192	@ 0xc0
 800cb68:	4699      	mov	r9, r3
 800cb6a:	9003      	str	r0, [sp, #12]
 800cb6c:	e023      	b.n	800cbb6 <AES_keyschedule_enc_LL+0x15e>
 800cb6e:	f819 b00b 	ldrb.w	fp, [r9, fp]
 800cb72:	f819 7007 	ldrb.w	r7, [r9, r7]
 800cb76:	f819 8008 	ldrb.w	r8, [r9, r8]
 800cb7a:	9702      	str	r7, [sp, #8]
 800cb7c:	9f01      	ldr	r7, [sp, #4]
 800cb7e:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 800cb82:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cb86:	f819 6007 	ldrb.w	r6, [r9, r7]
 800cb8a:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 800cb8e:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 800cb92:	690e      	ldr	r6, [r1, #16]
 800cb94:	694f      	ldr	r7, [r1, #20]
 800cb96:	ea88 0806 	eor.w	r8, r8, r6
 800cb9a:	698e      	ldr	r6, [r1, #24]
 800cb9c:	f8c1 8030 	str.w	r8, [r1, #48]	@ 0x30
 800cba0:	ea88 0707 	eor.w	r7, r8, r7
 800cba4:	ea87 0b06 	eor.w	fp, r7, r6
 800cba8:	ea8b 0000 	eor.w	r0, fp, r0
 800cbac:	634f      	str	r7, [r1, #52]	@ 0x34
 800cbae:	63c8      	str	r0, [r1, #60]	@ 0x3c
 800cbb0:	f8c1 b038 	str.w	fp, [r1, #56]	@ 0x38
 800cbb4:	3120      	adds	r1, #32
 800cbb6:	69c8      	ldr	r0, [r1, #28]
 800cbb8:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 800cbbc:	b2c7      	uxtb	r7, r0
 800cbbe:	0e06      	lsrs	r6, r0, #24
 800cbc0:	f813 b007 	ldrb.w	fp, [r3, r7]
 800cbc4:	5d9e      	ldrb	r6, [r3, r6]
 800cbc6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800cbca:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 800cbce:	f813 b007 	ldrb.w	fp, [r3, r7]
 800cbd2:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cbd6:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 800cbda:	5ddf      	ldrb	r7, [r3, r7]
 800cbdc:	ea8c 0c08 	eor.w	ip, ip, r8
 800cbe0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800cbe4:	ea8c 0c06 	eor.w	ip, ip, r6
 800cbe8:	ea8c 0505 	eor.w	r5, ip, r5
 800cbec:	406c      	eors	r4, r5
 800cbee:	4062      	eors	r2, r4
 800cbf0:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800cbf4:	9601      	str	r6, [sp, #4]
 800cbf6:	9e03      	ldr	r6, [sp, #12]
 800cbf8:	62ca      	str	r2, [r1, #44]	@ 0x2c
 800cbfa:	42b1      	cmp	r1, r6
 800cbfc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 800cc00:	fa5f f882 	uxtb.w	r8, r2
 800cc04:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800cc08:	628c      	str	r4, [r1, #40]	@ 0x28
 800cc0a:	624d      	str	r5, [r1, #36]	@ 0x24
 800cc0c:	f8c1 c020 	str.w	ip, [r1, #32]
 800cc10:	d1ad      	bne.n	800cb6e <AES_keyschedule_enc_LL+0x116>
 800cc12:	e734      	b.n	800ca7e <AES_keyschedule_enc_LL+0x26>
 800cc14:	0800f934 	.word	0x0800f934
 800cc18:	0800f008 	.word	0x0800f008

0800cc1c <AES_general_SW_enc>:
 800cc1c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc20:	4cbe      	ldr	r4, [pc, #760]	@ (800cf1c <AES_general_SW_enc+0x300>)
 800cc22:	4dbf      	ldr	r5, [pc, #764]	@ (800cf20 <AES_general_SW_enc+0x304>)
 800cc24:	b08a      	sub	sp, #40	@ 0x28
 800cc26:	2700      	movs	r7, #0
 800cc28:	2601      	movs	r6, #1
 800cc2a:	9709      	str	r7, [sp, #36]	@ 0x24
 800cc2c:	6026      	str	r6, [r4, #0]
 800cc2e:	6824      	ldr	r4, [r4, #0]
 800cc30:	9409      	str	r4, [sp, #36]	@ 0x24
 800cc32:	682c      	ldr	r4, [r5, #0]
 800cc34:	9409      	str	r4, [sp, #36]	@ 0x24
 800cc36:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cc38:	9107      	str	r1, [sp, #28]
 800cc3a:	10db      	asrs	r3, r3, #3
 800cc3c:	3303      	adds	r3, #3
 800cc3e:	3401      	adds	r4, #1
 800cc40:	9306      	str	r3, [sp, #24]
 800cc42:	f000 8151 	beq.w	800cee8 <AES_general_SW_enc+0x2cc>
 800cc46:	6804      	ldr	r4, [r0, #0]
 800cc48:	6811      	ldr	r1, [r2, #0]
 800cc4a:	6840      	ldr	r0, [r0, #4]
 800cc4c:	6853      	ldr	r3, [r2, #4]
 800cc4e:	ea81 0b04 	eor.w	fp, r1, r4
 800cc52:	4058      	eors	r0, r3
 800cc54:	9003      	str	r0, [sp, #12]
 800cc56:	46d9      	mov	r9, fp
 800cc58:	46dc      	mov	ip, fp
 800cc5a:	4bb2      	ldr	r3, [pc, #712]	@ (800cf24 <AES_general_SW_enc+0x308>)
 800cc5c:	9c03      	ldr	r4, [sp, #12]
 800cc5e:	4698      	mov	r8, r3
 800cc60:	e067      	b.n	800cd32 <AES_general_SW_enc+0x116>
 800cc62:	ea4f 611b 	mov.w	r1, fp, lsr #24
 800cc66:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800cc6a:	0e07      	lsrs	r7, r0, #24
 800cc6c:	ea4f 651a 	mov.w	r5, sl, lsr #24
 800cc70:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 800cc74:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 800cc78:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 800cc7c:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 800cc80:	e892 0022 	ldmia.w	r2, {r1, r5}
 800cc84:	404e      	eors	r6, r1
 800cc86:	fa5f f18a 	uxtb.w	r1, sl
 800cc8a:	ea89 0505 	eor.w	r5, r9, r5
 800cc8e:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 800cc92:	6891      	ldr	r1, [r2, #8]
 800cc94:	ea8c 0c01 	eor.w	ip, ip, r1
 800cc98:	68d1      	ldr	r1, [r2, #12]
 800cc9a:	404f      	eors	r7, r1
 800cc9c:	9704      	str	r7, [sp, #16]
 800cc9e:	fa5f f78b 	uxtb.w	r7, fp
 800cca2:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 800cca6:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 800ccaa:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800ccae:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 800ccb2:	b2e5      	uxtb	r5, r4
 800ccb4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ccb8:	b2c1      	uxtb	r1, r0
 800ccba:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800ccbe:	9405      	str	r4, [sp, #20]
 800ccc0:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800ccc4:	9c04      	ldr	r4, [sp, #16]
 800ccc6:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800ccca:	9703      	str	r7, [sp, #12]
 800cccc:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 800ccd0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800ccd4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800ccd8:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 800ccdc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800cce0:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 800cce4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800cce8:	f3ca 2007 	ubfx	r0, sl, #8, #8
 800ccec:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800ccf0:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 800ccf4:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 800ccf8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ccfc:	f3cb 4007 	ubfx	r0, fp, #16, #8
 800cd00:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800cd04:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 800cd08:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 800cd0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cd10:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 800cd14:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 800cd18:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 800cd1c:	9805      	ldr	r0, [sp, #20]
 800cd1e:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 800cd22:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 800cd26:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 800cd2a:	9703      	str	r7, [sp, #12]
 800cd2c:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 800cd30:	463c      	mov	r4, r7
 800cd32:	0e21      	lsrs	r1, r4, #24
 800cd34:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800cd38:	ea4f 6419 	mov.w	r4, r9, lsr #24
 800cd3c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 800cd40:	6911      	ldr	r1, [r2, #16]
 800cd42:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800cd46:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800cd4a:	6954      	ldr	r4, [r2, #20]
 800cd4c:	404d      	eors	r5, r1
 800cd4e:	ea4f 601b 	mov.w	r0, fp, lsr #24
 800cd52:	fa5f f189 	uxtb.w	r1, r9
 800cd56:	407c      	eors	r4, r7
 800cd58:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800cd5c:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 800cd60:	6991      	ldr	r1, [r2, #24]
 800cd62:	4048      	eors	r0, r1
 800cd64:	69d1      	ldr	r1, [r2, #28]
 800cd66:	404e      	eors	r6, r1
 800cd68:	9604      	str	r6, [sp, #16]
 800cd6a:	9e03      	ldr	r6, [sp, #12]
 800cd6c:	9904      	ldr	r1, [sp, #16]
 800cd6e:	fa5f fa86 	uxtb.w	sl, r6
 800cd72:	fa5f f68b 	uxtb.w	r6, fp
 800cd76:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800cd7a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800cd7e:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 800cd82:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 800cd86:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800cd8a:	fa5f f48c 	uxtb.w	r4, ip
 800cd8e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800cd92:	9702      	str	r7, [sp, #8]
 800cd94:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800cd98:	9705      	str	r7, [sp, #20]
 800cd9a:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 800cd9e:	f3cb 4107 	ubfx	r1, fp, #16, #8
 800cda2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800cda6:	9f06      	ldr	r7, [sp, #24]
 800cda8:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 800cdac:	9601      	str	r6, [sp, #4]
 800cdae:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800cdb2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800cdb6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800cdba:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cdbe:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800cdc2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800cdc6:	9604      	str	r6, [sp, #16]
 800cdc8:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 800cdcc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cdd0:	3f01      	subs	r7, #1
 800cdd2:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 800cdd6:	9706      	str	r7, [sp, #24]
 800cdd8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800cddc:	9904      	ldr	r1, [sp, #16]
 800cdde:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 800cde2:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800cde6:	f3cb 2907 	ubfx	r9, fp, #8, #8
 800cdea:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 800cdee:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 800cdf2:	9901      	ldr	r1, [sp, #4]
 800cdf4:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 800cdf8:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 800cdfc:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 800ce00:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 800ce04:	9f06      	ldr	r7, [sp, #24]
 800ce06:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 800ce0a:	9e05      	ldr	r6, [sp, #20]
 800ce0c:	2f00      	cmp	r7, #0
 800ce0e:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 800ce12:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 800ce16:	f102 0220 	add.w	r2, r2, #32
 800ce1a:	f73f af22 	bgt.w	800cc62 <AES_general_SW_enc+0x46>
 800ce1e:	4b42      	ldr	r3, [pc, #264]	@ (800cf28 <AES_general_SW_enc+0x30c>)
 800ce20:	6811      	ldr	r1, [r2, #0]
 800ce22:	ea4f 671b 	mov.w	r7, fp, lsr #24
 800ce26:	fa5f f68a 	uxtb.w	r6, sl
 800ce2a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800ce2e:	f813 8007 	ldrb.w	r8, [r3, r7]
 800ce32:	5d9f      	ldrb	r7, [r3, r6]
 800ce34:	5d5d      	ldrb	r5, [r3, r5]
 800ce36:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ce3a:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 800ce3e:	f813 c006 	ldrb.w	ip, [r3, r6]
 800ce42:	0e27      	lsrs	r7, r4, #24
 800ce44:	fa5f f68b 	uxtb.w	r6, fp
 800ce48:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 800ce4c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ce50:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 800ce54:	ea88 0101 	eor.w	r1, r8, r1
 800ce58:	f813 c007 	ldrb.w	ip, [r3, r7]
 800ce5c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ce60:	5d9f      	ldrb	r7, [r3, r6]
 800ce62:	5d5e      	ldrb	r6, [r3, r5]
 800ce64:	f8c8 1000 	str.w	r1, [r8]
 800ce68:	f3ca 2507 	ubfx	r5, sl, #8, #8
 800ce6c:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 800ce70:	f813 8005 	ldrb.w	r8, [r3, r5]
 800ce74:	6851      	ldr	r1, [r2, #4]
 800ce76:	0e07      	lsrs	r7, r0, #24
 800ce78:	b2e5      	uxtb	r5, r4
 800ce7a:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 800ce7e:	f3ca 4607 	ubfx	r6, sl, #16, #8
 800ce82:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800ce86:	5ddf      	ldrb	r7, [r3, r7]
 800ce88:	f813 9006 	ldrb.w	r9, [r3, r6]
 800ce8c:	5d5d      	ldrb	r5, [r3, r5]
 800ce8e:	ea8c 0101 	eor.w	r1, ip, r1
 800ce92:	f3cb 2607 	ubfx	r6, fp, #8, #8
 800ce96:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ce9a:	5d9e      	ldrb	r6, [r3, r6]
 800ce9c:	f8cc 1004 	str.w	r1, [ip, #4]
 800cea0:	b2c0      	uxtb	r0, r0
 800cea2:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800cea6:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800ceaa:	f813 8000 	ldrb.w	r8, [r3, r0]
 800ceae:	6890      	ldr	r0, [r2, #8]
 800ceb0:	5ddf      	ldrb	r7, [r3, r7]
 800ceb2:	f3cb 4107 	ubfx	r1, fp, #16, #8
 800ceb6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800ceba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cebe:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800cec2:	4045      	eors	r5, r0
 800cec4:	5c58      	ldrb	r0, [r3, r1]
 800cec6:	f8cc 5008 	str.w	r5, [ip, #8]
 800ceca:	5d19      	ldrb	r1, [r3, r4]
 800cecc:	68d2      	ldr	r2, [r2, #12]
 800cece:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 800ced2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ced6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ceda:	4053      	eors	r3, r2
 800cedc:	f8cc 300c 	str.w	r3, [ip, #12]
 800cee0:	b00a      	add	sp, #40	@ 0x28
 800cee2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cee6:	4770      	bx	lr
 800cee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceea:	602b      	str	r3, [r5, #0]
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	9309      	str	r3, [sp, #36]	@ 0x24
 800cef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f47f aea7 	bne.w	800cc46 <AES_general_SW_enc+0x2a>
 800cef8:	6803      	ldr	r3, [r0, #0]
 800cefa:	6815      	ldr	r5, [r2, #0]
 800cefc:	6847      	ldr	r7, [r0, #4]
 800cefe:	6886      	ldr	r6, [r0, #8]
 800cf00:	6854      	ldr	r4, [r2, #4]
 800cf02:	68c0      	ldr	r0, [r0, #12]
 800cf04:	6891      	ldr	r1, [r2, #8]
 800cf06:	406b      	eors	r3, r5
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	68d3      	ldr	r3, [r2, #12]
 800cf0c:	ea84 0c07 	eor.w	ip, r4, r7
 800cf10:	ea81 0b06 	eor.w	fp, r1, r6
 800cf14:	ea83 0900 	eor.w	r9, r3, r0
 800cf18:	e69f      	b.n	800cc5a <AES_general_SW_enc+0x3e>
 800cf1a:	bf00      	nop
 800cf1c:	40023008 	.word	0x40023008
 800cf20:	40023000 	.word	0x40023000
 800cf24:	0800f434 	.word	0x0800f434
 800cf28:	0800f934 	.word	0x0800f934

0800cf2c <AES_keyschedule_dec>:
 800cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf30:	1097      	asrs	r7, r2, #2
 800cf32:	2f00      	cmp	r7, #0
 800cf34:	b089      	sub	sp, #36	@ 0x24
 800cf36:	4616      	mov	r6, r2
 800cf38:	4688      	mov	r8, r1
 800cf3a:	dd11      	ble.n	800cf60 <AES_keyschedule_dec+0x34>
 800cf3c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cf40:	1f0b      	subs	r3, r1, #4
 800cf42:	7842      	ldrb	r2, [r0, #1]
 800cf44:	7805      	ldrb	r5, [r0, #0]
 800cf46:	78c4      	ldrb	r4, [r0, #3]
 800cf48:	7881      	ldrb	r1, [r0, #2]
 800cf4a:	0412      	lsls	r2, r2, #16
 800cf4c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800cf50:	4322      	orrs	r2, r4
 800cf52:	3004      	adds	r0, #4
 800cf54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf58:	42b8      	cmp	r0, r7
 800cf5a:	f843 2f04 	str.w	r2, [r3, #4]!
 800cf5e:	d1f0      	bne.n	800cf42 <AES_keyschedule_dec+0x16>
 800cf60:	4632      	mov	r2, r6
 800cf62:	10f6      	asrs	r6, r6, #3
 800cf64:	3603      	adds	r6, #3
 800cf66:	0076      	lsls	r6, r6, #1
 800cf68:	4640      	mov	r0, r8
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	f7ff fd74 	bl	800ca58 <AES_keyschedule_enc_LL>
 800cf70:	2e01      	cmp	r6, #1
 800cf72:	9607      	str	r6, [sp, #28]
 800cf74:	f340 8092 	ble.w	800d09c <AES_keyschedule_dec+0x170>
 800cf78:	2001      	movs	r0, #1
 800cf7a:	4a4a      	ldr	r2, [pc, #296]	@ (800d0a4 <AES_keyschedule_dec+0x178>)
 800cf7c:	4b4a      	ldr	r3, [pc, #296]	@ (800d0a8 <AES_keyschedule_dec+0x17c>)
 800cf7e:	9004      	str	r0, [sp, #16]
 800cf80:	4644      	mov	r4, r8
 800cf82:	6921      	ldr	r1, [r4, #16]
 800cf84:	b2cd      	uxtb	r5, r1
 800cf86:	0e08      	lsrs	r0, r1, #24
 800cf88:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800cf8c:	5d5d      	ldrb	r5, [r3, r5]
 800cf8e:	5c18      	ldrb	r0, [r3, r0]
 800cf90:	5d9e      	ldrb	r6, [r3, r6]
 800cf92:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800cf96:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800cf9a:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800cf9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800cfa2:	ea80 6535 	eor.w	r5, r0, r5, ror #24
 800cfa6:	5c59      	ldrb	r1, [r3, r1]
 800cfa8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800cfac:	ea85 2136 	eor.w	r1, r5, r6, ror #8
 800cfb0:	ea81 4130 	eor.w	r1, r1, r0, ror #16
 800cfb4:	f108 0810 	add.w	r8, r8, #16
 800cfb8:	f844 1f10 	str.w	r1, [r4, #16]!
 800cfbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800cfc0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800cfc4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cfc8:	fa5f fb80 	uxtb.w	fp, r0
 800cfcc:	0e0e      	lsrs	r6, r1, #24
 800cfce:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800cfd2:	5d9e      	ldrb	r6, [r3, r6]
 800cfd4:	9603      	str	r6, [sp, #12]
 800cfd6:	f852 602b 	ldr.w	r6, [r2, fp, lsl #2]
 800cfda:	9605      	str	r6, [sp, #20]
 800cfdc:	9e03      	ldr	r6, [sp, #12]
 800cfde:	fa5f fa85 	uxtb.w	sl, r5
 800cfe2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 800cfe6:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800cfea:	f813 a00a 	ldrb.w	sl, [r3, sl]
 800cfee:	f813 9009 	ldrb.w	r9, [r3, r9]
 800cff2:	9602      	str	r6, [sp, #8]
 800cff4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800cff8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800cffc:	ea4f 6c10 	mov.w	ip, r0, lsr #24
 800d000:	b2cf      	uxtb	r7, r1
 800d002:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
 800d006:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
 800d00a:	5d9e      	ldrb	r6, [r3, r6]
 800d00c:	5d5d      	ldrb	r5, [r3, r5]
 800d00e:	f813 c00c 	ldrb.w	ip, [r3, ip]
 800d012:	5ddf      	ldrb	r7, [r3, r7]
 800d014:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800d018:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800d01c:	f852 c02c 	ldr.w	ip, [r2, ip, lsl #2]
 800d020:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800d024:	9601      	str	r6, [sp, #4]
 800d026:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 800d02a:	ea89 693a 	eor.w	r9, r9, sl, ror #24
 800d02e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800d032:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800d036:	9503      	str	r5, [sp, #12]
 800d038:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d03c:	9e02      	ldr	r6, [sp, #8]
 800d03e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800d042:	9d05      	ldr	r5, [sp, #20]
 800d044:	5c18      	ldrb	r0, [r3, r0]
 800d046:	f813 a00a 	ldrb.w	sl, [r3, sl]
 800d04a:	f852 b02b 	ldr.w	fp, [r2, fp, lsl #2]
 800d04e:	5c59      	ldrb	r1, [r3, r1]
 800d050:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800d054:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
 800d058:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d05c:	ea86 6737 	eor.w	r7, r6, r7, ror #24
 800d060:	9e04      	ldr	r6, [sp, #16]
 800d062:	ea8c 6c35 	eor.w	ip, ip, r5, ror #24
 800d066:	3601      	adds	r6, #1
 800d068:	ea8c 2c3b 	eor.w	ip, ip, fp, ror #8
 800d06c:	9d01      	ldr	r5, [sp, #4]
 800d06e:	9604      	str	r6, [sp, #16]
 800d070:	ea87 273a 	eor.w	r7, r7, sl, ror #8
 800d074:	ea8c 4030 	eor.w	r0, ip, r0, ror #16
 800d078:	ea87 4131 	eor.w	r1, r7, r1, ror #16
 800d07c:	9e03      	ldr	r6, [sp, #12]
 800d07e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d082:	9f04      	ldr	r7, [sp, #16]
 800d084:	9807      	ldr	r0, [sp, #28]
 800d086:	f8c8 100c 	str.w	r1, [r8, #12]
 800d08a:	ea89 2935 	eor.w	r9, r9, r5, ror #8
 800d08e:	ea89 4536 	eor.w	r5, r9, r6, ror #16
 800d092:	4287      	cmp	r7, r0
 800d094:	f8c8 5004 	str.w	r5, [r8, #4]
 800d098:	f47f af73 	bne.w	800cf82 <AES_keyschedule_dec+0x56>
 800d09c:	b009      	add	sp, #36	@ 0x24
 800d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800f034 	.word	0x0800f034
 800d0a8:	0800f934 	.word	0x0800f934

0800d0ac <AES_general_SW_dec>:
 800d0ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d0b0:	4cc8      	ldr	r4, [pc, #800]	@ (800d3d4 <AES_general_SW_dec+0x328>)
 800d0b2:	4dc9      	ldr	r5, [pc, #804]	@ (800d3d8 <AES_general_SW_dec+0x32c>)
 800d0b4:	b08a      	sub	sp, #40	@ 0x28
 800d0b6:	2700      	movs	r7, #0
 800d0b8:	2601      	movs	r6, #1
 800d0ba:	9709      	str	r7, [sp, #36]	@ 0x24
 800d0bc:	6026      	str	r6, [r4, #0]
 800d0be:	6824      	ldr	r4, [r4, #0]
 800d0c0:	9409      	str	r4, [sp, #36]	@ 0x24
 800d0c2:	682c      	ldr	r4, [r5, #0]
 800d0c4:	9409      	str	r4, [sp, #36]	@ 0x24
 800d0c6:	10db      	asrs	r3, r3, #3
 800d0c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d0ca:	9107      	str	r1, [sp, #28]
 800d0cc:	3303      	adds	r3, #3
 800d0ce:	9306      	str	r3, [sp, #24]
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800d0d6:	eb02 0103 	add.w	r1, r2, r3
 800d0da:	f000 8159 	beq.w	800d390 <AES_general_SW_dec+0x2e4>
 800d0de:	58d7      	ldr	r7, [r2, r3]
 800d0e0:	6802      	ldr	r2, [r0, #0]
 800d0e2:	684b      	ldr	r3, [r1, #4]
 800d0e4:	6840      	ldr	r0, [r0, #4]
 800d0e6:	ea87 0a02 	eor.w	sl, r7, r2
 800d0ea:	4058      	eors	r0, r3
 800d0ec:	46d0      	mov	r8, sl
 800d0ee:	46d4      	mov	ip, sl
 800d0f0:	4bba      	ldr	r3, [pc, #744]	@ (800d3dc <AES_general_SW_dec+0x330>)
 800d0f2:	f8cd c00c 	str.w	ip, [sp, #12]
 800d0f6:	469b      	mov	fp, r3
 800d0f8:	4664      	mov	r4, ip
 800d0fa:	46e1      	mov	r9, ip
 800d0fc:	e06b      	b.n	800d1d6 <AES_general_SW_dec+0x12a>
 800d0fe:	0e14      	lsrs	r4, r2, #24
 800d100:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800d104:	0e05      	lsrs	r5, r0, #24
 800d106:	f85b 9027 	ldr.w	r9, [fp, r7, lsl #2]
 800d10a:	f85b c024 	ldr.w	ip, [fp, r4, lsl #2]
 800d10e:	f85b 7025 	ldr.w	r7, [fp, r5, lsl #2]
 800d112:	e891 0030 	ldmia.w	r1, {r4, r5}
 800d116:	ea4f 6618 	mov.w	r6, r8, lsr #24
 800d11a:	ea8c 0c04 	eor.w	ip, ip, r4
 800d11e:	fa5f f48a 	uxtb.w	r4, sl
 800d122:	ea89 0505 	eor.w	r5, r9, r5
 800d126:	f85b 6026 	ldr.w	r6, [fp, r6, lsl #2]
 800d12a:	f85b 9024 	ldr.w	r9, [fp, r4, lsl #2]
 800d12e:	688c      	ldr	r4, [r1, #8]
 800d130:	4066      	eors	r6, r4
 800d132:	68cc      	ldr	r4, [r1, #12]
 800d134:	4067      	eors	r7, r4
 800d136:	9702      	str	r7, [sp, #8]
 800d138:	ea8c 6939 	eor.w	r9, ip, r9, ror #24
 800d13c:	b2c7      	uxtb	r7, r0
 800d13e:	f3c0 4c07 	ubfx	ip, r0, #16, #8
 800d142:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800d146:	f85b 7027 	ldr.w	r7, [fp, r7, lsl #2]
 800d14a:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800d14e:	9005      	str	r0, [sp, #20]
 800d150:	b2d0      	uxtb	r0, r2
 800d152:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 800d156:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800d15a:	9f02      	ldr	r7, [sp, #8]
 800d15c:	f85b 402c 	ldr.w	r4, [fp, ip, lsl #2]
 800d160:	9404      	str	r4, [sp, #16]
 800d162:	ea87 6430 	eor.w	r4, r7, r0, ror #24
 800d166:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800d16a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d16e:	fa5f fa88 	uxtb.w	sl, r8
 800d172:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800d176:	f85b a02a 	ldr.w	sl, [fp, sl, lsl #2]
 800d17a:	9202      	str	r2, [sp, #8]
 800d17c:	f3c8 4207 	ubfx	r2, r8, #16, #8
 800d180:	ea85 653a 	eor.w	r5, r5, sl, ror #24
 800d184:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 800d188:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d18c:	f85b c022 	ldr.w	ip, [fp, r2, lsl #2]
 800d190:	9a04      	ldr	r2, [sp, #16]
 800d192:	f3c8 2807 	ubfx	r8, r8, #8, #8
 800d196:	ea89 2932 	eor.w	r9, r9, r2, ror #8
 800d19a:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800d19e:	f3ca 2207 	ubfx	r2, sl, #8, #8
 800d1a2:	f3ca 4807 	ubfx	r8, sl, #16, #8
 800d1a6:	ea85 2737 	eor.w	r7, r5, r7, ror #8
 800d1aa:	9d05      	ldr	r5, [sp, #20]
 800d1ac:	f85b 8028 	ldr.w	r8, [fp, r8, lsl #2]
 800d1b0:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800d1b4:	ea87 4735 	eor.w	r7, r7, r5, ror #16
 800d1b8:	9703      	str	r7, [sp, #12]
 800d1ba:	ea84 243c 	eor.w	r4, r4, ip, ror #8
 800d1be:	9f02      	ldr	r7, [sp, #8]
 800d1c0:	ea86 2638 	eor.w	r6, r6, r8, ror #8
 800d1c4:	ea89 4030 	eor.w	r0, r9, r0, ror #16
 800d1c8:	ea84 4832 	eor.w	r8, r4, r2, ror #16
 800d1cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d1d0:	9c03      	ldr	r4, [sp, #12]
 800d1d2:	ea86 4a37 	eor.w	sl, r6, r7, ror #16
 800d1d6:	3920      	subs	r1, #32
 800d1d8:	0e07      	lsrs	r7, r0, #24
 800d1da:	0e26      	lsrs	r6, r4, #24
 800d1dc:	690a      	ldr	r2, [r1, #16]
 800d1de:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800d1e2:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
 800d1e6:	ea4f 6418 	mov.w	r4, r8, lsr #24
 800d1ea:	4057      	eors	r7, r2
 800d1ec:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800d1f0:	694c      	ldr	r4, [r1, #20]
 800d1f2:	fa5f f289 	uxtb.w	r2, r9
 800d1f6:	ea4f 651a 	mov.w	r5, sl, lsr #24
 800d1fa:	ea8c 0404 	eor.w	r4, ip, r4
 800d1fe:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800d202:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
 800d206:	698a      	ldr	r2, [r1, #24]
 800d208:	fa5f f98a 	uxtb.w	r9, sl
 800d20c:	4055      	eors	r5, r2
 800d20e:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800d212:	69ca      	ldr	r2, [r1, #28]
 800d214:	ea84 6939 	eor.w	r9, r4, r9, ror #24
 800d218:	4056      	eors	r6, r2
 800d21a:	b2c4      	uxtb	r4, r0
 800d21c:	9605      	str	r6, [sp, #20]
 800d21e:	9a05      	ldr	r2, [sp, #20]
 800d220:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800d224:	fa5f f688 	uxtb.w	r6, r8
 800d228:	ea87 6c3c 	eor.w	ip, r7, ip, ror #24
 800d22c:	ea82 6434 	eor.w	r4, r2, r4, ror #24
 800d230:	f3c8 4707 	ubfx	r7, r8, #16, #8
 800d234:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800d238:	9401      	str	r4, [sp, #4]
 800d23a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 800d23e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800d242:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800d246:	9702      	str	r7, [sp, #8]
 800d248:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
 800d24c:	9a02      	ldr	r2, [sp, #8]
 800d24e:	9704      	str	r7, [sp, #16]
 800d250:	ea85 6836 	eor.w	r8, r5, r6, ror #24
 800d254:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800d258:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800d25c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d260:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800d264:	9405      	str	r4, [sp, #20]
 800d266:	9c06      	ldr	r4, [sp, #24]
 800d268:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d26c:	3c01      	subs	r4, #1
 800d26e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 800d272:	9406      	str	r4, [sp, #24]
 800d274:	9c03      	ldr	r4, [sp, #12]
 800d276:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 800d27a:	ea8c 2732 	eor.w	r7, ip, r2, ror #8
 800d27e:	ea89 2a30 	eor.w	sl, r9, r0, ror #8
 800d282:	9a05      	ldr	r2, [sp, #20]
 800d284:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d288:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 800d28c:	ea89 2032 	eor.w	r0, r9, r2, ror #8
 800d290:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 800d294:	ea87 4235 	eor.w	r2, r7, r5, ror #16
 800d298:	9d04      	ldr	r5, [sp, #16]
 800d29a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d29e:	ea88 283c 	eor.w	r8, r8, ip, ror #8
 800d2a2:	ea8a 4a35 	eor.w	sl, sl, r5, ror #16
 800d2a6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800d2aa:	f8cd a00c 	str.w	sl, [sp, #12]
 800d2ae:	ea88 4836 	eor.w	r8, r8, r6, ror #16
 800d2b2:	9e06      	ldr	r6, [sp, #24]
 800d2b4:	2e00      	cmp	r6, #0
 800d2b6:	ea80 4034 	eor.w	r0, r0, r4, ror #16
 800d2ba:	f73f af20 	bgt.w	800d0fe <AES_general_SW_dec+0x52>
 800d2be:	4b48      	ldr	r3, [pc, #288]	@ (800d3e0 <AES_general_SW_dec+0x334>)
 800d2c0:	0e17      	lsrs	r7, r2, #24
 800d2c2:	fa5f f68a 	uxtb.w	r6, sl
 800d2c6:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d2ca:	5ddc      	ldrb	r4, [r3, r7]
 800d2cc:	5d9f      	ldrb	r7, [r3, r6]
 800d2ce:	5d5d      	ldrb	r5, [r3, r5]
 800d2d0:	f3c8 2607 	ubfx	r6, r8, #8, #8
 800d2d4:	ea47 6404 	orr.w	r4, r7, r4, lsl #24
 800d2d8:	f813 c006 	ldrb.w	ip, [r3, r6]
 800d2dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d2e0:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800d2e4:	fa5f f688 	uxtb.w	r6, r8
 800d2e8:	ea44 290c 	orr.w	r9, r4, ip, lsl #8
 800d2ec:	680c      	ldr	r4, [r1, #0]
 800d2ee:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d2f2:	f813 c007 	ldrb.w	ip, [r3, r7]
 800d2f6:	5d9f      	ldrb	r7, [r3, r6]
 800d2f8:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800d2fc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d300:	ea89 0904 	eor.w	r9, r9, r4
 800d304:	f8ca 9000 	str.w	r9, [sl]
 800d308:	5d5d      	ldrb	r5, [r3, r5]
 800d30a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d30e:	5d9c      	ldrb	r4, [r3, r6]
 800d310:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 800d314:	b2c6      	uxtb	r6, r0
 800d316:	ea4f 6718 	mov.w	r7, r8, lsr #24
 800d31a:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
 800d31e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800d322:	5d9e      	ldrb	r6, [r3, r6]
 800d324:	f813 9007 	ldrb.w	r9, [r3, r7]
 800d328:	5d5d      	ldrb	r5, [r3, r5]
 800d32a:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
 800d32e:	684c      	ldr	r4, [r1, #4]
 800d330:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800d334:	ea8c 0c04 	eor.w	ip, ip, r4
 800d338:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 800d33c:	f8ca c004 	str.w	ip, [sl, #4]
 800d340:	f813 9007 	ldrb.w	r9, [r3, r7]
 800d344:	688f      	ldr	r7, [r1, #8]
 800d346:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 800d34a:	0e00      	lsrs	r0, r0, #24
 800d34c:	b2d2      	uxtb	r2, r2
 800d34e:	9e03      	ldr	r6, [sp, #12]
 800d350:	f813 a000 	ldrb.w	sl, [r3, r0]
 800d354:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d358:	f3c8 4407 	ubfx	r4, r8, #16, #8
 800d35c:	ea45 2b09 	orr.w	fp, r5, r9, lsl #8
 800d360:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800d364:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800d368:	5d1c      	ldrb	r4, [r3, r4]
 800d36a:	5c18      	ldrb	r0, [r3, r0]
 800d36c:	ea8b 0707 	eor.w	r7, fp, r7
 800d370:	f8c9 7008 	str.w	r7, [r9, #8]
 800d374:	ea4c 630a 	orr.w	r3, ip, sl, lsl #24
 800d378:	68ca      	ldr	r2, [r1, #12]
 800d37a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d37e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d382:	4053      	eors	r3, r2
 800d384:	f8c9 300c 	str.w	r3, [r9, #12]
 800d388:	b00a      	add	sp, #40	@ 0x28
 800d38a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d38e:	4770      	bx	lr
 800d390:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d392:	602c      	str	r4, [r5, #0]
 800d394:	682c      	ldr	r4, [r5, #0]
 800d396:	9409      	str	r4, [sp, #36]	@ 0x24
 800d398:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d39a:	b984      	cbnz	r4, 800d3be <AES_general_SW_dec+0x312>
 800d39c:	58d2      	ldr	r2, [r2, r3]
 800d39e:	6803      	ldr	r3, [r0, #0]
 800d3a0:	6847      	ldr	r7, [r0, #4]
 800d3a2:	6886      	ldr	r6, [r0, #8]
 800d3a4:	68c5      	ldr	r5, [r0, #12]
 800d3a6:	684c      	ldr	r4, [r1, #4]
 800d3a8:	ea82 0003 	eor.w	r0, r2, r3
 800d3ac:	688a      	ldr	r2, [r1, #8]
 800d3ae:	68cb      	ldr	r3, [r1, #12]
 800d3b0:	ea84 0c07 	eor.w	ip, r4, r7
 800d3b4:	ea82 0a06 	eor.w	sl, r2, r6
 800d3b8:	ea83 0805 	eor.w	r8, r3, r5
 800d3bc:	e698      	b.n	800d0f0 <AES_general_SW_dec+0x44>
 800d3be:	58d4      	ldr	r4, [r2, r3]
 800d3c0:	6802      	ldr	r2, [r0, #0]
 800d3c2:	684b      	ldr	r3, [r1, #4]
 800d3c4:	6840      	ldr	r0, [r0, #4]
 800d3c6:	ea84 0a02 	eor.w	sl, r4, r2
 800d3ca:	4058      	eors	r0, r3
 800d3cc:	46d0      	mov	r8, sl
 800d3ce:	46d4      	mov	ip, sl
 800d3d0:	e68e      	b.n	800d0f0 <AES_general_SW_dec+0x44>
 800d3d2:	bf00      	nop
 800d3d4:	40023008 	.word	0x40023008
 800d3d8:	40023000 	.word	0x40023000
 800d3dc:	0800f034 	.word	0x0800f034
 800d3e0:	0800f834 	.word	0x0800f834

0800d3e4 <AES_CBC_Encrypt_Init>:
 800d3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3e8:	b160      	cbz	r0, 800d404 <AES_CBC_Encrypt_Init+0x20>
 800d3ea:	b159      	cbz	r1, 800d404 <AES_CBC_Encrypt_Init+0x20>
 800d3ec:	b152      	cbz	r2, 800d404 <AES_CBC_Encrypt_Init+0x20>
 800d3ee:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 800d3f0:	f027 0308 	bic.w	r3, r7, #8
 800d3f4:	2b10      	cmp	r3, #16
 800d3f6:	d009      	beq.n	800d40c <AES_CBC_Encrypt_Init+0x28>
 800d3f8:	2f20      	cmp	r7, #32
 800d3fa:	d007      	beq.n	800d40c <AES_CBC_Encrypt_Init+0x28>
 800d3fc:	f640 401f 	movw	r0, #3103	@ 0xc1f
 800d400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d404:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800d408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d40c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800d410:	f10c 33ff 	add.w	r3, ip, #4294967295
 800d414:	2b0f      	cmp	r3, #15
 800d416:	d8f1      	bhi.n	800d3fc <AES_CBC_Encrypt_Init+0x18>
 800d418:	f890 8004 	ldrb.w	r8, [r0, #4]
 800d41c:	60c2      	str	r2, [r0, #12]
 800d41e:	2300      	movs	r3, #0
 800d420:	f028 0406 	bic.w	r4, r8, #6
 800d424:	7104      	strb	r4, [r0, #4]
 800d426:	461d      	mov	r5, r3
 800d428:	6143      	str	r3, [r0, #20]
 800d42a:	6183      	str	r3, [r0, #24]
 800d42c:	61c3      	str	r3, [r0, #28]
 800d42e:	6203      	str	r3, [r0, #32]
 800d430:	461c      	mov	r4, r3
 800d432:	e002      	b.n	800d43a <AES_CBC_Encrypt_Init+0x56>
 800d434:	eb00 0584 	add.w	r5, r0, r4, lsl #2
 800d438:	696d      	ldr	r5, [r5, #20]
 800d43a:	f003 0603 	and.w	r6, r3, #3
 800d43e:	f812 9003 	ldrb.w	r9, [r2, r3]
 800d442:	f1c6 0603 	rsb	r6, r6, #3
 800d446:	00f6      	lsls	r6, r6, #3
 800d448:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800d44c:	3301      	adds	r3, #1
 800d44e:	fa09 f606 	lsl.w	r6, r9, r6
 800d452:	4335      	orrs	r5, r6
 800d454:	4563      	cmp	r3, ip
 800d456:	6165      	str	r5, [r4, #20]
 800d458:	ea4f 04a3 	mov.w	r4, r3, asr #2
 800d45c:	d1ea      	bne.n	800d434 <AES_CBC_Encrypt_Init+0x50>
 800d45e:	f018 0f01 	tst.w	r8, #1
 800d462:	d122      	bne.n	800d4aa <AES_CBC_Encrypt_Init+0xc6>
 800d464:	ea4f 0ca7 	mov.w	ip, r7, asr #2
 800d468:	f1bc 0f00 	cmp.w	ip, #0
 800d46c:	6081      	str	r1, [r0, #8]
 800d46e:	f100 0e28 	add.w	lr, r0, #40	@ 0x28
 800d472:	dd12      	ble.n	800d49a <AES_CBC_Encrypt_Init+0xb6>
 800d474:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800d478:	f100 0324 	add.w	r3, r0, #36	@ 0x24
 800d47c:	784a      	ldrb	r2, [r1, #1]
 800d47e:	780e      	ldrb	r6, [r1, #0]
 800d480:	78cd      	ldrb	r5, [r1, #3]
 800d482:	788c      	ldrb	r4, [r1, #2]
 800d484:	0412      	lsls	r2, r2, #16
 800d486:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800d48a:	432a      	orrs	r2, r5
 800d48c:	3104      	adds	r1, #4
 800d48e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800d492:	4561      	cmp	r1, ip
 800d494:	f843 2f04 	str.w	r2, [r3, #4]!
 800d498:	d1f0      	bne.n	800d47c <AES_CBC_Encrypt_Init+0x98>
 800d49a:	4670      	mov	r0, lr
 800d49c:	463a      	mov	r2, r7
 800d49e:	4671      	mov	r1, lr
 800d4a0:	f7ff fada 	bl	800ca58 <AES_keyschedule_enc_LL>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d4b0 <AES_CBC_Encrypt_Append>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	b08b      	sub	sp, #44	@ 0x2c
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	4691      	mov	r9, r2
 800d4bc:	461e      	mov	r6, r3
 800d4be:	b150      	cbz	r0, 800d4d6 <AES_CBC_Encrypt_Append+0x26>
 800d4c0:	b149      	cbz	r1, 800d4d6 <AES_CBC_Encrypt_Append+0x26>
 800d4c2:	b143      	cbz	r3, 800d4d6 <AES_CBC_Encrypt_Append+0x26>
 800d4c4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d4c6:	b130      	cbz	r0, 800d4d6 <AES_CBC_Encrypt_Append+0x26>
 800d4c8:	2a0f      	cmp	r2, #15
 800d4ca:	dc09      	bgt.n	800d4e0 <AES_CBC_Encrypt_Append+0x30>
 800d4cc:	f640 401d 	movw	r0, #3101	@ 0xc1d
 800d4d0:	b00b      	add	sp, #44	@ 0x2c
 800d4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d6:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800d4da:	b00b      	add	sp, #44	@ 0x2c
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e0:	7923      	ldrb	r3, [r4, #4]
 800d4e2:	f013 0f06 	tst.w	r3, #6
 800d4e6:	d002      	beq.n	800d4ee <AES_CBC_Encrypt_Append+0x3e>
 800d4e8:	f640 401e 	movw	r0, #3102	@ 0xc1e
 800d4ec:	e7f5      	b.n	800d4da <AES_CBC_Encrypt_Append+0x2a>
 800d4ee:	f012 0f0f 	tst.w	r2, #15
 800d4f2:	f000 809f 	beq.w	800d634 <AES_CBC_Encrypt_Append+0x184>
 800d4f6:	f043 0304 	orr.w	r3, r3, #4
 800d4fa:	f1b2 0a10 	subs.w	sl, r2, #16
 800d4fe:	7123      	strb	r3, [r4, #4]
 800d500:	f000 809a 	beq.w	800d638 <AES_CBC_Encrypt_Append+0x188>
 800d504:	ab06      	add	r3, sp, #24
 800d506:	f104 0114 	add.w	r1, r4, #20
 800d50a:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800d50e:	f8cd 9010 	str.w	r9, [sp, #16]
 800d512:	9102      	str	r1, [sp, #8]
 800d514:	9203      	str	r2, [sp, #12]
 800d516:	463d      	mov	r5, r7
 800d518:	f04f 0800 	mov.w	r8, #0
 800d51c:	9305      	str	r3, [sp, #20]
 800d51e:	4699      	mov	r9, r3
 800d520:	786a      	ldrb	r2, [r5, #1]
 800d522:	f817 3008 	ldrb.w	r3, [r7, r8]
 800d526:	7a68      	ldrb	r0, [r5, #9]
 800d528:	f895 e008 	ldrb.w	lr, [r5, #8]
 800d52c:	f895 c005 	ldrb.w	ip, [r5, #5]
 800d530:	7b69      	ldrb	r1, [r5, #13]
 800d532:	f895 b004 	ldrb.w	fp, [r5, #4]
 800d536:	0412      	lsls	r2, r2, #16
 800d538:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d53c:	0400      	lsls	r0, r0, #16
 800d53e:	78eb      	ldrb	r3, [r5, #3]
 800d540:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 800d544:	f895 e00c 	ldrb.w	lr, [r5, #12]
 800d548:	431a      	orrs	r2, r3
 800d54a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800d54e:	78ab      	ldrb	r3, [r5, #2]
 800d550:	0409      	lsls	r1, r1, #16
 800d552:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
 800d556:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 800d55a:	f895 b007 	ldrb.w	fp, [r5, #7]
 800d55e:	f895 e00b 	ldrb.w	lr, [r5, #11]
 800d562:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800d566:	6963      	ldr	r3, [r4, #20]
 800d568:	ea4c 0c0b 	orr.w	ip, ip, fp
 800d56c:	ea40 000e 	orr.w	r0, r0, lr
 800d570:	f895 b006 	ldrb.w	fp, [r5, #6]
 800d574:	f895 e00f 	ldrb.w	lr, [r5, #15]
 800d578:	4053      	eors	r3, r2
 800d57a:	69a2      	ldr	r2, [r4, #24]
 800d57c:	9306      	str	r3, [sp, #24]
 800d57e:	ea41 010e 	orr.w	r1, r1, lr
 800d582:	ea4c 2b0b 	orr.w	fp, ip, fp, lsl #8
 800d586:	f895 e00a 	ldrb.w	lr, [r5, #10]
 800d58a:	f895 c00e 	ldrb.w	ip, [r5, #14]
 800d58e:	ea8b 0302 	eor.w	r3, fp, r2
 800d592:	69e2      	ldr	r2, [r4, #28]
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 800d59a:	ea80 0302 	eor.w	r3, r0, r2
 800d59e:	6a20      	ldr	r0, [r4, #32]
 800d5a0:	9a03      	ldr	r2, [sp, #12]
 800d5a2:	9308      	str	r3, [sp, #32]
 800d5a4:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 800d5a8:	ea81 0c00 	eor.w	ip, r1, r0
 800d5ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d5ae:	9902      	ldr	r1, [sp, #8]
 800d5b0:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800d5b4:	4648      	mov	r0, r9
 800d5b6:	f7ff fb31 	bl	800cc1c <AES_general_SW_enc>
 800d5ba:	eb06 0308 	add.w	r3, r6, r8
 800d5be:	6962      	ldr	r2, [r4, #20]
 800d5c0:	70da      	strb	r2, [r3, #3]
 800d5c2:	6962      	ldr	r2, [r4, #20]
 800d5c4:	0a12      	lsrs	r2, r2, #8
 800d5c6:	709a      	strb	r2, [r3, #2]
 800d5c8:	8ae2      	ldrh	r2, [r4, #22]
 800d5ca:	705a      	strb	r2, [r3, #1]
 800d5cc:	7de2      	ldrb	r2, [r4, #23]
 800d5ce:	f806 2008 	strb.w	r2, [r6, r8]
 800d5d2:	69a2      	ldr	r2, [r4, #24]
 800d5d4:	71da      	strb	r2, [r3, #7]
 800d5d6:	69a2      	ldr	r2, [r4, #24]
 800d5d8:	0a12      	lsrs	r2, r2, #8
 800d5da:	719a      	strb	r2, [r3, #6]
 800d5dc:	8b62      	ldrh	r2, [r4, #26]
 800d5de:	715a      	strb	r2, [r3, #5]
 800d5e0:	7ee2      	ldrb	r2, [r4, #27]
 800d5e2:	711a      	strb	r2, [r3, #4]
 800d5e4:	69e2      	ldr	r2, [r4, #28]
 800d5e6:	72da      	strb	r2, [r3, #11]
 800d5e8:	69e2      	ldr	r2, [r4, #28]
 800d5ea:	0a12      	lsrs	r2, r2, #8
 800d5ec:	729a      	strb	r2, [r3, #10]
 800d5ee:	8be2      	ldrh	r2, [r4, #30]
 800d5f0:	725a      	strb	r2, [r3, #9]
 800d5f2:	7fe2      	ldrb	r2, [r4, #31]
 800d5f4:	721a      	strb	r2, [r3, #8]
 800d5f6:	6a22      	ldr	r2, [r4, #32]
 800d5f8:	73da      	strb	r2, [r3, #15]
 800d5fa:	6a22      	ldr	r2, [r4, #32]
 800d5fc:	0a12      	lsrs	r2, r2, #8
 800d5fe:	739a      	strb	r2, [r3, #14]
 800d600:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800d602:	735a      	strb	r2, [r3, #13]
 800d604:	f108 0810 	add.w	r8, r8, #16
 800d608:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800d60c:	731a      	strb	r2, [r3, #12]
 800d60e:	45d0      	cmp	r8, sl
 800d610:	f105 0510 	add.w	r5, r5, #16
 800d614:	db84      	blt.n	800d520 <AES_CBC_Encrypt_Append+0x70>
 800d616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d61a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800d61e:	f02a 0a0f 	bic.w	sl, sl, #15
 800d622:	f10a 0a10 	add.w	sl, sl, #16
 800d626:	45d1      	cmp	r9, sl
 800d628:	dc10      	bgt.n	800d64c <AES_CBC_Encrypt_Append+0x19c>
 800d62a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800d62c:	2000      	movs	r0, #0
 800d62e:	f8c1 9000 	str.w	r9, [r1]
 800d632:	e752      	b.n	800d4da <AES_CBC_Encrypt_Append+0x2a>
 800d634:	4692      	mov	sl, r2
 800d636:	e765      	b.n	800d504 <AES_CBC_Encrypt_Append+0x54>
 800d638:	f104 0214 	add.w	r2, r4, #20
 800d63c:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800d640:	f10d 0e18 	add.w	lr, sp, #24
 800d644:	9202      	str	r2, [sp, #8]
 800d646:	9303      	str	r3, [sp, #12]
 800d648:	f8cd e014 	str.w	lr, [sp, #20]
 800d64c:	ebca 0009 	rsb	r0, sl, r9
 800d650:	2800      	cmp	r0, #0
 800d652:	4683      	mov	fp, r0
 800d654:	bfb8      	it	lt
 800d656:	f100 0b03 	addlt.w	fp, r0, #3
 800d65a:	ea4f 0bab 	mov.w	fp, fp, asr #2
 800d65e:	f1bb 0f00 	cmp.w	fp, #0
 800d662:	9001      	str	r0, [sp, #4]
 800d664:	f340 810f 	ble.w	800d886 <AES_CBC_Encrypt_Append+0x3d6>
 800d668:	f10a 0201 	add.w	r2, sl, #1
 800d66c:	f10a 0102 	add.w	r1, sl, #2
 800d670:	f10a 0003 	add.w	r0, sl, #3
 800d674:	6963      	ldr	r3, [r4, #20]
 800d676:	f817 8002 	ldrb.w	r8, [r7, r2]
 800d67a:	f817 c001 	ldrb.w	ip, [r7, r1]
 800d67e:	5c3d      	ldrb	r5, [r7, r0]
 800d680:	f817 e00a 	ldrb.w	lr, [r7, sl]
 800d684:	5433      	strb	r3, [r6, r0]
 800d686:	6960      	ldr	r0, [r4, #20]
 800d688:	0a00      	lsrs	r0, r0, #8
 800d68a:	5470      	strb	r0, [r6, r1]
 800d68c:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 800d690:	8ae1      	ldrh	r1, [r4, #22]
 800d692:	54b1      	strb	r1, [r6, r2]
 800d694:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
 800d698:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800d69c:	ea88 0303 	eor.w	r3, r8, r3
 800d6a0:	7de2      	ldrb	r2, [r4, #23]
 800d6a2:	9306      	str	r3, [sp, #24]
 800d6a4:	f1bb 0f01 	cmp.w	fp, #1
 800d6a8:	f806 200a 	strb.w	r2, [r6, sl]
 800d6ac:	dd73      	ble.n	800d796 <AES_CBC_Encrypt_Append+0x2e6>
 800d6ae:	f10a 0105 	add.w	r1, sl, #5
 800d6b2:	f10a 0007 	add.w	r0, sl, #7
 800d6b6:	f10a 0304 	add.w	r3, sl, #4
 800d6ba:	f10a 0506 	add.w	r5, sl, #6
 800d6be:	f817 e001 	ldrb.w	lr, [r7, r1]
 800d6c2:	69a2      	ldr	r2, [r4, #24]
 800d6c4:	f817 c003 	ldrb.w	ip, [r7, r3]
 800d6c8:	f817 8005 	ldrb.w	r8, [r7, r5]
 800d6cc:	f8cd e010 	str.w	lr, [sp, #16]
 800d6d0:	f817 e000 	ldrb.w	lr, [r7, r0]
 800d6d4:	5432      	strb	r2, [r6, r0]
 800d6d6:	69a0      	ldr	r0, [r4, #24]
 800d6d8:	0a00      	lsrs	r0, r0, #8
 800d6da:	5570      	strb	r0, [r6, r5]
 800d6dc:	8b60      	ldrh	r0, [r4, #26]
 800d6de:	5470      	strb	r0, [r6, r1]
 800d6e0:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 800d6e4:	9804      	ldr	r0, [sp, #16]
 800d6e6:	ea4e 2108 	orr.w	r1, lr, r8, lsl #8
 800d6ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d6ee:	404a      	eors	r2, r1
 800d6f0:	f1bb 0f02 	cmp.w	fp, #2
 800d6f4:	7ee1      	ldrb	r1, [r4, #27]
 800d6f6:	9207      	str	r2, [sp, #28]
 800d6f8:	54f1      	strb	r1, [r6, r3]
 800d6fa:	dd4c      	ble.n	800d796 <AES_CBC_Encrypt_Append+0x2e6>
 800d6fc:	f10a 0109 	add.w	r1, sl, #9
 800d700:	f10a 000b 	add.w	r0, sl, #11
 800d704:	f10a 0308 	add.w	r3, sl, #8
 800d708:	f10a 050a 	add.w	r5, sl, #10
 800d70c:	f817 e001 	ldrb.w	lr, [r7, r1]
 800d710:	69e2      	ldr	r2, [r4, #28]
 800d712:	f817 c003 	ldrb.w	ip, [r7, r3]
 800d716:	f817 8005 	ldrb.w	r8, [r7, r5]
 800d71a:	f8cd e010 	str.w	lr, [sp, #16]
 800d71e:	f817 e000 	ldrb.w	lr, [r7, r0]
 800d722:	5432      	strb	r2, [r6, r0]
 800d724:	69e0      	ldr	r0, [r4, #28]
 800d726:	0a00      	lsrs	r0, r0, #8
 800d728:	5570      	strb	r0, [r6, r5]
 800d72a:	8be0      	ldrh	r0, [r4, #30]
 800d72c:	5470      	strb	r0, [r6, r1]
 800d72e:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 800d732:	9804      	ldr	r0, [sp, #16]
 800d734:	ea4e 2108 	orr.w	r1, lr, r8, lsl #8
 800d738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d73c:	404a      	eors	r2, r1
 800d73e:	f1bb 0f03 	cmp.w	fp, #3
 800d742:	7fe1      	ldrb	r1, [r4, #31]
 800d744:	9208      	str	r2, [sp, #32]
 800d746:	54f1      	strb	r1, [r6, r3]
 800d748:	dd25      	ble.n	800d796 <AES_CBC_Encrypt_Append+0x2e6>
 800d74a:	f10a 010d 	add.w	r1, sl, #13
 800d74e:	f10a 000f 	add.w	r0, sl, #15
 800d752:	f10a 020c 	add.w	r2, sl, #12
 800d756:	f10a 050e 	add.w	r5, sl, #14
 800d75a:	f817 e001 	ldrb.w	lr, [r7, r1]
 800d75e:	6a23      	ldr	r3, [r4, #32]
 800d760:	f817 8002 	ldrb.w	r8, [r7, r2]
 800d764:	f817 c005 	ldrb.w	ip, [r7, r5]
 800d768:	f8cd e010 	str.w	lr, [sp, #16]
 800d76c:	f817 e000 	ldrb.w	lr, [r7, r0]
 800d770:	5433      	strb	r3, [r6, r0]
 800d772:	6a20      	ldr	r0, [r4, #32]
 800d774:	0a00      	lsrs	r0, r0, #8
 800d776:	5570      	strb	r0, [r6, r5]
 800d778:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800d77a:	5470      	strb	r0, [r6, r1]
 800d77c:	9804      	ldr	r0, [sp, #16]
 800d77e:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 800d782:	54b1      	strb	r1, [r6, r2]
 800d784:	ea4e 6e08 	orr.w	lr, lr, r8, lsl #24
 800d788:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
 800d78c:	ea4e 2c0c 	orr.w	ip, lr, ip, lsl #8
 800d790:	ea8c 0303 	eor.w	r3, ip, r3
 800d794:	9309      	str	r3, [sp, #36]	@ 0x24
 800d796:	ebcb 7e8b 	rsb	lr, fp, fp, lsl #30
 800d79a:	f10b 0101 	add.w	r1, fp, #1
 800d79e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800d7a2:	9104      	str	r1, [sp, #16]
 800d7a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d7a8:	9801      	ldr	r0, [sp, #4]
 800d7aa:	eb04 080b 	add.w	r8, r4, fp
 800d7ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800d7b0:	445b      	add	r3, fp
 800d7b2:	4486      	add	lr, r0
 800d7b4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d7b8:	f843 1c10 	str.w	r1, [r3, #-16]
 800d7bc:	f1be 0f00 	cmp.w	lr, #0
 800d7c0:	dd19      	ble.n	800d7f6 <AES_CBC_Encrypt_Append+0x346>
 800d7c2:	eb0a 0c0b 	add.w	ip, sl, fp
 800d7c6:	4467      	add	r7, ip
 800d7c8:	2218      	movs	r2, #24
 800d7ca:	44b4      	add	ip, r6
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	e001      	b.n	800d7d6 <AES_CBC_Encrypt_Append+0x326>
 800d7d2:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800d7d6:	5cf8      	ldrb	r0, [r7, r3]
 800d7d8:	40d5      	lsrs	r5, r2
 800d7da:	f80c 5003 	strb.w	r5, [ip, r3]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	4090      	lsls	r0, r2
 800d7e2:	4573      	cmp	r3, lr
 800d7e4:	ea81 0100 	eor.w	r1, r1, r0
 800d7e8:	f1a2 0208 	sub.w	r2, r2, #8
 800d7ec:	d1f1      	bne.n	800d7d2 <AES_CBC_Encrypt_Append+0x322>
 800d7ee:	aa0a      	add	r2, sp, #40	@ 0x28
 800d7f0:	4493      	add	fp, r2
 800d7f2:	f84b 1c10 	str.w	r1, [fp, #-16]
 800d7f6:	9904      	ldr	r1, [sp, #16]
 800d7f8:	2903      	cmp	r1, #3
 800d7fa:	dc0a      	bgt.n	800d812 <AES_CBC_Encrypt_Append+0x362>
 800d7fc:	0088      	lsls	r0, r1, #2
 800d7fe:	f8dd e014 	ldr.w	lr, [sp, #20]
 800d802:	f100 0114 	add.w	r1, r0, #20
 800d806:	f1c0 0210 	rsb	r2, r0, #16
 800d80a:	4421      	add	r1, r4
 800d80c:	4470      	add	r0, lr
 800d80e:	f000 fd0b 	bl	800e228 <memcpy>
 800d812:	9902      	ldr	r1, [sp, #8]
 800d814:	9a03      	ldr	r2, [sp, #12]
 800d816:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d818:	9805      	ldr	r0, [sp, #20]
 800d81a:	f7ff f9ff 	bl	800cc1c <AES_general_SW_enc>
 800d81e:	f1aa 0210 	sub.w	r2, sl, #16
 800d822:	18b3      	adds	r3, r6, r2
 800d824:	6961      	ldr	r1, [r4, #20]
 800d826:	70d9      	strb	r1, [r3, #3]
 800d828:	6961      	ldr	r1, [r4, #20]
 800d82a:	0a09      	lsrs	r1, r1, #8
 800d82c:	7099      	strb	r1, [r3, #2]
 800d82e:	8ae1      	ldrh	r1, [r4, #22]
 800d830:	7059      	strb	r1, [r3, #1]
 800d832:	7de3      	ldrb	r3, [r4, #23]
 800d834:	54b3      	strb	r3, [r6, r2]
 800d836:	f1aa 020c 	sub.w	r2, sl, #12
 800d83a:	18b3      	adds	r3, r6, r2
 800d83c:	69a1      	ldr	r1, [r4, #24]
 800d83e:	70d9      	strb	r1, [r3, #3]
 800d840:	69a1      	ldr	r1, [r4, #24]
 800d842:	0a09      	lsrs	r1, r1, #8
 800d844:	7099      	strb	r1, [r3, #2]
 800d846:	8b61      	ldrh	r1, [r4, #26]
 800d848:	7059      	strb	r1, [r3, #1]
 800d84a:	7ee3      	ldrb	r3, [r4, #27]
 800d84c:	54b3      	strb	r3, [r6, r2]
 800d84e:	f1aa 0208 	sub.w	r2, sl, #8
 800d852:	18b3      	adds	r3, r6, r2
 800d854:	69e1      	ldr	r1, [r4, #28]
 800d856:	70d9      	strb	r1, [r3, #3]
 800d858:	69e1      	ldr	r1, [r4, #28]
 800d85a:	0a09      	lsrs	r1, r1, #8
 800d85c:	7099      	strb	r1, [r3, #2]
 800d85e:	8be1      	ldrh	r1, [r4, #30]
 800d860:	7059      	strb	r1, [r3, #1]
 800d862:	7fe3      	ldrb	r3, [r4, #31]
 800d864:	54b3      	strb	r3, [r6, r2]
 800d866:	f1aa 0a04 	sub.w	sl, sl, #4
 800d86a:	eb06 030a 	add.w	r3, r6, sl
 800d86e:	6a22      	ldr	r2, [r4, #32]
 800d870:	70da      	strb	r2, [r3, #3]
 800d872:	6a22      	ldr	r2, [r4, #32]
 800d874:	0a12      	lsrs	r2, r2, #8
 800d876:	709a      	strb	r2, [r3, #2]
 800d878:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800d87a:	705a      	strb	r2, [r3, #1]
 800d87c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800d880:	f806 300a 	strb.w	r3, [r6, sl]
 800d884:	e6d1      	b.n	800d62a <AES_CBC_Encrypt_Append+0x17a>
 800d886:	f04f 0e00 	mov.w	lr, #0
 800d88a:	2201      	movs	r2, #1
 800d88c:	46f3      	mov	fp, lr
 800d88e:	9204      	str	r2, [sp, #16]
 800d890:	e788      	b.n	800d7a4 <AES_CBC_Encrypt_Append+0x2f4>
 800d892:	bf00      	nop

0800d894 <AES_CBC_Encrypt_Finish>:
 800d894:	b140      	cbz	r0, 800d8a8 <AES_CBC_Encrypt_Finish+0x14>
 800d896:	b13a      	cbz	r2, 800d8a8 <AES_CBC_Encrypt_Finish+0x14>
 800d898:	7901      	ldrb	r1, [r0, #4]
 800d89a:	2300      	movs	r3, #0
 800d89c:	f041 0102 	orr.w	r1, r1, #2
 800d8a0:	7101      	strb	r1, [r0, #4]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	4770      	bx	lr
 800d8a8:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop

0800d8b0 <AES_CBC_Decrypt_Init>:
 800d8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	b170      	cbz	r0, 800d8d6 <AES_CBC_Decrypt_Init+0x26>
 800d8b8:	b169      	cbz	r1, 800d8d6 <AES_CBC_Decrypt_Init+0x26>
 800d8ba:	b162      	cbz	r2, 800d8d6 <AES_CBC_Decrypt_Init+0x26>
 800d8bc:	f8d0 c024 	ldr.w	ip, [r0, #36]	@ 0x24
 800d8c0:	f02c 0308 	bic.w	r3, ip, #8
 800d8c4:	2b10      	cmp	r3, #16
 800d8c6:	d00a      	beq.n	800d8de <AES_CBC_Decrypt_Init+0x2e>
 800d8c8:	f1bc 0f20 	cmp.w	ip, #32
 800d8cc:	d007      	beq.n	800d8de <AES_CBC_Decrypt_Init+0x2e>
 800d8ce:	f640 401f 	movw	r0, #3103	@ 0xc1f
 800d8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d6:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800d8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8de:	6920      	ldr	r0, [r4, #16]
 800d8e0:	1e43      	subs	r3, r0, #1
 800d8e2:	2b0f      	cmp	r3, #15
 800d8e4:	d8f3      	bhi.n	800d8ce <AES_CBC_Decrypt_Init+0x1e>
 800d8e6:	f894 8004 	ldrb.w	r8, [r4, #4]
 800d8ea:	60e2      	str	r2, [r4, #12]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f028 0506 	bic.w	r5, r8, #6
 800d8f2:	7125      	strb	r5, [r4, #4]
 800d8f4:	461e      	mov	r6, r3
 800d8f6:	6163      	str	r3, [r4, #20]
 800d8f8:	61a3      	str	r3, [r4, #24]
 800d8fa:	61e3      	str	r3, [r4, #28]
 800d8fc:	6223      	str	r3, [r4, #32]
 800d8fe:	461d      	mov	r5, r3
 800d900:	e002      	b.n	800d908 <AES_CBC_Decrypt_Init+0x58>
 800d902:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 800d906:	6976      	ldr	r6, [r6, #20]
 800d908:	f003 0703 	and.w	r7, r3, #3
 800d90c:	f812 9003 	ldrb.w	r9, [r2, r3]
 800d910:	f1c7 0703 	rsb	r7, r7, #3
 800d914:	00ff      	lsls	r7, r7, #3
 800d916:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d91a:	3301      	adds	r3, #1
 800d91c:	fa09 f707 	lsl.w	r7, r9, r7
 800d920:	433e      	orrs	r6, r7
 800d922:	4283      	cmp	r3, r0
 800d924:	616e      	str	r6, [r5, #20]
 800d926:	ea4f 05a3 	mov.w	r5, r3, asr #2
 800d92a:	d1ea      	bne.n	800d902 <AES_CBC_Decrypt_Init+0x52>
 800d92c:	f018 0801 	ands.w	r8, r8, #1
 800d930:	d109      	bne.n	800d946 <AES_CBC_Decrypt_Init+0x96>
 800d932:	60a1      	str	r1, [r4, #8]
 800d934:	4608      	mov	r0, r1
 800d936:	4662      	mov	r2, ip
 800d938:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800d93c:	f7ff faf6 	bl	800cf2c <AES_keyschedule_dec>
 800d940:	4640      	mov	r0, r8
 800d942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d946:	2000      	movs	r0, #0
 800d948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d94c <AES_CBC_Decrypt_Append>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	b09d      	sub	sp, #116	@ 0x74
 800d952:	4606      	mov	r6, r0
 800d954:	2000      	movs	r0, #0
 800d956:	460f      	mov	r7, r1
 800d958:	4692      	mov	sl, r2
 800d95a:	4698      	mov	r8, r3
 800d95c:	9018      	str	r0, [sp, #96]	@ 0x60
 800d95e:	9019      	str	r0, [sp, #100]	@ 0x64
 800d960:	901a      	str	r0, [sp, #104]	@ 0x68
 800d962:	901b      	str	r0, [sp, #108]	@ 0x6c
 800d964:	b156      	cbz	r6, 800d97c <AES_CBC_Decrypt_Append+0x30>
 800d966:	b149      	cbz	r1, 800d97c <AES_CBC_Decrypt_Append+0x30>
 800d968:	b143      	cbz	r3, 800d97c <AES_CBC_Decrypt_Append+0x30>
 800d96a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800d96c:	b130      	cbz	r0, 800d97c <AES_CBC_Decrypt_Append+0x30>
 800d96e:	2a0f      	cmp	r2, #15
 800d970:	dc09      	bgt.n	800d986 <AES_CBC_Decrypt_Append+0x3a>
 800d972:	f640 401d 	movw	r0, #3101	@ 0xc1d
 800d976:	b01d      	add	sp, #116	@ 0x74
 800d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97c:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800d980:	b01d      	add	sp, #116	@ 0x74
 800d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d986:	7933      	ldrb	r3, [r6, #4]
 800d988:	f013 0206 	ands.w	r2, r3, #6
 800d98c:	d002      	beq.n	800d994 <AES_CBC_Decrypt_Append+0x48>
 800d98e:	f640 401e 	movw	r0, #3102	@ 0xc1e
 800d992:	e7f5      	b.n	800d980 <AES_CBC_Decrypt_Append+0x34>
 800d994:	f01a 0f0f 	tst.w	sl, #15
 800d998:	f000 80ad 	beq.w	800daf6 <AES_CBC_Decrypt_Append+0x1aa>
 800d99c:	f1aa 0420 	sub.w	r4, sl, #32
 800d9a0:	f043 0304 	orr.w	r3, r3, #4
 800d9a4:	2c00      	cmp	r4, #0
 800d9a6:	9401      	str	r4, [sp, #4]
 800d9a8:	7133      	strb	r3, [r6, #4]
 800d9aa:	f340 80a7 	ble.w	800dafc <AES_CBC_Decrypt_Append+0x1b0>
 800d9ae:	f106 0428 	add.w	r4, r6, #40	@ 0x28
 800d9b2:	a918      	add	r1, sp, #96	@ 0x60
 800d9b4:	a814      	add	r0, sp, #80	@ 0x50
 800d9b6:	9403      	str	r4, [sp, #12]
 800d9b8:	f8cd a010 	str.w	sl, [sp, #16]
 800d9bc:	463d      	mov	r5, r7
 800d9be:	4644      	mov	r4, r8
 800d9c0:	f04f 0900 	mov.w	r9, #0
 800d9c4:	9002      	str	r0, [sp, #8]
 800d9c6:	9105      	str	r1, [sp, #20]
 800d9c8:	9700      	str	r7, [sp, #0]
 800d9ca:	468a      	mov	sl, r1
 800d9cc:	f895 b005 	ldrb.w	fp, [r5, #5]
 800d9d0:	9f00      	ldr	r7, [sp, #0]
 800d9d2:	f895 c004 	ldrb.w	ip, [r5, #4]
 800d9d6:	786b      	ldrb	r3, [r5, #1]
 800d9d8:	f895 e009 	ldrb.w	lr, [r5, #9]
 800d9dc:	f817 2009 	ldrb.w	r2, [r7, r9]
 800d9e0:	7a28      	ldrb	r0, [r5, #8]
 800d9e2:	7b69      	ldrb	r1, [r5, #13]
 800d9e4:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800d9e8:	ea4b 6b0c 	orr.w	fp, fp, ip, lsl #24
 800d9ec:	041b      	lsls	r3, r3, #16
 800d9ee:	f895 c007 	ldrb.w	ip, [r5, #7]
 800d9f2:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800d9f6:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 800d9fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9fe:	7b28      	ldrb	r0, [r5, #12]
 800da00:	78ea      	ldrb	r2, [r5, #3]
 800da02:	ea4b 0b0c 	orr.w	fp, fp, ip
 800da06:	0409      	lsls	r1, r1, #16
 800da08:	f895 c00f 	ldrb.w	ip, [r5, #15]
 800da0c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800da10:	4313      	orrs	r3, r2
 800da12:	7ae8      	ldrb	r0, [r5, #11]
 800da14:	78aa      	ldrb	r2, [r5, #2]
 800da16:	ea41 010c 	orr.w	r1, r1, ip
 800da1a:	f895 c006 	ldrb.w	ip, [r5, #6]
 800da1e:	ea4e 0000 	orr.w	r0, lr, r0
 800da22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da26:	f895 e00a 	ldrb.w	lr, [r5, #10]
 800da2a:	7baa      	ldrb	r2, [r5, #14]
 800da2c:	9314      	str	r3, [sp, #80]	@ 0x50
 800da2e:	ea4b 230c 	orr.w	r3, fp, ip, lsl #8
 800da32:	9315      	str	r3, [sp, #84]	@ 0x54
 800da34:	ea40 230e 	orr.w	r3, r0, lr, lsl #8
 800da38:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
 800da3c:	9802      	ldr	r0, [sp, #8]
 800da3e:	9a03      	ldr	r2, [sp, #12]
 800da40:	9316      	str	r3, [sp, #88]	@ 0x58
 800da42:	4651      	mov	r1, sl
 800da44:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800da46:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
 800da4a:	f7ff fb2f 	bl	800d0ac <AES_general_SW_dec>
 800da4e:	6971      	ldr	r1, [r6, #20]
 800da50:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800da52:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da54:	6172      	str	r2, [r6, #20]
 800da56:	4059      	eors	r1, r3
 800da58:	0a08      	lsrs	r0, r1, #8
 800da5a:	0c0a      	lsrs	r2, r1, #16
 800da5c:	0e0b      	lsrs	r3, r1, #24
 800da5e:	70a0      	strb	r0, [r4, #2]
 800da60:	70e1      	strb	r1, [r4, #3]
 800da62:	7062      	strb	r2, [r4, #1]
 800da64:	f808 3009 	strb.w	r3, [r8, r9]
 800da68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da6a:	69b2      	ldr	r2, [r6, #24]
 800da6c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800da6e:	61b0      	str	r0, [r6, #24]
 800da70:	405a      	eors	r2, r3
 800da72:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 800da76:	0c10      	lsrs	r0, r2, #16
 800da78:	0e13      	lsrs	r3, r2, #24
 800da7a:	f884 c006 	strb.w	ip, [r4, #6]
 800da7e:	71e2      	strb	r2, [r4, #7]
 800da80:	7123      	strb	r3, [r4, #4]
 800da82:	7160      	strb	r0, [r4, #5]
 800da84:	69f0      	ldr	r0, [r6, #28]
 800da86:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800da88:	9118      	str	r1, [sp, #96]	@ 0x60
 800da8a:	4043      	eors	r3, r0
 800da8c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800da8e:	61f1      	str	r1, [r6, #28]
 800da90:	0c18      	lsrs	r0, r3, #16
 800da92:	0e19      	lsrs	r1, r3, #24
 800da94:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800da98:	72e3      	strb	r3, [r4, #11]
 800da9a:	7221      	strb	r1, [r4, #8]
 800da9c:	f884 c00a 	strb.w	ip, [r4, #10]
 800daa0:	7260      	strb	r0, [r4, #9]
 800daa2:	6a30      	ldr	r0, [r6, #32]
 800daa4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800daa6:	9219      	str	r2, [sp, #100]	@ 0x64
 800daa8:	ea80 0201 	eor.w	r2, r0, r1
 800daac:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800daae:	6237      	str	r7, [r6, #32]
 800dab0:	0a11      	lsrs	r1, r2, #8
 800dab2:	931a      	str	r3, [sp, #104]	@ 0x68
 800dab4:	73e2      	strb	r2, [r4, #15]
 800dab6:	921b      	str	r2, [sp, #108]	@ 0x6c
 800dab8:	73a1      	strb	r1, [r4, #14]
 800daba:	9f01      	ldr	r7, [sp, #4]
 800dabc:	f109 0910 	add.w	r9, r9, #16
 800dac0:	0c10      	lsrs	r0, r2, #16
 800dac2:	0e13      	lsrs	r3, r2, #24
 800dac4:	45b9      	cmp	r9, r7
 800dac6:	7360      	strb	r0, [r4, #13]
 800dac8:	7323      	strb	r3, [r4, #12]
 800daca:	f105 0510 	add.w	r5, r5, #16
 800dace:	f104 0410 	add.w	r4, r4, #16
 800dad2:	f6ff af7b 	blt.w	800d9cc <AES_CBC_Decrypt_Append+0x80>
 800dad6:	463c      	mov	r4, r7
 800dad8:	1e63      	subs	r3, r4, #1
 800dada:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dade:	9f00      	ldr	r7, [sp, #0]
 800dae0:	f023 030f 	bic.w	r3, r3, #15
 800dae4:	f103 0b10 	add.w	fp, r3, #16
 800dae8:	45da      	cmp	sl, fp
 800daea:	dc0f      	bgt.n	800db0c <AES_CBC_Decrypt_Append+0x1c0>
 800daec:	9f26      	ldr	r7, [sp, #152]	@ 0x98
 800daee:	2000      	movs	r0, #0
 800daf0:	f8c7 a000 	str.w	sl, [r7]
 800daf4:	e744      	b.n	800d980 <AES_CBC_Decrypt_Append+0x34>
 800daf6:	f8cd a004 	str.w	sl, [sp, #4]
 800dafa:	e758      	b.n	800d9ae <AES_CBC_Decrypt_Append+0x62>
 800dafc:	f106 0428 	add.w	r4, r6, #40	@ 0x28
 800db00:	9403      	str	r4, [sp, #12]
 800db02:	ac14      	add	r4, sp, #80	@ 0x50
 800db04:	9402      	str	r4, [sp, #8]
 800db06:	ac18      	add	r4, sp, #96	@ 0x60
 800db08:	4693      	mov	fp, r2
 800db0a:	9405      	str	r4, [sp, #20]
 800db0c:	f10b 0403 	add.w	r4, fp, #3
 800db10:	9411      	str	r4, [sp, #68]	@ 0x44
 800db12:	f10b 0404 	add.w	r4, fp, #4
 800db16:	9410      	str	r4, [sp, #64]	@ 0x40
 800db18:	f10b 0407 	add.w	r4, fp, #7
 800db1c:	940d      	str	r4, [sp, #52]	@ 0x34
 800db1e:	f10b 0408 	add.w	r4, fp, #8
 800db22:	940c      	str	r4, [sp, #48]	@ 0x30
 800db24:	f10b 040b 	add.w	r4, fp, #11
 800db28:	9409      	str	r4, [sp, #36]	@ 0x24
 800db2a:	f10b 040c 	add.w	r4, fp, #12
 800db2e:	9404      	str	r4, [sp, #16]
 800db30:	f10b 040f 	add.w	r4, fp, #15
 800db34:	9408      	str	r4, [sp, #32]
 800db36:	f10b 0402 	add.w	r4, fp, #2
 800db3a:	9412      	str	r4, [sp, #72]	@ 0x48
 800db3c:	f10b 0406 	add.w	r4, fp, #6
 800db40:	940e      	str	r4, [sp, #56]	@ 0x38
 800db42:	f10b 040a 	add.w	r4, fp, #10
 800db46:	940a      	str	r4, [sp, #40]	@ 0x28
 800db48:	f10b 040d 	add.w	r4, fp, #13
 800db4c:	9406      	str	r4, [sp, #24]
 800db4e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800db50:	f817 000b 	ldrb.w	r0, [r7, fp]
 800db54:	f817 9004 	ldrb.w	r9, [r7, r4]
 800db58:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800db5a:	9000      	str	r0, [sp, #0]
 800db5c:	f817 c004 	ldrb.w	ip, [r7, r4]
 800db60:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800db62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db64:	f817 e004 	ldrb.w	lr, [r7, r4]
 800db68:	9904      	ldr	r1, [sp, #16]
 800db6a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800db6c:	9a08      	ldr	r2, [sp, #32]
 800db6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db70:	5d3d      	ldrb	r5, [r7, r4]
 800db72:	5c3c      	ldrb	r4, [r7, r0]
 800db74:	5c78      	ldrb	r0, [r7, r1]
 800db76:	5cb9      	ldrb	r1, [r7, r2]
 800db78:	5cfa      	ldrb	r2, [r7, r3]
 800db7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db7c:	5cfb      	ldrb	r3, [r7, r3]
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
 800db86:	f10b 0301 	add.w	r3, fp, #1
 800db8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db8c:	f10b 0305 	add.w	r3, fp, #5
 800db90:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db92:	f10b 030e 	add.w	r3, fp, #14
 800db96:	9307      	str	r3, [sp, #28]
 800db98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db9a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800db9e:	f10b 0009 	add.w	r0, fp, #9
 800dba2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dba4:	5cf8      	ldrb	r0, [r7, r3]
 800dba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800dbac:	5cfd      	ldrb	r5, [r7, r3]
 800dbae:	9b01      	ldr	r3, [sp, #4]
 800dbb0:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
 800dbb4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800dbb8:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800dbbc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800dbbe:	9c06      	ldr	r4, [sp, #24]
 800dbc0:	9214      	str	r2, [sp, #80]	@ 0x50
 800dbc2:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 800dbc6:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
 800dbca:	5d3b      	ldrb	r3, [r7, r4]
 800dbcc:	5c3c      	ldrb	r4, [r7, r0]
 800dbce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dbd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800dbd4:	5c3b      	ldrb	r3, [r7, r0]
 800dbd6:	9807      	ldr	r0, [sp, #28]
 800dbd8:	5c3a      	ldrb	r2, [r7, r0]
 800dbda:	9802      	ldr	r0, [sp, #8]
 800dbdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800dbe0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800dbe4:	9415      	str	r4, [sp, #84]	@ 0x54
 800dbe6:	9316      	str	r3, [sp, #88]	@ 0x58
 800dbe8:	ea41 2402 	orr.w	r4, r1, r2, lsl #8
 800dbec:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800dbee:	9905      	ldr	r1, [sp, #20]
 800dbf0:	9a03      	ldr	r2, [sp, #12]
 800dbf2:	9417      	str	r4, [sp, #92]	@ 0x5c
 800dbf4:	f7ff fa5a 	bl	800d0ac <AES_general_SW_dec>
 800dbf8:	f10b 0c10 	add.w	ip, fp, #16
 800dbfc:	ebcc 010a 	rsb	r1, ip, sl
 800dc00:	2900      	cmp	r1, #0
 800dc02:	4689      	mov	r9, r1
 800dc04:	bfb8      	it	lt
 800dc06:	f101 0903 	addlt.w	r9, r1, #3
 800dc0a:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800dc0e:	f1b9 0f00 	cmp.w	r9, #0
 800dc12:	9100      	str	r1, [sp, #0]
 800dc14:	f340 811c 	ble.w	800de50 <AES_CBC_Decrypt_Append+0x504>
 800dc18:	f10c 0003 	add.w	r0, ip, #3
 800dc1c:	f817 400c 	ldrb.w	r4, [r7, ip]
 800dc20:	5c3a      	ldrb	r2, [r7, r0]
 800dc22:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800dc24:	f10c 0102 	add.w	r1, ip, #2
 800dc28:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800dc2c:	5c7d      	ldrb	r5, [r7, r1]
 800dc2e:	f10c 0201 	add.w	r2, ip, #1
 800dc32:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800dc36:	5cbd      	ldrb	r5, [r7, r2]
 800dc38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800dc3c:	4063      	eors	r3, r4
 800dc3e:	f808 3000 	strb.w	r3, [r8, r0]
 800dc42:	0a1d      	lsrs	r5, r3, #8
 800dc44:	9414      	str	r4, [sp, #80]	@ 0x50
 800dc46:	0e18      	lsrs	r0, r3, #24
 800dc48:	0c1c      	lsrs	r4, r3, #16
 800dc4a:	f1b9 0f01 	cmp.w	r9, #1
 800dc4e:	f808 5001 	strb.w	r5, [r8, r1]
 800dc52:	9318      	str	r3, [sp, #96]	@ 0x60
 800dc54:	f808 4002 	strb.w	r4, [r8, r2]
 800dc58:	f808 000c 	strb.w	r0, [r8, ip]
 800dc5c:	dd6d      	ble.n	800dd3a <AES_CBC_Decrypt_Append+0x3ee>
 800dc5e:	f10b 0017 	add.w	r0, fp, #23
 800dc62:	f10b 0e14 	add.w	lr, fp, #20
 800dc66:	5c3a      	ldrb	r2, [r7, r0]
 800dc68:	f817 400e 	ldrb.w	r4, [r7, lr]
 800dc6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc6e:	f10b 0116 	add.w	r1, fp, #22
 800dc72:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800dc76:	5c7d      	ldrb	r5, [r7, r1]
 800dc78:	f10b 0215 	add.w	r2, fp, #21
 800dc7c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800dc80:	5cbd      	ldrb	r5, [r7, r2]
 800dc82:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800dc86:	4063      	eors	r3, r4
 800dc88:	f808 3000 	strb.w	r3, [r8, r0]
 800dc8c:	0a1d      	lsrs	r5, r3, #8
 800dc8e:	9415      	str	r4, [sp, #84]	@ 0x54
 800dc90:	0e18      	lsrs	r0, r3, #24
 800dc92:	0c1c      	lsrs	r4, r3, #16
 800dc94:	f1b9 0f02 	cmp.w	r9, #2
 800dc98:	f808 5001 	strb.w	r5, [r8, r1]
 800dc9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800dc9e:	f808 4002 	strb.w	r4, [r8, r2]
 800dca2:	f808 000e 	strb.w	r0, [r8, lr]
 800dca6:	dd48      	ble.n	800dd3a <AES_CBC_Decrypt_Append+0x3ee>
 800dca8:	f10b 001b 	add.w	r0, fp, #27
 800dcac:	f10b 0e18 	add.w	lr, fp, #24
 800dcb0:	5c3a      	ldrb	r2, [r7, r0]
 800dcb2:	f817 400e 	ldrb.w	r4, [r7, lr]
 800dcb6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dcb8:	f10b 011a 	add.w	r1, fp, #26
 800dcbc:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 800dcc0:	5c7d      	ldrb	r5, [r7, r1]
 800dcc2:	f10b 0219 	add.w	r2, fp, #25
 800dcc6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800dcca:	5cbd      	ldrb	r5, [r7, r2]
 800dccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800dcd0:	4063      	eors	r3, r4
 800dcd2:	f808 3000 	strb.w	r3, [r8, r0]
 800dcd6:	0a1d      	lsrs	r5, r3, #8
 800dcd8:	9416      	str	r4, [sp, #88]	@ 0x58
 800dcda:	0e18      	lsrs	r0, r3, #24
 800dcdc:	0c1c      	lsrs	r4, r3, #16
 800dcde:	f1b9 0f03 	cmp.w	r9, #3
 800dce2:	f808 5001 	strb.w	r5, [r8, r1]
 800dce6:	931a      	str	r3, [sp, #104]	@ 0x68
 800dce8:	f808 4002 	strb.w	r4, [r8, r2]
 800dcec:	f808 000e 	strb.w	r0, [r8, lr]
 800dcf0:	dd23      	ble.n	800dd3a <AES_CBC_Decrypt_Append+0x3ee>
 800dcf2:	f10b 051f 	add.w	r5, fp, #31
 800dcf6:	f10b 011c 	add.w	r1, fp, #28
 800dcfa:	5d7a      	ldrb	r2, [r7, r5]
 800dcfc:	5c7c      	ldrb	r4, [r7, r1]
 800dcfe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dd00:	f10b 001d 	add.w	r0, fp, #29
 800dd04:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800dd08:	f817 e000 	ldrb.w	lr, [r7, r0]
 800dd0c:	f10b 041e 	add.w	r4, fp, #30
 800dd10:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800dd14:	f817 e004 	ldrb.w	lr, [r7, r4]
 800dd18:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 800dd1c:	4053      	eors	r3, r2
 800dd1e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 800dd22:	f808 3005 	strb.w	r3, [r8, r5]
 800dd26:	f808 e004 	strb.w	lr, [r8, r4]
 800dd2a:	0c1d      	lsrs	r5, r3, #16
 800dd2c:	0e1c      	lsrs	r4, r3, #24
 800dd2e:	f808 5000 	strb.w	r5, [r8, r0]
 800dd32:	f808 4001 	strb.w	r4, [r8, r1]
 800dd36:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dd38:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dd3a:	ebc9 7e89 	rsb	lr, r9, r9, lsl #30
 800dd3e:	f109 0201 	add.w	r2, r9, #1
 800dd42:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800dd46:	9201      	str	r2, [sp, #4]
 800dd48:	9c00      	ldr	r4, [sp, #0]
 800dd4a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800dd4e:	ab1c      	add	r3, sp, #112	@ 0x70
 800dd50:	2000      	movs	r0, #0
 800dd52:	444b      	add	r3, r9
 800dd54:	44a6      	add	lr, r4
 800dd56:	4586      	cmp	lr, r0
 800dd58:	f843 0c20 	str.w	r0, [r3, #-32]
 800dd5c:	dd7e      	ble.n	800de5c <AES_CBC_Decrypt_Append+0x510>
 800dd5e:	44cc      	add	ip, r9
 800dd60:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800dd64:	4467      	add	r7, ip
 800dd66:	4603      	mov	r3, r0
 800dd68:	44c4      	add	ip, r8
 800dd6a:	2218      	movs	r2, #24
 800dd6c:	5cf9      	ldrb	r1, [r7, r3]
 800dd6e:	fa25 f402 	lsr.w	r4, r5, r2
 800dd72:	404c      	eors	r4, r1
 800dd74:	f80c 4003 	strb.w	r4, [ip, r3]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	4091      	lsls	r1, r2
 800dd7c:	4573      	cmp	r3, lr
 800dd7e:	ea80 0001 	eor.w	r0, r0, r1
 800dd82:	f1a2 0208 	sub.w	r2, r2, #8
 800dd86:	d1f1      	bne.n	800dd6c <AES_CBC_Decrypt_Append+0x420>
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd92:	af1c      	add	r7, sp, #112	@ 0x70
 800dd94:	402b      	ands	r3, r5
 800dd96:	44b9      	add	r9, r7
 800dd98:	4058      	eors	r0, r3
 800dd9a:	f849 0c20 	str.w	r0, [r9, #-32]
 800dd9e:	9801      	ldr	r0, [sp, #4]
 800dda0:	2803      	cmp	r0, #3
 800dda2:	dc08      	bgt.n	800ddb6 <AES_CBC_Decrypt_Append+0x46a>
 800dda4:	0081      	lsls	r1, r0, #2
 800dda6:	9c05      	ldr	r4, [sp, #20]
 800dda8:	9802      	ldr	r0, [sp, #8]
 800ddaa:	f1c1 0210 	rsb	r2, r1, #16
 800ddae:	4408      	add	r0, r1
 800ddb0:	4421      	add	r1, r4
 800ddb2:	f000 fa39 	bl	800e228 <memcpy>
 800ddb6:	9802      	ldr	r0, [sp, #8]
 800ddb8:	9905      	ldr	r1, [sp, #20]
 800ddba:	9a03      	ldr	r2, [sp, #12]
 800ddbc:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800ddbe:	f7ff f975 	bl	800d0ac <AES_general_SW_dec>
 800ddc2:	6972      	ldr	r2, [r6, #20]
 800ddc4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800ddc6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ddc8:	404a      	eors	r2, r1
 800ddca:	f808 2007 	strb.w	r2, [r8, r7]
 800ddce:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800ddd0:	0a10      	lsrs	r0, r2, #8
 800ddd2:	f808 0007 	strb.w	r0, [r8, r7]
 800ddd6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ddd8:	0c11      	lsrs	r1, r2, #16
 800ddda:	ab19      	add	r3, sp, #100	@ 0x64
 800dddc:	0e12      	lsrs	r2, r2, #24
 800ddde:	f808 1007 	strb.w	r1, [r8, r7]
 800dde2:	cb38      	ldmia	r3, {r3, r4, r5}
 800dde4:	f808 200b 	strb.w	r2, [r8, fp]
 800dde8:	69b2      	ldr	r2, [r6, #24]
 800ddea:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800ddec:	4053      	eors	r3, r2
 800ddee:	f808 3007 	strb.w	r3, [r8, r7]
 800ddf2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800ddf4:	0a18      	lsrs	r0, r3, #8
 800ddf6:	f808 0007 	strb.w	r0, [r8, r7]
 800ddfa:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800ddfc:	0c19      	lsrs	r1, r3, #16
 800ddfe:	f808 1007 	strb.w	r1, [r8, r7]
 800de02:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800de04:	0e1a      	lsrs	r2, r3, #24
 800de06:	f808 2007 	strb.w	r2, [r8, r7]
 800de0a:	69f3      	ldr	r3, [r6, #28]
 800de0c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800de0e:	405c      	eors	r4, r3
 800de10:	f808 4007 	strb.w	r4, [r8, r7]
 800de14:	0a21      	lsrs	r1, r4, #8
 800de16:	0c22      	lsrs	r2, r4, #16
 800de18:	0e23      	lsrs	r3, r4, #24
 800de1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de1e:	f808 1004 	strb.w	r1, [r8, r4]
 800de22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800de24:	f808 2007 	strb.w	r2, [r8, r7]
 800de28:	f808 3004 	strb.w	r3, [r8, r4]
 800de2c:	6a33      	ldr	r3, [r6, #32]
 800de2e:	9f08      	ldr	r7, [sp, #32]
 800de30:	9c07      	ldr	r4, [sp, #28]
 800de32:	405d      	eors	r5, r3
 800de34:	0a29      	lsrs	r1, r5, #8
 800de36:	f808 5007 	strb.w	r5, [r8, r7]
 800de3a:	f808 1004 	strb.w	r1, [r8, r4]
 800de3e:	9f06      	ldr	r7, [sp, #24]
 800de40:	9c04      	ldr	r4, [sp, #16]
 800de42:	0c2a      	lsrs	r2, r5, #16
 800de44:	0e2b      	lsrs	r3, r5, #24
 800de46:	f808 2007 	strb.w	r2, [r8, r7]
 800de4a:	f808 3004 	strb.w	r3, [r8, r4]
 800de4e:	e64d      	b.n	800daec <AES_CBC_Decrypt_Append+0x1a0>
 800de50:	f04f 0e00 	mov.w	lr, #0
 800de54:	2301      	movs	r3, #1
 800de56:	46f1      	mov	r9, lr
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	e775      	b.n	800dd48 <AES_CBC_Decrypt_Append+0x3fc>
 800de5c:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800de60:	f04f 33ff 	mov.w	r3, #4294967295
 800de64:	e795      	b.n	800dd92 <AES_CBC_Decrypt_Append+0x446>
 800de66:	bf00      	nop

0800de68 <AES_CBC_Decrypt_Finish>:
 800de68:	b140      	cbz	r0, 800de7c <AES_CBC_Decrypt_Finish+0x14>
 800de6a:	b13a      	cbz	r2, 800de7c <AES_CBC_Decrypt_Finish+0x14>
 800de6c:	7901      	ldrb	r1, [r0, #4]
 800de6e:	2300      	movs	r3, #0
 800de70:	f041 0102 	orr.w	r1, r1, #2
 800de74:	7101      	strb	r1, [r0, #4]
 800de76:	4618      	mov	r0, r3
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	4770      	bx	lr
 800de7c:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop

0800de84 <malloc>:
 800de84:	4b02      	ldr	r3, [pc, #8]	@ (800de90 <malloc+0xc>)
 800de86:	4601      	mov	r1, r0
 800de88:	6818      	ldr	r0, [r3, #0]
 800de8a:	f000 b82d 	b.w	800dee8 <_malloc_r>
 800de8e:	bf00      	nop
 800de90:	20000038 	.word	0x20000038

0800de94 <free>:
 800de94:	4b02      	ldr	r3, [pc, #8]	@ (800dea0 <free+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 b9d3 	b.w	800e244 <_free_r>
 800de9e:	bf00      	nop
 800dea0:	20000038 	.word	0x20000038

0800dea4 <sbrk_aligned>:
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	4e0f      	ldr	r6, [pc, #60]	@ (800dee4 <sbrk_aligned+0x40>)
 800dea8:	460c      	mov	r4, r1
 800deaa:	6831      	ldr	r1, [r6, #0]
 800deac:	4605      	mov	r5, r0
 800deae:	b911      	cbnz	r1, 800deb6 <sbrk_aligned+0x12>
 800deb0:	f000 f97e 	bl	800e1b0 <_sbrk_r>
 800deb4:	6030      	str	r0, [r6, #0]
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	f000 f979 	bl	800e1b0 <_sbrk_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	d103      	bne.n	800deca <sbrk_aligned+0x26>
 800dec2:	f04f 34ff 	mov.w	r4, #4294967295
 800dec6:	4620      	mov	r0, r4
 800dec8:	bd70      	pop	{r4, r5, r6, pc}
 800deca:	1cc4      	adds	r4, r0, #3
 800decc:	f024 0403 	bic.w	r4, r4, #3
 800ded0:	42a0      	cmp	r0, r4
 800ded2:	d0f8      	beq.n	800dec6 <sbrk_aligned+0x22>
 800ded4:	1a21      	subs	r1, r4, r0
 800ded6:	4628      	mov	r0, r5
 800ded8:	f000 f96a 	bl	800e1b0 <_sbrk_r>
 800dedc:	3001      	adds	r0, #1
 800dede:	d1f2      	bne.n	800dec6 <sbrk_aligned+0x22>
 800dee0:	e7ef      	b.n	800dec2 <sbrk_aligned+0x1e>
 800dee2:	bf00      	nop
 800dee4:	2000542c 	.word	0x2000542c

0800dee8 <_malloc_r>:
 800dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deec:	1ccd      	adds	r5, r1, #3
 800deee:	f025 0503 	bic.w	r5, r5, #3
 800def2:	3508      	adds	r5, #8
 800def4:	2d0c      	cmp	r5, #12
 800def6:	bf38      	it	cc
 800def8:	250c      	movcc	r5, #12
 800defa:	2d00      	cmp	r5, #0
 800defc:	4606      	mov	r6, r0
 800defe:	db01      	blt.n	800df04 <_malloc_r+0x1c>
 800df00:	42a9      	cmp	r1, r5
 800df02:	d904      	bls.n	800df0e <_malloc_r+0x26>
 800df04:	230c      	movs	r3, #12
 800df06:	6033      	str	r3, [r6, #0]
 800df08:	2000      	movs	r0, #0
 800df0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfe4 <_malloc_r+0xfc>
 800df12:	f000 f869 	bl	800dfe8 <__malloc_lock>
 800df16:	f8d8 3000 	ldr.w	r3, [r8]
 800df1a:	461c      	mov	r4, r3
 800df1c:	bb44      	cbnz	r4, 800df70 <_malloc_r+0x88>
 800df1e:	4629      	mov	r1, r5
 800df20:	4630      	mov	r0, r6
 800df22:	f7ff ffbf 	bl	800dea4 <sbrk_aligned>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	4604      	mov	r4, r0
 800df2a:	d158      	bne.n	800dfde <_malloc_r+0xf6>
 800df2c:	f8d8 4000 	ldr.w	r4, [r8]
 800df30:	4627      	mov	r7, r4
 800df32:	2f00      	cmp	r7, #0
 800df34:	d143      	bne.n	800dfbe <_malloc_r+0xd6>
 800df36:	2c00      	cmp	r4, #0
 800df38:	d04b      	beq.n	800dfd2 <_malloc_r+0xea>
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	4639      	mov	r1, r7
 800df3e:	4630      	mov	r0, r6
 800df40:	eb04 0903 	add.w	r9, r4, r3
 800df44:	f000 f934 	bl	800e1b0 <_sbrk_r>
 800df48:	4581      	cmp	r9, r0
 800df4a:	d142      	bne.n	800dfd2 <_malloc_r+0xea>
 800df4c:	6821      	ldr	r1, [r4, #0]
 800df4e:	1a6d      	subs	r5, r5, r1
 800df50:	4629      	mov	r1, r5
 800df52:	4630      	mov	r0, r6
 800df54:	f7ff ffa6 	bl	800dea4 <sbrk_aligned>
 800df58:	3001      	adds	r0, #1
 800df5a:	d03a      	beq.n	800dfd2 <_malloc_r+0xea>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	442b      	add	r3, r5
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	f8d8 3000 	ldr.w	r3, [r8]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	bb62      	cbnz	r2, 800dfc4 <_malloc_r+0xdc>
 800df6a:	f8c8 7000 	str.w	r7, [r8]
 800df6e:	e00f      	b.n	800df90 <_malloc_r+0xa8>
 800df70:	6822      	ldr	r2, [r4, #0]
 800df72:	1b52      	subs	r2, r2, r5
 800df74:	d420      	bmi.n	800dfb8 <_malloc_r+0xd0>
 800df76:	2a0b      	cmp	r2, #11
 800df78:	d917      	bls.n	800dfaa <_malloc_r+0xc2>
 800df7a:	1961      	adds	r1, r4, r5
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	6025      	str	r5, [r4, #0]
 800df80:	bf18      	it	ne
 800df82:	6059      	strne	r1, [r3, #4]
 800df84:	6863      	ldr	r3, [r4, #4]
 800df86:	bf08      	it	eq
 800df88:	f8c8 1000 	streq.w	r1, [r8]
 800df8c:	5162      	str	r2, [r4, r5]
 800df8e:	604b      	str	r3, [r1, #4]
 800df90:	4630      	mov	r0, r6
 800df92:	f000 f82f 	bl	800dff4 <__malloc_unlock>
 800df96:	f104 000b 	add.w	r0, r4, #11
 800df9a:	1d23      	adds	r3, r4, #4
 800df9c:	f020 0007 	bic.w	r0, r0, #7
 800dfa0:	1ac2      	subs	r2, r0, r3
 800dfa2:	bf1c      	itt	ne
 800dfa4:	1a1b      	subne	r3, r3, r0
 800dfa6:	50a3      	strne	r3, [r4, r2]
 800dfa8:	e7af      	b.n	800df0a <_malloc_r+0x22>
 800dfaa:	6862      	ldr	r2, [r4, #4]
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	bf0c      	ite	eq
 800dfb0:	f8c8 2000 	streq.w	r2, [r8]
 800dfb4:	605a      	strne	r2, [r3, #4]
 800dfb6:	e7eb      	b.n	800df90 <_malloc_r+0xa8>
 800dfb8:	4623      	mov	r3, r4
 800dfba:	6864      	ldr	r4, [r4, #4]
 800dfbc:	e7ae      	b.n	800df1c <_malloc_r+0x34>
 800dfbe:	463c      	mov	r4, r7
 800dfc0:	687f      	ldr	r7, [r7, #4]
 800dfc2:	e7b6      	b.n	800df32 <_malloc_r+0x4a>
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	42a3      	cmp	r3, r4
 800dfca:	d1fb      	bne.n	800dfc4 <_malloc_r+0xdc>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	6053      	str	r3, [r2, #4]
 800dfd0:	e7de      	b.n	800df90 <_malloc_r+0xa8>
 800dfd2:	230c      	movs	r3, #12
 800dfd4:	6033      	str	r3, [r6, #0]
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f000 f80c 	bl	800dff4 <__malloc_unlock>
 800dfdc:	e794      	b.n	800df08 <_malloc_r+0x20>
 800dfde:	6005      	str	r5, [r0, #0]
 800dfe0:	e7d6      	b.n	800df90 <_malloc_r+0xa8>
 800dfe2:	bf00      	nop
 800dfe4:	20005430 	.word	0x20005430

0800dfe8 <__malloc_lock>:
 800dfe8:	4801      	ldr	r0, [pc, #4]	@ (800dff0 <__malloc_lock+0x8>)
 800dfea:	f000 b91b 	b.w	800e224 <__retarget_lock_acquire_recursive>
 800dfee:	bf00      	nop
 800dff0:	20005570 	.word	0x20005570

0800dff4 <__malloc_unlock>:
 800dff4:	4801      	ldr	r0, [pc, #4]	@ (800dffc <__malloc_unlock+0x8>)
 800dff6:	f000 b916 	b.w	800e226 <__retarget_lock_release_recursive>
 800dffa:	bf00      	nop
 800dffc:	20005570 	.word	0x20005570

0800e000 <sniprintf>:
 800e000:	b40c      	push	{r2, r3}
 800e002:	b530      	push	{r4, r5, lr}
 800e004:	4b18      	ldr	r3, [pc, #96]	@ (800e068 <sniprintf+0x68>)
 800e006:	1e0c      	subs	r4, r1, #0
 800e008:	681d      	ldr	r5, [r3, #0]
 800e00a:	b09d      	sub	sp, #116	@ 0x74
 800e00c:	da08      	bge.n	800e020 <sniprintf+0x20>
 800e00e:	238b      	movs	r3, #139	@ 0x8b
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	f04f 30ff 	mov.w	r0, #4294967295
 800e016:	b01d      	add	sp, #116	@ 0x74
 800e018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e01c:	b002      	add	sp, #8
 800e01e:	4770      	bx	lr
 800e020:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e024:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e028:	f04f 0300 	mov.w	r3, #0
 800e02c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e02e:	bf14      	ite	ne
 800e030:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e034:	4623      	moveq	r3, r4
 800e036:	9304      	str	r3, [sp, #16]
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e03e:	9002      	str	r0, [sp, #8]
 800e040:	9006      	str	r0, [sp, #24]
 800e042:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e046:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e048:	ab21      	add	r3, sp, #132	@ 0x84
 800e04a:	a902      	add	r1, sp, #8
 800e04c:	4628      	mov	r0, r5
 800e04e:	9301      	str	r3, [sp, #4]
 800e050:	f000 f99e 	bl	800e390 <_svfiprintf_r>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	bfbc      	itt	lt
 800e058:	238b      	movlt	r3, #139	@ 0x8b
 800e05a:	602b      	strlt	r3, [r5, #0]
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	d0da      	beq.n	800e016 <sniprintf+0x16>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	701a      	strb	r2, [r3, #0]
 800e066:	e7d6      	b.n	800e016 <sniprintf+0x16>
 800e068:	20000038 	.word	0x20000038

0800e06c <siprintf>:
 800e06c:	b40e      	push	{r1, r2, r3}
 800e06e:	b510      	push	{r4, lr}
 800e070:	b09d      	sub	sp, #116	@ 0x74
 800e072:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e074:	9002      	str	r0, [sp, #8]
 800e076:	9006      	str	r0, [sp, #24]
 800e078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e07c:	480a      	ldr	r0, [pc, #40]	@ (800e0a8 <siprintf+0x3c>)
 800e07e:	9107      	str	r1, [sp, #28]
 800e080:	9104      	str	r1, [sp, #16]
 800e082:	490a      	ldr	r1, [pc, #40]	@ (800e0ac <siprintf+0x40>)
 800e084:	f853 2b04 	ldr.w	r2, [r3], #4
 800e088:	9105      	str	r1, [sp, #20]
 800e08a:	2400      	movs	r4, #0
 800e08c:	a902      	add	r1, sp, #8
 800e08e:	6800      	ldr	r0, [r0, #0]
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e094:	f000 f97c 	bl	800e390 <_svfiprintf_r>
 800e098:	9b02      	ldr	r3, [sp, #8]
 800e09a:	701c      	strb	r4, [r3, #0]
 800e09c:	b01d      	add	sp, #116	@ 0x74
 800e09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a2:	b003      	add	sp, #12
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	20000038 	.word	0x20000038
 800e0ac:	ffff0208 	.word	0xffff0208

0800e0b0 <memmove>:
 800e0b0:	4288      	cmp	r0, r1
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	eb01 0402 	add.w	r4, r1, r2
 800e0b8:	d902      	bls.n	800e0c0 <memmove+0x10>
 800e0ba:	4284      	cmp	r4, r0
 800e0bc:	4623      	mov	r3, r4
 800e0be:	d807      	bhi.n	800e0d0 <memmove+0x20>
 800e0c0:	1e43      	subs	r3, r0, #1
 800e0c2:	42a1      	cmp	r1, r4
 800e0c4:	d008      	beq.n	800e0d8 <memmove+0x28>
 800e0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ce:	e7f8      	b.n	800e0c2 <memmove+0x12>
 800e0d0:	4402      	add	r2, r0
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	428a      	cmp	r2, r1
 800e0d6:	d100      	bne.n	800e0da <memmove+0x2a>
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0e2:	e7f7      	b.n	800e0d4 <memmove+0x24>

0800e0e4 <memset>:
 800e0e4:	4402      	add	r2, r0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d100      	bne.n	800e0ee <memset+0xa>
 800e0ec:	4770      	bx	lr
 800e0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f2:	e7f9      	b.n	800e0e8 <memset+0x4>

0800e0f4 <_reclaim_reent>:
 800e0f4:	4b2d      	ldr	r3, [pc, #180]	@ (800e1ac <_reclaim_reent+0xb8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4283      	cmp	r3, r0
 800e0fa:	b570      	push	{r4, r5, r6, lr}
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	d053      	beq.n	800e1a8 <_reclaim_reent+0xb4>
 800e100:	69c3      	ldr	r3, [r0, #28]
 800e102:	b31b      	cbz	r3, 800e14c <_reclaim_reent+0x58>
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	b163      	cbz	r3, 800e122 <_reclaim_reent+0x2e>
 800e108:	2500      	movs	r5, #0
 800e10a:	69e3      	ldr	r3, [r4, #28]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	5959      	ldr	r1, [r3, r5]
 800e110:	b9b1      	cbnz	r1, 800e140 <_reclaim_reent+0x4c>
 800e112:	3504      	adds	r5, #4
 800e114:	2d80      	cmp	r5, #128	@ 0x80
 800e116:	d1f8      	bne.n	800e10a <_reclaim_reent+0x16>
 800e118:	69e3      	ldr	r3, [r4, #28]
 800e11a:	4620      	mov	r0, r4
 800e11c:	68d9      	ldr	r1, [r3, #12]
 800e11e:	f000 f891 	bl	800e244 <_free_r>
 800e122:	69e3      	ldr	r3, [r4, #28]
 800e124:	6819      	ldr	r1, [r3, #0]
 800e126:	b111      	cbz	r1, 800e12e <_reclaim_reent+0x3a>
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 f88b 	bl	800e244 <_free_r>
 800e12e:	69e3      	ldr	r3, [r4, #28]
 800e130:	689d      	ldr	r5, [r3, #8]
 800e132:	b15d      	cbz	r5, 800e14c <_reclaim_reent+0x58>
 800e134:	4629      	mov	r1, r5
 800e136:	4620      	mov	r0, r4
 800e138:	682d      	ldr	r5, [r5, #0]
 800e13a:	f000 f883 	bl	800e244 <_free_r>
 800e13e:	e7f8      	b.n	800e132 <_reclaim_reent+0x3e>
 800e140:	680e      	ldr	r6, [r1, #0]
 800e142:	4620      	mov	r0, r4
 800e144:	f000 f87e 	bl	800e244 <_free_r>
 800e148:	4631      	mov	r1, r6
 800e14a:	e7e1      	b.n	800e110 <_reclaim_reent+0x1c>
 800e14c:	6961      	ldr	r1, [r4, #20]
 800e14e:	b111      	cbz	r1, 800e156 <_reclaim_reent+0x62>
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f877 	bl	800e244 <_free_r>
 800e156:	69e1      	ldr	r1, [r4, #28]
 800e158:	b111      	cbz	r1, 800e160 <_reclaim_reent+0x6c>
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 f872 	bl	800e244 <_free_r>
 800e160:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e162:	b111      	cbz	r1, 800e16a <_reclaim_reent+0x76>
 800e164:	4620      	mov	r0, r4
 800e166:	f000 f86d 	bl	800e244 <_free_r>
 800e16a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e16c:	b111      	cbz	r1, 800e174 <_reclaim_reent+0x80>
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 f868 	bl	800e244 <_free_r>
 800e174:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e176:	b111      	cbz	r1, 800e17e <_reclaim_reent+0x8a>
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f863 	bl	800e244 <_free_r>
 800e17e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e180:	b111      	cbz	r1, 800e188 <_reclaim_reent+0x94>
 800e182:	4620      	mov	r0, r4
 800e184:	f000 f85e 	bl	800e244 <_free_r>
 800e188:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e18a:	b111      	cbz	r1, 800e192 <_reclaim_reent+0x9e>
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 f859 	bl	800e244 <_free_r>
 800e192:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e194:	b111      	cbz	r1, 800e19c <_reclaim_reent+0xa8>
 800e196:	4620      	mov	r0, r4
 800e198:	f000 f854 	bl	800e244 <_free_r>
 800e19c:	6a23      	ldr	r3, [r4, #32]
 800e19e:	b11b      	cbz	r3, 800e1a8 <_reclaim_reent+0xb4>
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1a6:	4718      	bx	r3
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	bf00      	nop
 800e1ac:	20000038 	.word	0x20000038

0800e1b0 <_sbrk_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d06      	ldr	r5, [pc, #24]	@ (800e1cc <_sbrk_r+0x1c>)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	f7f3 f9a4 	bl	8001508 <_sbrk>
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	d102      	bne.n	800e1ca <_sbrk_r+0x1a>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	b103      	cbz	r3, 800e1ca <_sbrk_r+0x1a>
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	2000556c 	.word	0x2000556c

0800e1d0 <__errno>:
 800e1d0:	4b01      	ldr	r3, [pc, #4]	@ (800e1d8 <__errno+0x8>)
 800e1d2:	6818      	ldr	r0, [r3, #0]
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	20000038 	.word	0x20000038

0800e1dc <__libc_init_array>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	4d0d      	ldr	r5, [pc, #52]	@ (800e214 <__libc_init_array+0x38>)
 800e1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800e218 <__libc_init_array+0x3c>)
 800e1e2:	1b64      	subs	r4, r4, r5
 800e1e4:	10a4      	asrs	r4, r4, #2
 800e1e6:	2600      	movs	r6, #0
 800e1e8:	42a6      	cmp	r6, r4
 800e1ea:	d109      	bne.n	800e200 <__libc_init_array+0x24>
 800e1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800e21c <__libc_init_array+0x40>)
 800e1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800e220 <__libc_init_array+0x44>)
 800e1f0:	f000 fb8c 	bl	800e90c <_init>
 800e1f4:	1b64      	subs	r4, r4, r5
 800e1f6:	10a4      	asrs	r4, r4, #2
 800e1f8:	2600      	movs	r6, #0
 800e1fa:	42a6      	cmp	r6, r4
 800e1fc:	d105      	bne.n	800e20a <__libc_init_array+0x2e>
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}
 800e200:	f855 3b04 	ldr.w	r3, [r5], #4
 800e204:	4798      	blx	r3
 800e206:	3601      	adds	r6, #1
 800e208:	e7ee      	b.n	800e1e8 <__libc_init_array+0xc>
 800e20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e20e:	4798      	blx	r3
 800e210:	3601      	adds	r6, #1
 800e212:	e7f2      	b.n	800e1fa <__libc_init_array+0x1e>
 800e214:	0800fa70 	.word	0x0800fa70
 800e218:	0800fa70 	.word	0x0800fa70
 800e21c:	0800fa70 	.word	0x0800fa70
 800e220:	0800fa74 	.word	0x0800fa74

0800e224 <__retarget_lock_acquire_recursive>:
 800e224:	4770      	bx	lr

0800e226 <__retarget_lock_release_recursive>:
 800e226:	4770      	bx	lr

0800e228 <memcpy>:
 800e228:	440a      	add	r2, r1
 800e22a:	4291      	cmp	r1, r2
 800e22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e230:	d100      	bne.n	800e234 <memcpy+0xc>
 800e232:	4770      	bx	lr
 800e234:	b510      	push	{r4, lr}
 800e236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e23e:	4291      	cmp	r1, r2
 800e240:	d1f9      	bne.n	800e236 <memcpy+0xe>
 800e242:	bd10      	pop	{r4, pc}

0800e244 <_free_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4605      	mov	r5, r0
 800e248:	2900      	cmp	r1, #0
 800e24a:	d041      	beq.n	800e2d0 <_free_r+0x8c>
 800e24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e250:	1f0c      	subs	r4, r1, #4
 800e252:	2b00      	cmp	r3, #0
 800e254:	bfb8      	it	lt
 800e256:	18e4      	addlt	r4, r4, r3
 800e258:	f7ff fec6 	bl	800dfe8 <__malloc_lock>
 800e25c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2d4 <_free_r+0x90>)
 800e25e:	6813      	ldr	r3, [r2, #0]
 800e260:	b933      	cbnz	r3, 800e270 <_free_r+0x2c>
 800e262:	6063      	str	r3, [r4, #4]
 800e264:	6014      	str	r4, [r2, #0]
 800e266:	4628      	mov	r0, r5
 800e268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e26c:	f7ff bec2 	b.w	800dff4 <__malloc_unlock>
 800e270:	42a3      	cmp	r3, r4
 800e272:	d908      	bls.n	800e286 <_free_r+0x42>
 800e274:	6820      	ldr	r0, [r4, #0]
 800e276:	1821      	adds	r1, r4, r0
 800e278:	428b      	cmp	r3, r1
 800e27a:	bf01      	itttt	eq
 800e27c:	6819      	ldreq	r1, [r3, #0]
 800e27e:	685b      	ldreq	r3, [r3, #4]
 800e280:	1809      	addeq	r1, r1, r0
 800e282:	6021      	streq	r1, [r4, #0]
 800e284:	e7ed      	b.n	800e262 <_free_r+0x1e>
 800e286:	461a      	mov	r2, r3
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	b10b      	cbz	r3, 800e290 <_free_r+0x4c>
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d9fa      	bls.n	800e286 <_free_r+0x42>
 800e290:	6811      	ldr	r1, [r2, #0]
 800e292:	1850      	adds	r0, r2, r1
 800e294:	42a0      	cmp	r0, r4
 800e296:	d10b      	bne.n	800e2b0 <_free_r+0x6c>
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	4401      	add	r1, r0
 800e29c:	1850      	adds	r0, r2, r1
 800e29e:	4283      	cmp	r3, r0
 800e2a0:	6011      	str	r1, [r2, #0]
 800e2a2:	d1e0      	bne.n	800e266 <_free_r+0x22>
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	6053      	str	r3, [r2, #4]
 800e2aa:	4408      	add	r0, r1
 800e2ac:	6010      	str	r0, [r2, #0]
 800e2ae:	e7da      	b.n	800e266 <_free_r+0x22>
 800e2b0:	d902      	bls.n	800e2b8 <_free_r+0x74>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	e7d6      	b.n	800e266 <_free_r+0x22>
 800e2b8:	6820      	ldr	r0, [r4, #0]
 800e2ba:	1821      	adds	r1, r4, r0
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf04      	itt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	bf04      	itt	eq
 800e2c8:	1809      	addeq	r1, r1, r0
 800e2ca:	6021      	streq	r1, [r4, #0]
 800e2cc:	6054      	str	r4, [r2, #4]
 800e2ce:	e7ca      	b.n	800e266 <_free_r+0x22>
 800e2d0:	bd38      	pop	{r3, r4, r5, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20005430 	.word	0x20005430

0800e2d8 <__ssputs_r>:
 800e2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2dc:	688e      	ldr	r6, [r1, #8]
 800e2de:	461f      	mov	r7, r3
 800e2e0:	42be      	cmp	r6, r7
 800e2e2:	680b      	ldr	r3, [r1, #0]
 800e2e4:	4682      	mov	sl, r0
 800e2e6:	460c      	mov	r4, r1
 800e2e8:	4690      	mov	r8, r2
 800e2ea:	d82d      	bhi.n	800e348 <__ssputs_r+0x70>
 800e2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2f4:	d026      	beq.n	800e344 <__ssputs_r+0x6c>
 800e2f6:	6965      	ldr	r5, [r4, #20]
 800e2f8:	6909      	ldr	r1, [r1, #16]
 800e2fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2fe:	eba3 0901 	sub.w	r9, r3, r1
 800e302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e306:	1c7b      	adds	r3, r7, #1
 800e308:	444b      	add	r3, r9
 800e30a:	106d      	asrs	r5, r5, #1
 800e30c:	429d      	cmp	r5, r3
 800e30e:	bf38      	it	cc
 800e310:	461d      	movcc	r5, r3
 800e312:	0553      	lsls	r3, r2, #21
 800e314:	d527      	bpl.n	800e366 <__ssputs_r+0x8e>
 800e316:	4629      	mov	r1, r5
 800e318:	f7ff fde6 	bl	800dee8 <_malloc_r>
 800e31c:	4606      	mov	r6, r0
 800e31e:	b360      	cbz	r0, 800e37a <__ssputs_r+0xa2>
 800e320:	6921      	ldr	r1, [r4, #16]
 800e322:	464a      	mov	r2, r9
 800e324:	f7ff ff80 	bl	800e228 <memcpy>
 800e328:	89a3      	ldrh	r3, [r4, #12]
 800e32a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e332:	81a3      	strh	r3, [r4, #12]
 800e334:	6126      	str	r6, [r4, #16]
 800e336:	6165      	str	r5, [r4, #20]
 800e338:	444e      	add	r6, r9
 800e33a:	eba5 0509 	sub.w	r5, r5, r9
 800e33e:	6026      	str	r6, [r4, #0]
 800e340:	60a5      	str	r5, [r4, #8]
 800e342:	463e      	mov	r6, r7
 800e344:	42be      	cmp	r6, r7
 800e346:	d900      	bls.n	800e34a <__ssputs_r+0x72>
 800e348:	463e      	mov	r6, r7
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	4632      	mov	r2, r6
 800e34e:	4641      	mov	r1, r8
 800e350:	f7ff feae 	bl	800e0b0 <memmove>
 800e354:	68a3      	ldr	r3, [r4, #8]
 800e356:	1b9b      	subs	r3, r3, r6
 800e358:	60a3      	str	r3, [r4, #8]
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	4433      	add	r3, r6
 800e35e:	6023      	str	r3, [r4, #0]
 800e360:	2000      	movs	r0, #0
 800e362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e366:	462a      	mov	r2, r5
 800e368:	f000 fa9a 	bl	800e8a0 <_realloc_r>
 800e36c:	4606      	mov	r6, r0
 800e36e:	2800      	cmp	r0, #0
 800e370:	d1e0      	bne.n	800e334 <__ssputs_r+0x5c>
 800e372:	6921      	ldr	r1, [r4, #16]
 800e374:	4650      	mov	r0, sl
 800e376:	f7ff ff65 	bl	800e244 <_free_r>
 800e37a:	230c      	movs	r3, #12
 800e37c:	f8ca 3000 	str.w	r3, [sl]
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	e7e9      	b.n	800e362 <__ssputs_r+0x8a>
	...

0800e390 <_svfiprintf_r>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	4698      	mov	r8, r3
 800e396:	898b      	ldrh	r3, [r1, #12]
 800e398:	061b      	lsls	r3, r3, #24
 800e39a:	b09d      	sub	sp, #116	@ 0x74
 800e39c:	4607      	mov	r7, r0
 800e39e:	460d      	mov	r5, r1
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	d510      	bpl.n	800e3c6 <_svfiprintf_r+0x36>
 800e3a4:	690b      	ldr	r3, [r1, #16]
 800e3a6:	b973      	cbnz	r3, 800e3c6 <_svfiprintf_r+0x36>
 800e3a8:	2140      	movs	r1, #64	@ 0x40
 800e3aa:	f7ff fd9d 	bl	800dee8 <_malloc_r>
 800e3ae:	6028      	str	r0, [r5, #0]
 800e3b0:	6128      	str	r0, [r5, #16]
 800e3b2:	b930      	cbnz	r0, 800e3c2 <_svfiprintf_r+0x32>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3bc:	b01d      	add	sp, #116	@ 0x74
 800e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c2:	2340      	movs	r3, #64	@ 0x40
 800e3c4:	616b      	str	r3, [r5, #20]
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3ca:	2320      	movs	r3, #32
 800e3cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d4:	2330      	movs	r3, #48	@ 0x30
 800e3d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e574 <_svfiprintf_r+0x1e4>
 800e3da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3de:	f04f 0901 	mov.w	r9, #1
 800e3e2:	4623      	mov	r3, r4
 800e3e4:	469a      	mov	sl, r3
 800e3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ea:	b10a      	cbz	r2, 800e3f0 <_svfiprintf_r+0x60>
 800e3ec:	2a25      	cmp	r2, #37	@ 0x25
 800e3ee:	d1f9      	bne.n	800e3e4 <_svfiprintf_r+0x54>
 800e3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f4:	d00b      	beq.n	800e40e <_svfiprintf_r+0x7e>
 800e3f6:	465b      	mov	r3, fp
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	f7ff ff6b 	bl	800e2d8 <__ssputs_r>
 800e402:	3001      	adds	r0, #1
 800e404:	f000 80a7 	beq.w	800e556 <_svfiprintf_r+0x1c6>
 800e408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e40a:	445a      	add	r2, fp
 800e40c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e40e:	f89a 3000 	ldrb.w	r3, [sl]
 800e412:	2b00      	cmp	r3, #0
 800e414:	f000 809f 	beq.w	800e556 <_svfiprintf_r+0x1c6>
 800e418:	2300      	movs	r3, #0
 800e41a:	f04f 32ff 	mov.w	r2, #4294967295
 800e41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e422:	f10a 0a01 	add.w	sl, sl, #1
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	9307      	str	r3, [sp, #28]
 800e42a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e42e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e430:	4654      	mov	r4, sl
 800e432:	2205      	movs	r2, #5
 800e434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e438:	484e      	ldr	r0, [pc, #312]	@ (800e574 <_svfiprintf_r+0x1e4>)
 800e43a:	f7f1 fed1 	bl	80001e0 <memchr>
 800e43e:	9a04      	ldr	r2, [sp, #16]
 800e440:	b9d8      	cbnz	r0, 800e47a <_svfiprintf_r+0xea>
 800e442:	06d0      	lsls	r0, r2, #27
 800e444:	bf44      	itt	mi
 800e446:	2320      	movmi	r3, #32
 800e448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e44c:	0711      	lsls	r1, r2, #28
 800e44e:	bf44      	itt	mi
 800e450:	232b      	movmi	r3, #43	@ 0x2b
 800e452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e456:	f89a 3000 	ldrb.w	r3, [sl]
 800e45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e45c:	d015      	beq.n	800e48a <_svfiprintf_r+0xfa>
 800e45e:	9a07      	ldr	r2, [sp, #28]
 800e460:	4654      	mov	r4, sl
 800e462:	2000      	movs	r0, #0
 800e464:	f04f 0c0a 	mov.w	ip, #10
 800e468:	4621      	mov	r1, r4
 800e46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e46e:	3b30      	subs	r3, #48	@ 0x30
 800e470:	2b09      	cmp	r3, #9
 800e472:	d94b      	bls.n	800e50c <_svfiprintf_r+0x17c>
 800e474:	b1b0      	cbz	r0, 800e4a4 <_svfiprintf_r+0x114>
 800e476:	9207      	str	r2, [sp, #28]
 800e478:	e014      	b.n	800e4a4 <_svfiprintf_r+0x114>
 800e47a:	eba0 0308 	sub.w	r3, r0, r8
 800e47e:	fa09 f303 	lsl.w	r3, r9, r3
 800e482:	4313      	orrs	r3, r2
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	46a2      	mov	sl, r4
 800e488:	e7d2      	b.n	800e430 <_svfiprintf_r+0xa0>
 800e48a:	9b03      	ldr	r3, [sp, #12]
 800e48c:	1d19      	adds	r1, r3, #4
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	9103      	str	r1, [sp, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	bfbb      	ittet	lt
 800e496:	425b      	neglt	r3, r3
 800e498:	f042 0202 	orrlt.w	r2, r2, #2
 800e49c:	9307      	strge	r3, [sp, #28]
 800e49e:	9307      	strlt	r3, [sp, #28]
 800e4a0:	bfb8      	it	lt
 800e4a2:	9204      	strlt	r2, [sp, #16]
 800e4a4:	7823      	ldrb	r3, [r4, #0]
 800e4a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4a8:	d10a      	bne.n	800e4c0 <_svfiprintf_r+0x130>
 800e4aa:	7863      	ldrb	r3, [r4, #1]
 800e4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ae:	d132      	bne.n	800e516 <_svfiprintf_r+0x186>
 800e4b0:	9b03      	ldr	r3, [sp, #12]
 800e4b2:	1d1a      	adds	r2, r3, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	9203      	str	r2, [sp, #12]
 800e4b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4bc:	3402      	adds	r4, #2
 800e4be:	9305      	str	r3, [sp, #20]
 800e4c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e584 <_svfiprintf_r+0x1f4>
 800e4c4:	7821      	ldrb	r1, [r4, #0]
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	4650      	mov	r0, sl
 800e4ca:	f7f1 fe89 	bl	80001e0 <memchr>
 800e4ce:	b138      	cbz	r0, 800e4e0 <_svfiprintf_r+0x150>
 800e4d0:	9b04      	ldr	r3, [sp, #16]
 800e4d2:	eba0 000a 	sub.w	r0, r0, sl
 800e4d6:	2240      	movs	r2, #64	@ 0x40
 800e4d8:	4082      	lsls	r2, r0
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	3401      	adds	r4, #1
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e4:	4824      	ldr	r0, [pc, #144]	@ (800e578 <_svfiprintf_r+0x1e8>)
 800e4e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ea:	2206      	movs	r2, #6
 800e4ec:	f7f1 fe78 	bl	80001e0 <memchr>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d036      	beq.n	800e562 <_svfiprintf_r+0x1d2>
 800e4f4:	4b21      	ldr	r3, [pc, #132]	@ (800e57c <_svfiprintf_r+0x1ec>)
 800e4f6:	bb1b      	cbnz	r3, 800e540 <_svfiprintf_r+0x1b0>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	3307      	adds	r3, #7
 800e4fc:	f023 0307 	bic.w	r3, r3, #7
 800e500:	3308      	adds	r3, #8
 800e502:	9303      	str	r3, [sp, #12]
 800e504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e506:	4433      	add	r3, r6
 800e508:	9309      	str	r3, [sp, #36]	@ 0x24
 800e50a:	e76a      	b.n	800e3e2 <_svfiprintf_r+0x52>
 800e50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e510:	460c      	mov	r4, r1
 800e512:	2001      	movs	r0, #1
 800e514:	e7a8      	b.n	800e468 <_svfiprintf_r+0xd8>
 800e516:	2300      	movs	r3, #0
 800e518:	3401      	adds	r4, #1
 800e51a:	9305      	str	r3, [sp, #20]
 800e51c:	4619      	mov	r1, r3
 800e51e:	f04f 0c0a 	mov.w	ip, #10
 800e522:	4620      	mov	r0, r4
 800e524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e528:	3a30      	subs	r2, #48	@ 0x30
 800e52a:	2a09      	cmp	r2, #9
 800e52c:	d903      	bls.n	800e536 <_svfiprintf_r+0x1a6>
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d0c6      	beq.n	800e4c0 <_svfiprintf_r+0x130>
 800e532:	9105      	str	r1, [sp, #20]
 800e534:	e7c4      	b.n	800e4c0 <_svfiprintf_r+0x130>
 800e536:	fb0c 2101 	mla	r1, ip, r1, r2
 800e53a:	4604      	mov	r4, r0
 800e53c:	2301      	movs	r3, #1
 800e53e:	e7f0      	b.n	800e522 <_svfiprintf_r+0x192>
 800e540:	ab03      	add	r3, sp, #12
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	462a      	mov	r2, r5
 800e546:	4b0e      	ldr	r3, [pc, #56]	@ (800e580 <_svfiprintf_r+0x1f0>)
 800e548:	a904      	add	r1, sp, #16
 800e54a:	4638      	mov	r0, r7
 800e54c:	f3af 8000 	nop.w
 800e550:	1c42      	adds	r2, r0, #1
 800e552:	4606      	mov	r6, r0
 800e554:	d1d6      	bne.n	800e504 <_svfiprintf_r+0x174>
 800e556:	89ab      	ldrh	r3, [r5, #12]
 800e558:	065b      	lsls	r3, r3, #25
 800e55a:	f53f af2d 	bmi.w	800e3b8 <_svfiprintf_r+0x28>
 800e55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e560:	e72c      	b.n	800e3bc <_svfiprintf_r+0x2c>
 800e562:	ab03      	add	r3, sp, #12
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	462a      	mov	r2, r5
 800e568:	4b05      	ldr	r3, [pc, #20]	@ (800e580 <_svfiprintf_r+0x1f0>)
 800e56a:	a904      	add	r1, sp, #16
 800e56c:	4638      	mov	r0, r7
 800e56e:	f000 f879 	bl	800e664 <_printf_i>
 800e572:	e7ed      	b.n	800e550 <_svfiprintf_r+0x1c0>
 800e574:	0800fa34 	.word	0x0800fa34
 800e578:	0800fa3e 	.word	0x0800fa3e
 800e57c:	00000000 	.word	0x00000000
 800e580:	0800e2d9 	.word	0x0800e2d9
 800e584:	0800fa3a 	.word	0x0800fa3a

0800e588 <_printf_common>:
 800e588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e58c:	4616      	mov	r6, r2
 800e58e:	4698      	mov	r8, r3
 800e590:	688a      	ldr	r2, [r1, #8]
 800e592:	690b      	ldr	r3, [r1, #16]
 800e594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e598:	4293      	cmp	r3, r2
 800e59a:	bfb8      	it	lt
 800e59c:	4613      	movlt	r3, r2
 800e59e:	6033      	str	r3, [r6, #0]
 800e5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5a4:	4607      	mov	r7, r0
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	b10a      	cbz	r2, 800e5ae <_printf_common+0x26>
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	6033      	str	r3, [r6, #0]
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	0699      	lsls	r1, r3, #26
 800e5b2:	bf42      	ittt	mi
 800e5b4:	6833      	ldrmi	r3, [r6, #0]
 800e5b6:	3302      	addmi	r3, #2
 800e5b8:	6033      	strmi	r3, [r6, #0]
 800e5ba:	6825      	ldr	r5, [r4, #0]
 800e5bc:	f015 0506 	ands.w	r5, r5, #6
 800e5c0:	d106      	bne.n	800e5d0 <_printf_common+0x48>
 800e5c2:	f104 0a19 	add.w	sl, r4, #25
 800e5c6:	68e3      	ldr	r3, [r4, #12]
 800e5c8:	6832      	ldr	r2, [r6, #0]
 800e5ca:	1a9b      	subs	r3, r3, r2
 800e5cc:	42ab      	cmp	r3, r5
 800e5ce:	dc26      	bgt.n	800e61e <_printf_common+0x96>
 800e5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5d4:	6822      	ldr	r2, [r4, #0]
 800e5d6:	3b00      	subs	r3, #0
 800e5d8:	bf18      	it	ne
 800e5da:	2301      	movne	r3, #1
 800e5dc:	0692      	lsls	r2, r2, #26
 800e5de:	d42b      	bmi.n	800e638 <_printf_common+0xb0>
 800e5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5e4:	4641      	mov	r1, r8
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	47c8      	blx	r9
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	d01e      	beq.n	800e62c <_printf_common+0xa4>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	6922      	ldr	r2, [r4, #16]
 800e5f2:	f003 0306 	and.w	r3, r3, #6
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	bf02      	ittt	eq
 800e5fa:	68e5      	ldreq	r5, [r4, #12]
 800e5fc:	6833      	ldreq	r3, [r6, #0]
 800e5fe:	1aed      	subeq	r5, r5, r3
 800e600:	68a3      	ldr	r3, [r4, #8]
 800e602:	bf0c      	ite	eq
 800e604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e608:	2500      	movne	r5, #0
 800e60a:	4293      	cmp	r3, r2
 800e60c:	bfc4      	itt	gt
 800e60e:	1a9b      	subgt	r3, r3, r2
 800e610:	18ed      	addgt	r5, r5, r3
 800e612:	2600      	movs	r6, #0
 800e614:	341a      	adds	r4, #26
 800e616:	42b5      	cmp	r5, r6
 800e618:	d11a      	bne.n	800e650 <_printf_common+0xc8>
 800e61a:	2000      	movs	r0, #0
 800e61c:	e008      	b.n	800e630 <_printf_common+0xa8>
 800e61e:	2301      	movs	r3, #1
 800e620:	4652      	mov	r2, sl
 800e622:	4641      	mov	r1, r8
 800e624:	4638      	mov	r0, r7
 800e626:	47c8      	blx	r9
 800e628:	3001      	adds	r0, #1
 800e62a:	d103      	bne.n	800e634 <_printf_common+0xac>
 800e62c:	f04f 30ff 	mov.w	r0, #4294967295
 800e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e634:	3501      	adds	r5, #1
 800e636:	e7c6      	b.n	800e5c6 <_printf_common+0x3e>
 800e638:	18e1      	adds	r1, r4, r3
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	2030      	movs	r0, #48	@ 0x30
 800e63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e642:	4422      	add	r2, r4
 800e644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e64c:	3302      	adds	r3, #2
 800e64e:	e7c7      	b.n	800e5e0 <_printf_common+0x58>
 800e650:	2301      	movs	r3, #1
 800e652:	4622      	mov	r2, r4
 800e654:	4641      	mov	r1, r8
 800e656:	4638      	mov	r0, r7
 800e658:	47c8      	blx	r9
 800e65a:	3001      	adds	r0, #1
 800e65c:	d0e6      	beq.n	800e62c <_printf_common+0xa4>
 800e65e:	3601      	adds	r6, #1
 800e660:	e7d9      	b.n	800e616 <_printf_common+0x8e>
	...

0800e664 <_printf_i>:
 800e664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e668:	7e0f      	ldrb	r7, [r1, #24]
 800e66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e66c:	2f78      	cmp	r7, #120	@ 0x78
 800e66e:	4691      	mov	r9, r2
 800e670:	4680      	mov	r8, r0
 800e672:	460c      	mov	r4, r1
 800e674:	469a      	mov	sl, r3
 800e676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e67a:	d807      	bhi.n	800e68c <_printf_i+0x28>
 800e67c:	2f62      	cmp	r7, #98	@ 0x62
 800e67e:	d80a      	bhi.n	800e696 <_printf_i+0x32>
 800e680:	2f00      	cmp	r7, #0
 800e682:	f000 80d1 	beq.w	800e828 <_printf_i+0x1c4>
 800e686:	2f58      	cmp	r7, #88	@ 0x58
 800e688:	f000 80b8 	beq.w	800e7fc <_printf_i+0x198>
 800e68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e694:	e03a      	b.n	800e70c <_printf_i+0xa8>
 800e696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e69a:	2b15      	cmp	r3, #21
 800e69c:	d8f6      	bhi.n	800e68c <_printf_i+0x28>
 800e69e:	a101      	add	r1, pc, #4	@ (adr r1, 800e6a4 <_printf_i+0x40>)
 800e6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6a4:	0800e6fd 	.word	0x0800e6fd
 800e6a8:	0800e711 	.word	0x0800e711
 800e6ac:	0800e68d 	.word	0x0800e68d
 800e6b0:	0800e68d 	.word	0x0800e68d
 800e6b4:	0800e68d 	.word	0x0800e68d
 800e6b8:	0800e68d 	.word	0x0800e68d
 800e6bc:	0800e711 	.word	0x0800e711
 800e6c0:	0800e68d 	.word	0x0800e68d
 800e6c4:	0800e68d 	.word	0x0800e68d
 800e6c8:	0800e68d 	.word	0x0800e68d
 800e6cc:	0800e68d 	.word	0x0800e68d
 800e6d0:	0800e80f 	.word	0x0800e80f
 800e6d4:	0800e73b 	.word	0x0800e73b
 800e6d8:	0800e7c9 	.word	0x0800e7c9
 800e6dc:	0800e68d 	.word	0x0800e68d
 800e6e0:	0800e68d 	.word	0x0800e68d
 800e6e4:	0800e831 	.word	0x0800e831
 800e6e8:	0800e68d 	.word	0x0800e68d
 800e6ec:	0800e73b 	.word	0x0800e73b
 800e6f0:	0800e68d 	.word	0x0800e68d
 800e6f4:	0800e68d 	.word	0x0800e68d
 800e6f8:	0800e7d1 	.word	0x0800e7d1
 800e6fc:	6833      	ldr	r3, [r6, #0]
 800e6fe:	1d1a      	adds	r2, r3, #4
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6032      	str	r2, [r6, #0]
 800e704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e70c:	2301      	movs	r3, #1
 800e70e:	e09c      	b.n	800e84a <_printf_i+0x1e6>
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	6820      	ldr	r0, [r4, #0]
 800e714:	1d19      	adds	r1, r3, #4
 800e716:	6031      	str	r1, [r6, #0]
 800e718:	0606      	lsls	r6, r0, #24
 800e71a:	d501      	bpl.n	800e720 <_printf_i+0xbc>
 800e71c:	681d      	ldr	r5, [r3, #0]
 800e71e:	e003      	b.n	800e728 <_printf_i+0xc4>
 800e720:	0645      	lsls	r5, r0, #25
 800e722:	d5fb      	bpl.n	800e71c <_printf_i+0xb8>
 800e724:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e728:	2d00      	cmp	r5, #0
 800e72a:	da03      	bge.n	800e734 <_printf_i+0xd0>
 800e72c:	232d      	movs	r3, #45	@ 0x2d
 800e72e:	426d      	negs	r5, r5
 800e730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e734:	4858      	ldr	r0, [pc, #352]	@ (800e898 <_printf_i+0x234>)
 800e736:	230a      	movs	r3, #10
 800e738:	e011      	b.n	800e75e <_printf_i+0xfa>
 800e73a:	6821      	ldr	r1, [r4, #0]
 800e73c:	6833      	ldr	r3, [r6, #0]
 800e73e:	0608      	lsls	r0, r1, #24
 800e740:	f853 5b04 	ldr.w	r5, [r3], #4
 800e744:	d402      	bmi.n	800e74c <_printf_i+0xe8>
 800e746:	0649      	lsls	r1, r1, #25
 800e748:	bf48      	it	mi
 800e74a:	b2ad      	uxthmi	r5, r5
 800e74c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e74e:	4852      	ldr	r0, [pc, #328]	@ (800e898 <_printf_i+0x234>)
 800e750:	6033      	str	r3, [r6, #0]
 800e752:	bf14      	ite	ne
 800e754:	230a      	movne	r3, #10
 800e756:	2308      	moveq	r3, #8
 800e758:	2100      	movs	r1, #0
 800e75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e75e:	6866      	ldr	r6, [r4, #4]
 800e760:	60a6      	str	r6, [r4, #8]
 800e762:	2e00      	cmp	r6, #0
 800e764:	db05      	blt.n	800e772 <_printf_i+0x10e>
 800e766:	6821      	ldr	r1, [r4, #0]
 800e768:	432e      	orrs	r6, r5
 800e76a:	f021 0104 	bic.w	r1, r1, #4
 800e76e:	6021      	str	r1, [r4, #0]
 800e770:	d04b      	beq.n	800e80a <_printf_i+0x1a6>
 800e772:	4616      	mov	r6, r2
 800e774:	fbb5 f1f3 	udiv	r1, r5, r3
 800e778:	fb03 5711 	mls	r7, r3, r1, r5
 800e77c:	5dc7      	ldrb	r7, [r0, r7]
 800e77e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e782:	462f      	mov	r7, r5
 800e784:	42bb      	cmp	r3, r7
 800e786:	460d      	mov	r5, r1
 800e788:	d9f4      	bls.n	800e774 <_printf_i+0x110>
 800e78a:	2b08      	cmp	r3, #8
 800e78c:	d10b      	bne.n	800e7a6 <_printf_i+0x142>
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	07df      	lsls	r7, r3, #31
 800e792:	d508      	bpl.n	800e7a6 <_printf_i+0x142>
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	6861      	ldr	r1, [r4, #4]
 800e798:	4299      	cmp	r1, r3
 800e79a:	bfde      	ittt	le
 800e79c:	2330      	movle	r3, #48	@ 0x30
 800e79e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7a6:	1b92      	subs	r2, r2, r6
 800e7a8:	6122      	str	r2, [r4, #16]
 800e7aa:	f8cd a000 	str.w	sl, [sp]
 800e7ae:	464b      	mov	r3, r9
 800e7b0:	aa03      	add	r2, sp, #12
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	f7ff fee7 	bl	800e588 <_printf_common>
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d14a      	bne.n	800e854 <_printf_i+0x1f0>
 800e7be:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c2:	b004      	add	sp, #16
 800e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	f043 0320 	orr.w	r3, r3, #32
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	4832      	ldr	r0, [pc, #200]	@ (800e89c <_printf_i+0x238>)
 800e7d2:	2778      	movs	r7, #120	@ 0x78
 800e7d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	6831      	ldr	r1, [r6, #0]
 800e7dc:	061f      	lsls	r7, r3, #24
 800e7de:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7e2:	d402      	bmi.n	800e7ea <_printf_i+0x186>
 800e7e4:	065f      	lsls	r7, r3, #25
 800e7e6:	bf48      	it	mi
 800e7e8:	b2ad      	uxthmi	r5, r5
 800e7ea:	6031      	str	r1, [r6, #0]
 800e7ec:	07d9      	lsls	r1, r3, #31
 800e7ee:	bf44      	itt	mi
 800e7f0:	f043 0320 	orrmi.w	r3, r3, #32
 800e7f4:	6023      	strmi	r3, [r4, #0]
 800e7f6:	b11d      	cbz	r5, 800e800 <_printf_i+0x19c>
 800e7f8:	2310      	movs	r3, #16
 800e7fa:	e7ad      	b.n	800e758 <_printf_i+0xf4>
 800e7fc:	4826      	ldr	r0, [pc, #152]	@ (800e898 <_printf_i+0x234>)
 800e7fe:	e7e9      	b.n	800e7d4 <_printf_i+0x170>
 800e800:	6823      	ldr	r3, [r4, #0]
 800e802:	f023 0320 	bic.w	r3, r3, #32
 800e806:	6023      	str	r3, [r4, #0]
 800e808:	e7f6      	b.n	800e7f8 <_printf_i+0x194>
 800e80a:	4616      	mov	r6, r2
 800e80c:	e7bd      	b.n	800e78a <_printf_i+0x126>
 800e80e:	6833      	ldr	r3, [r6, #0]
 800e810:	6825      	ldr	r5, [r4, #0]
 800e812:	6961      	ldr	r1, [r4, #20]
 800e814:	1d18      	adds	r0, r3, #4
 800e816:	6030      	str	r0, [r6, #0]
 800e818:	062e      	lsls	r6, r5, #24
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	d501      	bpl.n	800e822 <_printf_i+0x1be>
 800e81e:	6019      	str	r1, [r3, #0]
 800e820:	e002      	b.n	800e828 <_printf_i+0x1c4>
 800e822:	0668      	lsls	r0, r5, #25
 800e824:	d5fb      	bpl.n	800e81e <_printf_i+0x1ba>
 800e826:	8019      	strh	r1, [r3, #0]
 800e828:	2300      	movs	r3, #0
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	4616      	mov	r6, r2
 800e82e:	e7bc      	b.n	800e7aa <_printf_i+0x146>
 800e830:	6833      	ldr	r3, [r6, #0]
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	6032      	str	r2, [r6, #0]
 800e836:	681e      	ldr	r6, [r3, #0]
 800e838:	6862      	ldr	r2, [r4, #4]
 800e83a:	2100      	movs	r1, #0
 800e83c:	4630      	mov	r0, r6
 800e83e:	f7f1 fccf 	bl	80001e0 <memchr>
 800e842:	b108      	cbz	r0, 800e848 <_printf_i+0x1e4>
 800e844:	1b80      	subs	r0, r0, r6
 800e846:	6060      	str	r0, [r4, #4]
 800e848:	6863      	ldr	r3, [r4, #4]
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	2300      	movs	r3, #0
 800e84e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e852:	e7aa      	b.n	800e7aa <_printf_i+0x146>
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	4632      	mov	r2, r6
 800e858:	4649      	mov	r1, r9
 800e85a:	4640      	mov	r0, r8
 800e85c:	47d0      	blx	sl
 800e85e:	3001      	adds	r0, #1
 800e860:	d0ad      	beq.n	800e7be <_printf_i+0x15a>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	079b      	lsls	r3, r3, #30
 800e866:	d413      	bmi.n	800e890 <_printf_i+0x22c>
 800e868:	68e0      	ldr	r0, [r4, #12]
 800e86a:	9b03      	ldr	r3, [sp, #12]
 800e86c:	4298      	cmp	r0, r3
 800e86e:	bfb8      	it	lt
 800e870:	4618      	movlt	r0, r3
 800e872:	e7a6      	b.n	800e7c2 <_printf_i+0x15e>
 800e874:	2301      	movs	r3, #1
 800e876:	4632      	mov	r2, r6
 800e878:	4649      	mov	r1, r9
 800e87a:	4640      	mov	r0, r8
 800e87c:	47d0      	blx	sl
 800e87e:	3001      	adds	r0, #1
 800e880:	d09d      	beq.n	800e7be <_printf_i+0x15a>
 800e882:	3501      	adds	r5, #1
 800e884:	68e3      	ldr	r3, [r4, #12]
 800e886:	9903      	ldr	r1, [sp, #12]
 800e888:	1a5b      	subs	r3, r3, r1
 800e88a:	42ab      	cmp	r3, r5
 800e88c:	dcf2      	bgt.n	800e874 <_printf_i+0x210>
 800e88e:	e7eb      	b.n	800e868 <_printf_i+0x204>
 800e890:	2500      	movs	r5, #0
 800e892:	f104 0619 	add.w	r6, r4, #25
 800e896:	e7f5      	b.n	800e884 <_printf_i+0x220>
 800e898:	0800fa45 	.word	0x0800fa45
 800e89c:	0800fa56 	.word	0x0800fa56

0800e8a0 <_realloc_r>:
 800e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	4614      	mov	r4, r2
 800e8a8:	460d      	mov	r5, r1
 800e8aa:	b921      	cbnz	r1, 800e8b6 <_realloc_r+0x16>
 800e8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	4611      	mov	r1, r2
 800e8b2:	f7ff bb19 	b.w	800dee8 <_malloc_r>
 800e8b6:	b92a      	cbnz	r2, 800e8c4 <_realloc_r+0x24>
 800e8b8:	f7ff fcc4 	bl	800e244 <_free_r>
 800e8bc:	4625      	mov	r5, r4
 800e8be:	4628      	mov	r0, r5
 800e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c4:	f000 f81a 	bl	800e8fc <_malloc_usable_size_r>
 800e8c8:	4284      	cmp	r4, r0
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	d802      	bhi.n	800e8d4 <_realloc_r+0x34>
 800e8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8d2:	d8f4      	bhi.n	800e8be <_realloc_r+0x1e>
 800e8d4:	4621      	mov	r1, r4
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	f7ff fb06 	bl	800dee8 <_malloc_r>
 800e8dc:	4680      	mov	r8, r0
 800e8de:	b908      	cbnz	r0, 800e8e4 <_realloc_r+0x44>
 800e8e0:	4645      	mov	r5, r8
 800e8e2:	e7ec      	b.n	800e8be <_realloc_r+0x1e>
 800e8e4:	42b4      	cmp	r4, r6
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	bf28      	it	cs
 800e8ec:	4632      	movcs	r2, r6
 800e8ee:	f7ff fc9b 	bl	800e228 <memcpy>
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	f7ff fca5 	bl	800e244 <_free_r>
 800e8fa:	e7f1      	b.n	800e8e0 <_realloc_r+0x40>

0800e8fc <_malloc_usable_size_r>:
 800e8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e900:	1f18      	subs	r0, r3, #4
 800e902:	2b00      	cmp	r3, #0
 800e904:	bfbc      	itt	lt
 800e906:	580b      	ldrlt	r3, [r1, r0]
 800e908:	18c0      	addlt	r0, r0, r3
 800e90a:	4770      	bx	lr

0800e90c <_init>:
 800e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90e:	bf00      	nop
 800e910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e912:	bc08      	pop	{r3}
 800e914:	469e      	mov	lr, r3
 800e916:	4770      	bx	lr

0800e918 <_fini>:
 800e918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91a:	bf00      	nop
 800e91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91e:	bc08      	pop	{r3}
 800e920:	469e      	mov	lr, r3
 800e922:	4770      	bx	lr
